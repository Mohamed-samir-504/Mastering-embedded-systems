
unit7_lesson1_lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  4 .ARM          00000000  0800036c  0800036c  00010374  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800036c  08000374  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800036c  0800036c  0001036c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000374  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000374  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010374  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000144  00000000  00000000  0001039d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000b6  00000000  00000000  000104e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000154  00000000  00000000  00010597  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000068  00000000  00000000  000106f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000050  00000000  00000000  00010758  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000f50  00000000  00000000  000107a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000047c  00000000  00000000  000116f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00003d1b  00000000  00000000  00011b74  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001588f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000e0  00000000  00000000  0001590c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000354 	.word	0x08000354

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000354 	.word	0x08000354

08000170 <clock_init>:
#define GPIOB_CRH      *(volatile uint32_t *) (GPIOB_BASE + 0x4)
#define GPIOB_CRL      *(volatile uint32_t *) (GPIOB_BASE + 0x00)
#define GPIOB_ODR      *(volatile uint32_t *) (GPIOB_BASE + 0x0c)
#define GPIOB_IDR      *(volatile uint32_t *) (GPIOB_BASE + 0x08)

void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	//GPIOA clock
	RCC_APB2ENR |= (1<<2);
 8000174:	4b07      	ldr	r3, [pc, #28]	; (8000194 <clock_init+0x24>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	4a06      	ldr	r2, [pc, #24]	; (8000194 <clock_init+0x24>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6013      	str	r3, [r2, #0]

	//GPIOB clock
	RCC_APB2ENR |= (1<<3);
 8000180:	4b04      	ldr	r3, [pc, #16]	; (8000194 <clock_init+0x24>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a03      	ldr	r2, [pc, #12]	; (8000194 <clock_init+0x24>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6013      	str	r3, [r2, #0]
}
 800018c:	bf00      	nop
 800018e:	46bd      	mov	sp, r7
 8000190:	bc80      	pop	{r7}
 8000192:	4770      	bx	lr
 8000194:	40021018 	.word	0x40021018

08000198 <GPIOA_init>:

void GPIOA_init(){
 8000198:	b480      	push	{r7}
 800019a:	af00      	add	r7, sp, #0

	GPIOA_CRL = 0x0;
 800019c:	4b0c      	ldr	r3, [pc, #48]	; (80001d0 <GPIOA_init+0x38>)
 800019e:	2200      	movs	r2, #0
 80001a0:	601a      	str	r2, [r3, #0]
	GPIOA_CRH = 0x0;
 80001a2:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <GPIOA_init+0x3c>)
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
	GPIOA_ODR = 0x0;
 80001a8:	4b0b      	ldr	r3, [pc, #44]	; (80001d8 <GPIOA_init+0x40>)
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]

	//make PA1 input floating
	GPIOA_CRL |= (0b01<<6);
 80001ae:	4b08      	ldr	r3, [pc, #32]	; (80001d0 <GPIOA_init+0x38>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	4a07      	ldr	r2, [pc, #28]	; (80001d0 <GPIOA_init+0x38>)
 80001b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001b8:	6013      	str	r3, [r2, #0]
	//make PA13 input floating
	GPIOA_CRH |= (0b01<<22);
 80001ba:	4b06      	ldr	r3, [pc, #24]	; (80001d4 <GPIOA_init+0x3c>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	4a05      	ldr	r2, [pc, #20]	; (80001d4 <GPIOA_init+0x3c>)
 80001c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001c4:	6013      	str	r3, [r2, #0]
}
 80001c6:	bf00      	nop
 80001c8:	46bd      	mov	sp, r7
 80001ca:	bc80      	pop	{r7}
 80001cc:	4770      	bx	lr
 80001ce:	bf00      	nop
 80001d0:	40010800 	.word	0x40010800
 80001d4:	40010804 	.word	0x40010804
 80001d8:	4001080c 	.word	0x4001080c

080001dc <GPIOB_init>:

void GPIOB_init(){
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	GPIOB_CRL = 0x0;
 80001e0:	4b0c      	ldr	r3, [pc, #48]	; (8000214 <GPIOB_init+0x38>)
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
	GPIOB_CRH = 0x0;
 80001e6:	4b0c      	ldr	r3, [pc, #48]	; (8000218 <GPIOB_init+0x3c>)
 80001e8:	2200      	movs	r2, #0
 80001ea:	601a      	str	r2, [r3, #0]
	GPIOB_ODR = 0x0;
 80001ec:	4b0b      	ldr	r3, [pc, #44]	; (800021c <GPIOB_init+0x40>)
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]

	//make PB1 push-pull output with 10MHz
	GPIOB_CRL |= (0b01<<4);
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <GPIOB_init+0x38>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a07      	ldr	r2, [pc, #28]	; (8000214 <GPIOB_init+0x38>)
 80001f8:	f043 0310 	orr.w	r3, r3, #16
 80001fc:	6013      	str	r3, [r2, #0]
	//make PB13 push-pull output with 10MHz
	GPIOB_CRH |= (0b01<<20);
 80001fe:	4b06      	ldr	r3, [pc, #24]	; (8000218 <GPIOB_init+0x3c>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	4a05      	ldr	r2, [pc, #20]	; (8000218 <GPIOB_init+0x3c>)
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	6013      	str	r3, [r2, #0]
}
 800020a:	bf00      	nop
 800020c:	46bd      	mov	sp, r7
 800020e:	bc80      	pop	{r7}
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	40010c00 	.word	0x40010c00
 8000218:	40010c04 	.word	0x40010c04
 800021c:	40010c0c 	.word	0x40010c0c

08000220 <my_wait>:

void my_wait (int x)
{
 8000220:	b480      	push	{r7}
 8000222:	b085      	sub	sp, #20
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	unsigned int i , j ;
	for (i= 0 ; i<x ; i++)
 8000228:	2300      	movs	r3, #0
 800022a:	60fb      	str	r3, [r7, #12]
 800022c:	e00b      	b.n	8000246 <my_wait+0x26>
		for (j= 0 ; j<255 ; j++);
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	e002      	b.n	800023a <my_wait+0x1a>
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	3301      	adds	r3, #1
 8000238:	60bb      	str	r3, [r7, #8]
 800023a:	68bb      	ldr	r3, [r7, #8]
 800023c:	2bfe      	cmp	r3, #254	; 0xfe
 800023e:	d9f9      	bls.n	8000234 <my_wait+0x14>
	for (i= 0 ; i<x ; i++)
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	3301      	adds	r3, #1
 8000244:	60fb      	str	r3, [r7, #12]
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	429a      	cmp	r2, r3
 800024c:	d3ef      	bcc.n	800022e <my_wait+0xe>
}
 800024e:	bf00      	nop
 8000250:	3714      	adds	r7, #20
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr

08000258 <main>:

int main(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
	clock_init();
 800025c:	f7ff ff88 	bl	8000170 <clock_init>
	GPIOA_init();
 8000260:	f7ff ff9a 	bl	8000198 <GPIOA_init>
	GPIOB_init();
 8000264:	f7ff ffba 	bl	80001dc <GPIOB_init>

	while(1){

		//PA1 is connected as external PUR (default value is 1)
		if(((GPIOA_IDR & (1<<1))>>1) == 0){  //single press PA1
 8000268:	4b11      	ldr	r3, [pc, #68]	; (80002b0 <main+0x58>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 0302 	and.w	r3, r3, #2
 8000270:	2b00      	cmp	r3, #0
 8000272:	d10c      	bne.n	800028e <main+0x36>

			//toggle PB1
			GPIOB_ODR ^= (1<<1);
 8000274:	4b0f      	ldr	r3, [pc, #60]	; (80002b4 <main+0x5c>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a0e      	ldr	r2, [pc, #56]	; (80002b4 <main+0x5c>)
 800027a:	f083 0302 	eor.w	r3, r3, #2
 800027e:	6013      	str	r3, [r2, #0]
			while(((GPIOA_IDR & (1<<1))>>1) == 0);//stay in loop while it is still pressed
 8000280:	bf00      	nop
 8000282:	4b0b      	ldr	r3, [pc, #44]	; (80002b0 <main+0x58>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <main+0x2a>
		}

		//PA1 is connected as external PDR (default value is 0)
		if(((GPIOA_IDR & (1<<13))>>13) == 1){  // press PA13
 800028e:	4b08      	ldr	r3, [pc, #32]	; (80002b0 <main+0x58>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	0b5b      	lsrs	r3, r3, #13
 8000294:	f003 0301 	and.w	r3, r3, #1
 8000298:	2b01      	cmp	r3, #1
 800029a:	d105      	bne.n	80002a8 <main+0x50>

			//toggle PB13;
			GPIOB_ODR ^= (1<<13);
 800029c:	4b05      	ldr	r3, [pc, #20]	; (80002b4 <main+0x5c>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a04      	ldr	r2, [pc, #16]	; (80002b4 <main+0x5c>)
 80002a2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80002a6:	6013      	str	r3, [r2, #0]
			//it will stay in this if condition while the button is pressed (multi press)
		}

		my_wait(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ffb9 	bl	8000220 <my_wait>
		if(((GPIOA_IDR & (1<<1))>>1) == 0){  //single press PA1
 80002ae:	e7db      	b.n	8000268 <main+0x10>
 80002b0:	40010808 	.word	0x40010808
 80002b4:	40010c0c 	.word	0x40010c0c

080002b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002b8:	480d      	ldr	r0, [pc, #52]	; (80002f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002bc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c0:	480c      	ldr	r0, [pc, #48]	; (80002f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c2:	490d      	ldr	r1, [pc, #52]	; (80002f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <LoopForever+0xe>)
  movs r3, #0
 80002c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002c8:	e002      	b.n	80002d0 <LoopCopyDataInit>

080002ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ce:	3304      	adds	r3, #4

080002d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d4:	d3f9      	bcc.n	80002ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002d6:	4a0a      	ldr	r2, [pc, #40]	; (8000300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002d8:	4c0a      	ldr	r4, [pc, #40]	; (8000304 <LoopForever+0x16>)
  movs r3, #0
 80002da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002dc:	e001      	b.n	80002e2 <LoopFillZerobss>

080002de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e0:	3204      	adds	r2, #4

080002e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e4:	d3fb      	bcc.n	80002de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002e6:	f000 f811 	bl	800030c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ea:	f7ff ffb5 	bl	8000258 <main>

080002ee <LoopForever>:

LoopForever:
    b LoopForever
 80002ee:	e7fe      	b.n	80002ee <LoopForever>
  ldr   r0, =_estack
 80002f0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002f8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002fc:	08000374 	.word	0x08000374
  ldr r2, =_sbss
 8000300:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000304:	2000001c 	.word	0x2000001c

08000308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000308:	e7fe      	b.n	8000308 <ADC1_2_IRQHandler>
	...

0800030c <__libc_init_array>:
 800030c:	b570      	push	{r4, r5, r6, lr}
 800030e:	2500      	movs	r5, #0
 8000310:	4e0c      	ldr	r6, [pc, #48]	; (8000344 <__libc_init_array+0x38>)
 8000312:	4c0d      	ldr	r4, [pc, #52]	; (8000348 <__libc_init_array+0x3c>)
 8000314:	1ba4      	subs	r4, r4, r6
 8000316:	10a4      	asrs	r4, r4, #2
 8000318:	42a5      	cmp	r5, r4
 800031a:	d109      	bne.n	8000330 <__libc_init_array+0x24>
 800031c:	f000 f81a 	bl	8000354 <_init>
 8000320:	2500      	movs	r5, #0
 8000322:	4e0a      	ldr	r6, [pc, #40]	; (800034c <__libc_init_array+0x40>)
 8000324:	4c0a      	ldr	r4, [pc, #40]	; (8000350 <__libc_init_array+0x44>)
 8000326:	1ba4      	subs	r4, r4, r6
 8000328:	10a4      	asrs	r4, r4, #2
 800032a:	42a5      	cmp	r5, r4
 800032c:	d105      	bne.n	800033a <__libc_init_array+0x2e>
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000334:	4798      	blx	r3
 8000336:	3501      	adds	r5, #1
 8000338:	e7ee      	b.n	8000318 <__libc_init_array+0xc>
 800033a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800033e:	4798      	blx	r3
 8000340:	3501      	adds	r5, #1
 8000342:	e7f2      	b.n	800032a <__libc_init_array+0x1e>
 8000344:	0800036c 	.word	0x0800036c
 8000348:	0800036c 	.word	0x0800036c
 800034c:	0800036c 	.word	0x0800036c
 8000350:	08000370 	.word	0x08000370

08000354 <_init>:
 8000354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000356:	bf00      	nop
 8000358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035a:	bc08      	pop	{r3}
 800035c:	469e      	mov	lr, r3
 800035e:	4770      	bx	lr

08000360 <_fini>:
 8000360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000362:	bf00      	nop
 8000364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000366:	bc08      	pop	{r3}
 8000368:	469e      	mov	lr, r3
 800036a:	4770      	bx	lr

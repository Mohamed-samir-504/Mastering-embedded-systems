
Task2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000192  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000192  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000058a  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000513  00000000  00000000  000007aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d7  00000000  00000000  00000cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000e94  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000071  00000000  00000000  000011a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001212  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>

int main(void)
{
	int flag = 0;
    for (int i = 0; i<8; i++)
  6c:	20 e0       	ldi	r18, 0x00	; 0
  6e:	30 e0       	ldi	r19, 0x00	; 0
  70:	0d c0       	rjmp	.+26     	; 0x8c <main+0x20>
    {
	    SET_BIT(DDRA,i);
  72:	4a b3       	in	r20, 0x1a	; 26
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	02 2e       	mov	r0, r18
  7a:	02 c0       	rjmp	.+4      	; 0x80 <main+0x14>
  7c:	88 0f       	add	r24, r24
  7e:	99 1f       	adc	r25, r25
  80:	0a 94       	dec	r0
  82:	e2 f7       	brpl	.-8      	; 0x7c <main+0x10>
  84:	84 2b       	or	r24, r20
  86:	8a bb       	out	0x1a, r24	; 26
#include <util/delay.h>

int main(void)
{
	int flag = 0;
    for (int i = 0; i<8; i++)
  88:	2f 5f       	subi	r18, 0xFF	; 255
  8a:	3f 4f       	sbci	r19, 0xFF	; 255
  8c:	28 30       	cpi	r18, 0x08	; 8
  8e:	31 05       	cpc	r19, r1
  90:	84 f3       	brlt	.-32     	; 0x72 <main+0x6>
    {
	    SET_BIT(DDRA,i);
    }
	
	CLEAR_BIT(DDRC,0);
  92:	84 b3       	in	r24, 0x14	; 20
  94:	8e 7f       	andi	r24, 0xFE	; 254
  96:	84 bb       	out	0x14, r24	; 20
	SET_BIT(PORTC,0);
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	81 60       	ori	r24, 0x01	; 1
  9c:	85 bb       	out	0x15, r24	; 21
#include "MemMap.h"
#include <util/delay.h>

int main(void)
{
	int flag = 0;
  9e:	80 e0       	ldi	r24, 0x00	; 0
  a0:	90 e0       	ldi	r25, 0x00	; 0
	CLEAR_BIT(DDRC,0);
	SET_BIT(PORTC,0);
	
    while (1) 
    {
		if(READ_BIT(PINC,0) == 0){
  a2:	98 99       	sbic	0x13, 0	; 19
  a4:	fe cf       	rjmp	.-4      	; 0xa2 <main+0x36>
			if(flag == 0){
  a6:	00 97       	sbiw	r24, 0x00	; 0
  a8:	81 f4       	brne	.+32     	; 0xca <main+0x5e>
				CLEAR_BIT(PORTA,7);
  aa:	2b b3       	in	r18, 0x1b	; 27
  ac:	2f 77       	andi	r18, 0x7F	; 127
  ae:	2b bb       	out	0x1b, r18	; 27
				SET_BIT(PORTA,flag);
  b0:	4b b3       	in	r20, 0x1b	; 27
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	08 2e       	mov	r0, r24
  b8:	02 c0       	rjmp	.+4      	; 0xbe <main+0x52>
  ba:	22 0f       	add	r18, r18
  bc:	33 1f       	adc	r19, r19
  be:	0a 94       	dec	r0
  c0:	e2 f7       	brpl	.-8      	; 0xba <main+0x4e>
  c2:	24 2b       	or	r18, r20
  c4:	2b bb       	out	0x1b, r18	; 27
				flag++;
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	35 c0       	rjmp	.+106    	; 0x134 <main+0xc8>
			}
			else if(flag == 7){
  ca:	87 30       	cpi	r24, 0x07	; 7
  cc:	91 05       	cpc	r25, r1
  ce:	c9 f4       	brne	.+50     	; 0x102 <main+0x96>
				SET_BIT(PORTA,flag);
  d0:	6b b3       	in	r22, 0x1b	; 27
  d2:	21 e0       	ldi	r18, 0x01	; 1
  d4:	30 e0       	ldi	r19, 0x00	; 0
  d6:	a9 01       	movw	r20, r18
  d8:	08 2e       	mov	r0, r24
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x70>
  e4:	46 2b       	or	r20, r22
  e6:	4b bb       	out	0x1b, r20	; 27
				CLEAR_BIT(PORTA,flag-1);
  e8:	4b b3       	in	r20, 0x1b	; 27
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <main+0x86>
  ee:	22 0f       	add	r18, r18
  f0:	33 1f       	adc	r19, r19
  f2:	8a 95       	dec	r24
  f4:	e2 f7       	brpl	.-8      	; 0xee <main+0x82>
  f6:	20 95       	com	r18
  f8:	24 23       	and	r18, r20
  fa:	2b bb       	out	0x1b, r18	; 27
				flag = 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	19 c0       	rjmp	.+50     	; 0x134 <main+0xc8>
			}
			else{
				SET_BIT(PORTA,flag);
 102:	6b b3       	in	r22, 0x1b	; 27
 104:	21 e0       	ldi	r18, 0x01	; 1
 106:	30 e0       	ldi	r19, 0x00	; 0
 108:	a9 01       	movw	r20, r18
 10a:	08 2e       	mov	r0, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <main+0xa6>
 10e:	44 0f       	add	r20, r20
 110:	55 1f       	adc	r21, r21
 112:	0a 94       	dec	r0
 114:	e2 f7       	brpl	.-8      	; 0x10e <main+0xa2>
 116:	46 2b       	or	r20, r22
 118:	4b bb       	out	0x1b, r20	; 27
				CLEAR_BIT(PORTA,flag-1);
 11a:	4b b3       	in	r20, 0x1b	; 27
 11c:	bc 01       	movw	r22, r24
 11e:	61 50       	subi	r22, 0x01	; 1
 120:	71 09       	sbc	r23, r1
 122:	02 c0       	rjmp	.+4      	; 0x128 <main+0xbc>
 124:	22 0f       	add	r18, r18
 126:	33 1f       	adc	r19, r19
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <main+0xb8>
 12c:	20 95       	com	r18
 12e:	24 23       	and	r18, r20
 130:	2b bb       	out	0x1b, r18	; 27
				flag++;
 132:	01 96       	adiw	r24, 0x01	; 1
			}
			
			//do nothing while holding switch
			while(READ_BIT(PINC,0) == 0);
 134:	98 9b       	sbis	0x13, 0	; 19
 136:	fe cf       	rjmp	.-4      	; 0x134 <main+0xc8>
 138:	b4 cf       	rjmp	.-152    	; 0xa2 <main+0x36>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>

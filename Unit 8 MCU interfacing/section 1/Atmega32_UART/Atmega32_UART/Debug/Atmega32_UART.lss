
Atmega32_UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000002c0  00000334  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000003b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c61  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082f  00000000  00000000  000010d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006cc  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000178  00000000  00000000  00001fcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000469  00000000  00000000  00002144  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000480  00000000  00000000  000025ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002a2d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ec       	ldi	r30, 0xC0	; 192
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  7a:	0c 94 5e 01 	jmp	0x2bc	; 0x2bc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  82:	88 b3       	in	r24, 0x18	; 24
  84:	88 60       	ori	r24, 0x08	; 8
  86:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	83 ed       	ldi	r24, 0xD3	; 211
  8a:	90 e3       	ldi	r25, 0x30	; 48
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <LCD_lcd_kick+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <LCD_lcd_kick+0x10>
  92:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  94:	88 b3       	in	r24, 0x18	; 24
  96:	87 7f       	andi	r24, 0xF7	; 247
  98:	88 bb       	out	0x18, r24	; 24
  9a:	08 95       	ret

0000009c <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  9c:	8a b3       	in	r24, 0x1a	; 26
  9e:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  a0:	88 b3       	in	r24, 0x18	; 24
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  ac:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8b 7f       	andi	r24, 0xFB	; 251
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	08 95       	ret

000000be <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
  be:	cf 93       	push	r28
  c0:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
  c2:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
		LCD_PORT = command;
  c6:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	89 7f       	andi	r24, 0xF9	; 249
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <LCD_WRITE_COMMAND+0x14>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <LCD_WRITE_COMMAND+0x1a>
  d8:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_clear_screen>:


#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
  e8:	08 95       	ret

000000ea <LCD_GOTO_XY>:
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	c8 2f       	mov	r28, r24
  f0:	d6 2f       	mov	r29, r22
	if (line == 1)
  f2:	81 30       	cpi	r24, 0x01	; 1
  f4:	31 f4       	brne	.+12     	; 0x102 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
  f6:	60 31       	cpi	r22, 0x10	; 16
  f8:	20 f4       	brcc	.+8      	; 0x102 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
  fa:	80 e8       	ldi	r24, 0x80	; 128
  fc:	86 0f       	add	r24, r22
  fe:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 102:	c2 30       	cpi	r28, 0x02	; 2
 104:	31 f4       	brne	.+12     	; 0x112 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 106:	d0 31       	cpi	r29, 0x10	; 16
 108:	20 f4       	brcc	.+8      	; 0x112 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 10a:	80 ec       	ldi	r24, 0xC0	; 192
 10c:	8d 0f       	add	r24, r29
 10e:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
		}
	}
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <LCD_INIT>:
 118:	87 e8       	ldi	r24, 0x87	; 135
 11a:	93 e1       	ldi	r25, 0x13	; 19
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <LCD_INIT+0x4>
 120:	00 c0       	rjmp	.+0      	; 0x122 <LCD_INIT+0xa>
 122:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 124:	87 b3       	in	r24, 0x17	; 23
 126:	8e 60       	ori	r24, 0x0E	; 14
 128:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	81 7f       	andi	r24, 0xF1	; 241
 12e:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	8a bb       	out	0x1a, r24	; 26
 134:	85 ea       	ldi	r24, 0xA5	; 165
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_INIT+0x20>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_INIT+0x26>
 13e:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 140:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 144:	88 e3       	ldi	r24, 0x38	; 56
 146:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE); 
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 150:	80 e8       	ldi	r24, 0x80	; 128
 152:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	0e 94 5f 00 	call	0xbe	; 0xbe <LCD_WRITE_COMMAND>
 15c:	08 95       	ret

0000015e <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 15e:	cf 93       	push	r28
 160:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 162:	0e 94 4e 00 	call	0x9c	; 0x9c <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 166:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 168:	88 b3       	in	r24, 0x18	; 24
 16a:	8b 7f       	andi	r24, 0xFB	; 251
 16c:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 16e:	88 b3       	in	r24, 0x18	; 24
 170:	82 60       	ori	r24, 0x02	; 2
 172:	88 bb       	out	0x18, r24	; 24
 174:	89 ef       	ldi	r24, 0xF9	; 249
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	01 97       	sbiw	r24, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_WRITE_CHAR+0x1a>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_WRITE_CHAR+0x20>
 17e:	00 00       	nop
		_delay_ms(1); 
		LCD_lcd_kick();
 180:	0e 94 41 00 	call	0x82	; 0x82 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 184:	cf 91       	pop	r28
 186:	08 95       	ret

00000188 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
 190:	8c 01       	movw	r16, r24
	int count = 0;
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 196:	18 c0       	rjmp	.+48     	; 0x1c8 <LCD_WRITE_STRING+0x40>
		count++;
 198:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 19a:	0f 5f       	subi	r16, 0xFF	; 255
 19c:	1f 4f       	sbci	r17, 0xFF	; 255
 19e:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_WRITE_CHAR>
		if (count == 16)
 1a2:	c0 31       	cpi	r28, 0x10	; 16
 1a4:	d1 05       	cpc	r29, r1
 1a6:	29 f4       	brne	.+10     	; 0x1b2 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 1a8:	60 e0       	ldi	r22, 0x00	; 0
 1aa:	82 e0       	ldi	r24, 0x02	; 2
 1ac:	0e 94 75 00 	call	0xea	; 0xea <LCD_GOTO_XY>
 1b0:	0b c0       	rjmp	.+22     	; 0x1c8 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 1b2:	c0 32       	cpi	r28, 0x20	; 32
 1b4:	d1 05       	cpc	r29, r1
 1b6:	41 f4       	brne	.+16     	; 0x1c8 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 1b8:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 75 00 	call	0xea	; 0xea <LCD_GOTO_XY>
			count = 0;
 1c4:	c0 e0       	ldi	r28, 0x00	; 0
 1c6:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1c8:	f8 01       	movw	r30, r16
 1ca:	80 81       	ld	r24, Z
 1cc:	81 11       	cpse	r24, r1
 1ce:	e4 cf       	rjmp	.-56     	; 0x198 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	08 95       	ret

000001da <main>:
#include "MCAL/UART.h"
#include "HAL/lcd.h"


int main(void)
{
 1da:	cf 93       	push	r28
 1dc:	df 93       	push	r29
 1de:	cd b7       	in	r28, 0x3d	; 61
 1e0:	de b7       	in	r29, 0x3e	; 62
 1e2:	c8 5c       	subi	r28, 0xC8	; 200
 1e4:	d1 09       	sbc	r29, r1
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	f8 94       	cli
 1ea:	de bf       	out	0x3e, r29	; 62
 1ec:	0f be       	out	0x3f, r0	; 63
 1ee:	cd bf       	out	0x3d, r28	; 61
	
    char x;
	char strr[200];
	LCD_INIT();
 1f0:	0e 94 8c 00 	call	0x118	; 0x118 <LCD_INIT>
	LCD_clear_screen();
 1f4:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_clear_screen>
 1f8:	2f e3       	ldi	r18, 0x3F	; 63
 1fa:	8d e0       	ldi	r24, 0x0D	; 13
 1fc:	93 e0       	ldi	r25, 0x03	; 3
 1fe:	21 50       	subi	r18, 0x01	; 1
 200:	80 40       	sbci	r24, 0x00	; 0
 202:	90 40       	sbci	r25, 0x00	; 0
 204:	e1 f7       	brne	.-8      	; 0x1fe <main+0x24>
 206:	00 c0       	rjmp	.+0      	; 0x208 <main+0x2e>
 208:	00 00       	nop
	_delay_ms(1000);
	LCD_WRITE_STRING("UART test");
 20a:	80 e6       	ldi	r24, 0x60	; 96
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_WRITE_STRING>
	
	UART_init();
 212:	0e 94 1c 01 	call	0x238	; 0x238 <UART_init>
	
	LCD_GOTO_XY(2,0);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	82 e0       	ldi	r24, 0x02	; 2
 21a:	0e 94 75 00 	call	0xea	; 0xea <LCD_GOTO_XY>
	UART_SendString("Mohamed samir");
 21e:	8a e6       	ldi	r24, 0x6A	; 106
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 3c 01 	call	0x278	; 0x278 <UART_SendString>
	
    while (1) 
    {
		UART_ReceiveString(strr);
 226:	ce 01       	movw	r24, r28
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	0e 94 4c 01 	call	0x298	; 0x298 <UART_ReceiveString>
		LCD_WRITE_STRING(strr);
 22e:	ce 01       	movw	r24, r28
 230:	01 96       	adiw	r24, 0x01	; 1
 232:	0e 94 c4 00 	call	0x188	; 0x188 <LCD_WRITE_STRING>
 236:	f7 cf       	rjmp	.-18     	; 0x226 <main+0x4c>

00000238 <UART_init>:
	//choose asynch mode (default)
	//CLEAR_BIT(UCSRC,UMSEL);
	
	//we are working with f_osc = 16MHz
	//normal mode (divider = 16)
	CLEAR_BIT(UCSRA,U2X);
 238:	8b b1       	in	r24, 0x0b	; 11
 23a:	8d 7f       	andi	r24, 0xFD	; 253
 23c:	8b b9       	out	0x0b, r24	; 11
	UBRRL = 103; //from data sheet
 23e:	87 e6       	ldi	r24, 0x67	; 103
 240:	89 b9       	out	0x09, r24	; 9
	//stop bit
	#ifdef  one_stop_bit
	CLEAR_BIT(UCSRC,USBS);
	#endif
	#ifdef two_stop_bit
	SET_BIT(UCSRC,USBS);
 242:	80 b5       	in	r24, 0x20	; 32
 244:	88 60       	ori	r24, 0x08	; 8
 246:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
		CLEAR_BIT(UCSRB,UCSZ2);
		break;

		case 8:
		SET_BIT(UCSRC,UCSZ0);
 248:	80 b5       	in	r24, 0x20	; 32
 24a:	82 60       	ori	r24, 0x02	; 2
 24c:	80 bd       	out	0x20, r24	; 32
		SET_BIT(UCSRC,UCSZ1);
 24e:	80 b5       	in	r24, 0x20	; 32
 250:	84 60       	ori	r24, 0x04	; 4
 252:	80 bd       	out	0x20, r24	; 32
		CLEAR_BIT(UCSRB,UCSZ2);
 254:	8a b1       	in	r24, 0x0a	; 10
 256:	8b 7f       	andi	r24, 0xFB	; 251
 258:	8a b9       	out	0x0a, r24	; 10
		CLEAR_BIT(UCSRB,UCSZ2);
		
	}
	
	//-----------------Enable----------------------
	SET_BIT(UCSRB,TXEN);
 25a:	8a b1       	in	r24, 0x0a	; 10
 25c:	88 60       	ori	r24, 0x08	; 8
 25e:	8a b9       	out	0x0a, r24	; 10
	SET_BIT(UCSRB,RXEN);
 260:	8a b1       	in	r24, 0x0a	; 10
 262:	80 61       	ori	r24, 0x10	; 16
 264:	8a b9       	out	0x0a, r24	; 10
 266:	08 95       	ret

00000268 <UART_SendChar>:
}

void UART_SendChar(char data){
	
	while(!(READ_BIT(UCSRA,UDRE)));
 268:	5d 9b       	sbis	0x0b, 5	; 11
 26a:	fe cf       	rjmp	.-4      	; 0x268 <UART_SendChar>
	UDR = data;
 26c:	8c b9       	out	0x0c, r24	; 12
 26e:	08 95       	ret

00000270 <UART_ReceiveChar>:
}
char UART_ReceiveChar(){
	while(!(READ_BIT(UCSRA,RXC)));
 270:	5f 9b       	sbis	0x0b, 7	; 11
 272:	fe cf       	rjmp	.-4      	; 0x270 <UART_ReceiveChar>
	return UDR;
 274:	8c b1       	in	r24, 0x0c	; 12
}
 276:	08 95       	ret

00000278 <UART_SendString>:


void UART_SendString(char* str) {
 278:	cf 93       	push	r28
 27a:	df 93       	push	r29
 27c:	ec 01       	movw	r28, r24
	while (*str != '\0') {
 27e:	03 c0       	rjmp	.+6      	; 0x286 <UART_SendString+0xe>
		UART_SendChar(*str);
 280:	0e 94 34 01 	call	0x268	; 0x268 <UART_SendChar>
		str++;
 284:	21 96       	adiw	r28, 0x01	; 1
	return UDR;
}


void UART_SendString(char* str) {
	while (*str != '\0') {
 286:	88 81       	ld	r24, Y
 288:	81 11       	cpse	r24, r1
 28a:	fa cf       	rjmp	.-12     	; 0x280 <UART_SendString+0x8>
		UART_SendChar(*str);
		str++;
	}
	//to indicate end
	UART_SendChar('\r');
 28c:	8d e0       	ldi	r24, 0x0D	; 13
 28e:	0e 94 34 01 	call	0x268	; 0x268 <UART_SendChar>
}
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <UART_ReceiveString>:


void UART_ReceiveString(char *Buffer)
{
 298:	cf 93       	push	r28
 29a:	df 93       	push	r29
 29c:	ec 01       	movw	r28, r24
	
	*Buffer = UART_ReceiveChar();
 29e:	0e 94 38 01 	call	0x270	; 0x270 <UART_ReceiveChar>
 2a2:	88 83       	st	Y, r24
	while (*Buffer != '\r') {
 2a4:	04 c0       	rjmp	.+8      	; 0x2ae <UART_ReceiveString+0x16>
		Buffer++;
 2a6:	21 96       	adiw	r28, 0x01	; 1
		*Buffer = UART_ReceiveChar();
 2a8:	0e 94 38 01 	call	0x270	; 0x270 <UART_ReceiveChar>
 2ac:	88 83       	st	Y, r24

void UART_ReceiveString(char *Buffer)
{
	
	*Buffer = UART_ReceiveChar();
	while (*Buffer != '\r') {
 2ae:	88 81       	ld	r24, Y
 2b0:	8d 30       	cpi	r24, 0x0D	; 13
 2b2:	c9 f7       	brne	.-14     	; 0x2a6 <UART_ReceiveString+0xe>
		Buffer++;
		*Buffer = UART_ReceiveChar();
	}
	*Buffer = '\0'; 
 2b4:	18 82       	st	Y, r1
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <_exit>:
 2bc:	f8 94       	cli

000002be <__stop_program>:
 2be:	ff cf       	rjmp	.-2      	; 0x2be <__stop_program>

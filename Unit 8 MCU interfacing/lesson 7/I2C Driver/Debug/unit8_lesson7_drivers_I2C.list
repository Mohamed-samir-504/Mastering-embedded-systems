
unit8_lesson7_drivers_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e3c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08000f6c  08000f6c  00010f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f8c  08000f8c  00010f94  2**0
                  CONTENTS
  4 .ARM          00000000  08000f8c  08000f8c  00010f94  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f8c  08000f94  00010f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f8c  08000f8c  00010f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f90  08000f90  00010f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000000  08000f94  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  08000f94  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f94  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006196  00000000  00000000  00010fbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001093  00000000  00000000  00017153  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000002a8  00000000  00000000  000181e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000220  00000000  00000000  00018490  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ed4  00000000  00000000  000186b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003515  00000000  00000000  0001b584  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000c138  00000000  00000000  0001ea99  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002abd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000087c  00000000  00000000  0002ac4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000f54 	.word	0x08000f54

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000f54 	.word	0x08000f54

08000170 <EEPROM_INIT>:
#include "I2C_Slave_EEPROM.h"

void EEPROM_INIT(void){
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	I2C_config i2c_cfg;

	i2c_cfg.ACK_Control = I2C_ACK_ENABLE;
 8000176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800017a:	61bb      	str	r3, [r7, #24]
	i2c_cfg.Clock_Speed = I2C_CLCK_SM_100K;
 800017c:	4b09      	ldr	r3, [pc, #36]	; (80001a4 <EEPROM_INIT+0x34>)
 800017e:	603b      	str	r3, [r7, #0]
	i2c_cfg.I2C_Mode = I2C_MODE_I2C;
 8000180:	2300      	movs	r3, #0
 8000182:	60bb      	str	r3, [r7, #8]
	i2c_cfg.P_IRQ_Callback = NULL;
 8000184:	2300      	movs	r3, #0
 8000186:	61fb      	str	r3, [r7, #28]
	i2c_cfg.Stretch_Mode = I2C_STRECH_ENABLE;
 8000188:	2300      	movs	r3, #0
 800018a:	607b      	str	r3, [r7, #4]

	MCAL_I2C_GPIO_Set_Pins(I2C1);
 800018c:	4806      	ldr	r0, [pc, #24]	; (80001a8 <EEPROM_INIT+0x38>)
 800018e:	f000 fb83 	bl	8000898 <MCAL_I2C_GPIO_Set_Pins>
	MCAL_I2C_Init(I2C1, &i2c_cfg);
 8000192:	463b      	mov	r3, r7
 8000194:	4619      	mov	r1, r3
 8000196:	4804      	ldr	r0, [pc, #16]	; (80001a8 <EEPROM_INIT+0x38>)
 8000198:	f000 fa78 	bl	800068c <MCAL_I2C_Init>
}
 800019c:	bf00      	nop
 800019e:	3720      	adds	r7, #32
 80001a0:	46bd      	mov	sp, r7
 80001a2:	bd80      	pop	{r7, pc}
 80001a4:	000186a0 	.word	0x000186a0
 80001a8:	40005400 	.word	0x40005400

080001ac <EEPROM_WRITE_DATA>:


uint8_t EEPROM_WRITE_DATA(uint32_t EEPROM_ADDRESS , uint8_t* PTXBUFFER , uint8_t DATALEN){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b0c8      	sub	sp, #288	; 0x120
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	f107 030c 	add.w	r3, r7, #12
 80001b6:	6018      	str	r0, [r3, #0]
 80001b8:	f107 0308 	add.w	r3, r7, #8
 80001bc:	6019      	str	r1, [r3, #0]
 80001be:	1dfb      	adds	r3, r7, #7
 80001c0:	701a      	strb	r2, [r3, #0]

	uint8_t i=0;
 80001c2:	2300      	movs	r3, #0
 80001c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t BUFFER[256];
	BUFFER[0] = (uint8_t)(EEPROM_ADDRESS>>8);   // TO SEND UPPER BYTE
 80001c8:	f107 030c 	add.w	r3, r7, #12
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	0a1b      	lsrs	r3, r3, #8
 80001d0:	b2da      	uxtb	r2, r3
 80001d2:	f107 0314 	add.w	r3, r7, #20
 80001d6:	701a      	strb	r2, [r3, #0]
	BUFFER[1] = (uint8_t)(EEPROM_ADDRESS);		// TO SEND LOWER BYTE
 80001d8:	f107 030c 	add.w	r3, r7, #12
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	b2da      	uxtb	r2, r3
 80001e0:	f107 0314 	add.w	r3, r7, #20
 80001e4:	705a      	strb	r2, [r3, #1]

	for( i = 2; i<(DATALEN+2); i++)
 80001e6:	2302      	movs	r3, #2
 80001e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 80001ec:	e011      	b.n	8000212 <EEPROM_WRITE_DATA+0x66>
	{
		BUFFER[i]= PTXBUFFER[i-2];
 80001ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80001f2:	3b02      	subs	r3, #2
 80001f4:	f107 0208 	add.w	r2, r7, #8
 80001f8:	6812      	ldr	r2, [r2, #0]
 80001fa:	441a      	add	r2, r3
 80001fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000200:	7811      	ldrb	r1, [r2, #0]
 8000202:	f107 0214 	add.w	r2, r7, #20
 8000206:	54d1      	strb	r1, [r2, r3]
	for( i = 2; i<(DATALEN+2); i++)
 8000208:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800020c:	3301      	adds	r3, #1
 800020e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000212:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 8000216:	1dfb      	adds	r3, r7, #7
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	3302      	adds	r3, #2
 800021c:	429a      	cmp	r2, r3
 800021e:	dbe6      	blt.n	80001ee <EEPROM_WRITE_DATA+0x42>
	}

	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADRESS, BUFFER, (DATALEN+2),WITH_STOP, START);
 8000220:	1dfb      	adds	r3, r7, #7
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	3302      	adds	r3, #2
 8000226:	4619      	mov	r1, r3
 8000228:	f107 0214 	add.w	r2, r7, #20
 800022c:	2300      	movs	r3, #0
 800022e:	9301      	str	r3, [sp, #4]
 8000230:	2300      	movs	r3, #0
 8000232:	9300      	str	r3, [sp, #0]
 8000234:	460b      	mov	r3, r1
 8000236:	212a      	movs	r1, #42	; 0x2a
 8000238:	4804      	ldr	r0, [pc, #16]	; (800024c <EEPROM_WRITE_DATA+0xa0>)
 800023a:	f000 fb71 	bl	8000920 <MCAL_I2C_MASTER_TX>

	return 0;
 800023e:	2300      	movs	r3, #0
}
 8000240:	4618      	mov	r0, r3
 8000242:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8000246:	46bd      	mov	sp, r7
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	40005400 	.word	0x40005400

08000250 <EEPROM_READ_DATA>:

uint8_t EEPROM_READ_DATA( uint32_t EEPROM_ADDRESS , uint8_t* PRXBUFFER , uint8_t DATALEN){
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af02      	add	r7, sp, #8
 8000256:	60f8      	str	r0, [r7, #12]
 8000258:	60b9      	str	r1, [r7, #8]
 800025a:	4613      	mov	r3, r2
 800025c:	71fb      	strb	r3, [r7, #7]

	uint8_t BUFFER[2];
	BUFFER[0] = (uint8_t)(EEPROM_ADDRESS>>8);   // TO SEND UPPER BYTE
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	0a1b      	lsrs	r3, r3, #8
 8000262:	b2db      	uxtb	r3, r3
 8000264:	753b      	strb	r3, [r7, #20]
	BUFFER[1] = (uint8_t)(EEPROM_ADDRESS);		// TO SEND LOWER BYTE
 8000266:	68fb      	ldr	r3, [r7, #12]
 8000268:	b2db      	uxtb	r3, r3
 800026a:	757b      	strb	r3, [r7, #21]
	//send address
	MCAL_I2C_MASTER_TX(I2C1, EEPROM_SLAVE_ADRESS, BUFFER, 2, WITH_STOP, START);
 800026c:	f107 0214 	add.w	r2, r7, #20
 8000270:	2300      	movs	r3, #0
 8000272:	9301      	str	r3, [sp, #4]
 8000274:	2300      	movs	r3, #0
 8000276:	9300      	str	r3, [sp, #0]
 8000278:	2302      	movs	r3, #2
 800027a:	212a      	movs	r1, #42	; 0x2a
 800027c:	4809      	ldr	r0, [pc, #36]	; (80002a4 <EEPROM_READ_DATA+0x54>)
 800027e:	f000 fb4f 	bl	8000920 <MCAL_I2C_MASTER_TX>
	// Read Data
	MCAL_I2C_MASTER_RX(I2C1, EEPROM_SLAVE_ADRESS, PRXBUFFER, DATALEN, WITH_STOP, REPEATEDSTART);
 8000282:	79fa      	ldrb	r2, [r7, #7]
 8000284:	2301      	movs	r3, #1
 8000286:	9301      	str	r3, [sp, #4]
 8000288:	2300      	movs	r3, #0
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4613      	mov	r3, r2
 800028e:	68ba      	ldr	r2, [r7, #8]
 8000290:	212a      	movs	r1, #42	; 0x2a
 8000292:	4804      	ldr	r0, [pc, #16]	; (80002a4 <EEPROM_READ_DATA+0x54>)
 8000294:	f000 fb9a 	bl	80009cc <MCAL_I2C_MASTER_RX>

	return 0;
 8000298:	2300      	movs	r3, #0
}
 800029a:	4618      	mov	r0, r3
 800029c:	3718      	adds	r7, #24
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	40005400 	.word	0x40005400

080002a8 <EXTI0_IRQHandler>:

//================== ISR Functions==========================================


void EXTI0_IRQHandler(void)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<0);
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI0_IRQHandler+0x1c>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI0_IRQHandler+0x1c>)
 80002b2:	f043 0301 	orr.w	r3, r3, #1
 80002b6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[0]();
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI0_IRQHandler+0x20>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000070 	.word	0x20000070

080002cc <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <EXTI1_IRQHandler+0x1c>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <EXTI1_IRQHandler+0x1c>)
 80002d6:	f043 0302 	orr.w	r3, r3, #2
 80002da:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 80002dc:	4b03      	ldr	r3, [pc, #12]	; (80002ec <EXTI1_IRQHandler+0x20>)
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	4798      	blx	r3
}
 80002e2:	bf00      	nop
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	40010400 	.word	0x40010400
 80002ec:	20000070 	.word	0x20000070

080002f0 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <EXTI2_IRQHandler+0x1c>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <EXTI2_IRQHandler+0x1c>)
 80002fa:	f043 0304 	orr.w	r3, r3, #4
 80002fe:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <EXTI2_IRQHandler+0x20>)
 8000302:	689b      	ldr	r3, [r3, #8]
 8000304:	4798      	blx	r3
}
 8000306:	bf00      	nop
 8000308:	bd80      	pop	{r7, pc}
 800030a:	bf00      	nop
 800030c:	40010400 	.word	0x40010400
 8000310:	20000070 	.word	0x20000070

08000314 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 8000318:	4b05      	ldr	r3, [pc, #20]	; (8000330 <EXTI3_IRQHandler+0x1c>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a04      	ldr	r2, [pc, #16]	; (8000330 <EXTI3_IRQHandler+0x1c>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 8000324:	4b03      	ldr	r3, [pc, #12]	; (8000334 <EXTI3_IRQHandler+0x20>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4798      	blx	r3
}
 800032a:	bf00      	nop
 800032c:	bd80      	pop	{r7, pc}
 800032e:	bf00      	nop
 8000330:	40010400 	.word	0x40010400
 8000334:	20000070 	.word	0x20000070

08000338 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <EXTI4_IRQHandler+0x1c>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <EXTI4_IRQHandler+0x1c>)
 8000342:	f043 0310 	orr.w	r3, r3, #16
 8000346:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI4_IRQHandler+0x20>)
 800034a:	691b      	ldr	r3, [r3, #16]
 800034c:	4798      	blx	r3
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010400 	.word	0x40010400
 8000358:	20000070 	.word	0x20000070

0800035c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000360:	4b26      	ldr	r3, [pc, #152]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f003 0320 	and.w	r3, r3, #32
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI9_5_IRQHandler+0x22>
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a22      	ldr	r2, [pc, #136]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	4b21      	ldr	r3, [pc, #132]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 800037e:	4b1f      	ldr	r3, [pc, #124]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <EXTI9_5_IRQHandler+0x40>
 800038a:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a1b      	ldr	r2, [pc, #108]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 8000390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b1a      	ldr	r3, [pc, #104]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 8000398:	699b      	ldr	r3, [r3, #24]
 800039a:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <EXTI9_5_IRQHandler+0x5e>
 80003a8:	4b14      	ldr	r3, [pc, #80]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a13      	ldr	r2, [pc, #76]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <EXTI9_5_IRQHandler+0x7c>
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a0c      	ldr	r2, [pc, #48]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003d4:	6a1b      	ldr	r3, [r3, #32]
 80003d6:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI9_5_IRQHandler+0x9a>
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a04      	ldr	r2, [pc, #16]	; (80003fc <EXTI9_5_IRQHandler+0xa0>)
 80003ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <EXTI9_5_IRQHandler+0xa4>)
 80003f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003f4:	4798      	blx	r3
}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	40010400 	.word	0x40010400
 8000400:	20000070 	.word	0x20000070

08000404 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 8000408:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000410:	2b00      	cmp	r3, #0
 8000412:	d008      	beq.n	8000426 <EXTI15_10_IRQHandler+0x22>
 8000414:	4b2a      	ldr	r3, [pc, #168]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000416:	695b      	ldr	r3, [r3, #20]
 8000418:	4a29      	ldr	r2, [pc, #164]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800041a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800041e:	6153      	str	r3, [r2, #20]
 8000420:	4b28      	ldr	r3, [pc, #160]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000424:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 8000426:	4b26      	ldr	r3, [pc, #152]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800042e:	2b00      	cmp	r3, #0
 8000430:	d008      	beq.n	8000444 <EXTI15_10_IRQHandler+0x40>
 8000432:	4b23      	ldr	r3, [pc, #140]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	4a22      	ldr	r2, [pc, #136]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000438:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800043c:	6153      	str	r3, [r2, #20]
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 8000440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000442:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 8000444:	4b1e      	ldr	r3, [pc, #120]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000446:	695b      	ldr	r3, [r3, #20]
 8000448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d008      	beq.n	8000462 <EXTI15_10_IRQHandler+0x5e>
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000452:	695b      	ldr	r3, [r3, #20]
 8000454:	4a1a      	ldr	r2, [pc, #104]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000456:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800045a:	6153      	str	r3, [r2, #20]
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800045e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000460:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800046a:	2b00      	cmp	r3, #0
 800046c:	d008      	beq.n	8000480 <EXTI15_10_IRQHandler+0x7c>
 800046e:	4b14      	ldr	r3, [pc, #80]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000470:	695b      	ldr	r3, [r3, #20]
 8000472:	4a13      	ldr	r2, [pc, #76]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000474:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000478:	6153      	str	r3, [r2, #20]
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800047c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800047e:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000482:	695b      	ldr	r3, [r3, #20]
 8000484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000488:	2b00      	cmp	r3, #0
 800048a:	d008      	beq.n	800049e <EXTI15_10_IRQHandler+0x9a>
 800048c:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 800048e:	695b      	ldr	r3, [r3, #20]
 8000490:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 8000492:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000496:	6153      	str	r3, [r2, #20]
 8000498:	4b0a      	ldr	r3, [pc, #40]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 800049a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800049c:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 800049e:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004a0:	695b      	ldr	r3, [r3, #20]
 80004a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d008      	beq.n	80004bc <EXTI15_10_IRQHandler+0xb8>
 80004aa:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004ac:	695b      	ldr	r3, [r3, #20]
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <EXTI15_10_IRQHandler+0xbc>)
 80004b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004b4:	6153      	str	r3, [r2, #20]
 80004b6:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <EXTI15_10_IRQHandler+0xc0>)
 80004b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80004ba:	4798      	blx	r3
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	40010400 	.word	0x40010400
 80004c4:	20000070 	.word	0x20000070

080004c8 <GET_CRLH_Position>:
#include "STM32F103C6_GPIO_driver.h"

static uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80004d2:	88fb      	ldrh	r3, [r7, #6]
 80004d4:	2b80      	cmp	r3, #128	; 0x80
 80004d6:	d042      	beq.n	800055e <GET_CRLH_Position+0x96>
 80004d8:	2b80      	cmp	r3, #128	; 0x80
 80004da:	dc11      	bgt.n	8000500 <GET_CRLH_Position+0x38>
 80004dc:	2b08      	cmp	r3, #8
 80004de:	d036      	beq.n	800054e <GET_CRLH_Position+0x86>
 80004e0:	2b08      	cmp	r3, #8
 80004e2:	dc06      	bgt.n	80004f2 <GET_CRLH_Position+0x2a>
 80004e4:	2b02      	cmp	r3, #2
 80004e6:	d02e      	beq.n	8000546 <GET_CRLH_Position+0x7e>
 80004e8:	2b04      	cmp	r3, #4
 80004ea:	d02e      	beq.n	800054a <GET_CRLH_Position+0x82>
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d028      	beq.n	8000542 <GET_CRLH_Position+0x7a>
 80004f0:	e047      	b.n	8000582 <GET_CRLH_Position+0xba>
 80004f2:	2b20      	cmp	r3, #32
 80004f4:	d02f      	beq.n	8000556 <GET_CRLH_Position+0x8e>
 80004f6:	2b40      	cmp	r3, #64	; 0x40
 80004f8:	d02f      	beq.n	800055a <GET_CRLH_Position+0x92>
 80004fa:	2b10      	cmp	r3, #16
 80004fc:	d029      	beq.n	8000552 <GET_CRLH_Position+0x8a>
 80004fe:	e040      	b.n	8000582 <GET_CRLH_Position+0xba>
 8000500:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000504:	d033      	beq.n	800056e <GET_CRLH_Position+0xa6>
 8000506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800050a:	dc09      	bgt.n	8000520 <GET_CRLH_Position+0x58>
 800050c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000510:	d029      	beq.n	8000566 <GET_CRLH_Position+0x9e>
 8000512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000516:	d028      	beq.n	800056a <GET_CRLH_Position+0xa2>
 8000518:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800051c:	d021      	beq.n	8000562 <GET_CRLH_Position+0x9a>
 800051e:	e030      	b.n	8000582 <GET_CRLH_Position+0xba>
 8000520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000524:	d027      	beq.n	8000576 <GET_CRLH_Position+0xae>
 8000526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800052a:	dc03      	bgt.n	8000534 <GET_CRLH_Position+0x6c>
 800052c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000530:	d01f      	beq.n	8000572 <GET_CRLH_Position+0xaa>
 8000532:	e026      	b.n	8000582 <GET_CRLH_Position+0xba>
 8000534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000538:	d01f      	beq.n	800057a <GET_CRLH_Position+0xb2>
 800053a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800053e:	d01e      	beq.n	800057e <GET_CRLH_Position+0xb6>
 8000540:	e01f      	b.n	8000582 <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 8000542:	2300      	movs	r3, #0
 8000544:	e01e      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 8000546:	2304      	movs	r3, #4
 8000548:	e01c      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 800054a:	2308      	movs	r3, #8
 800054c:	e01a      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 800054e:	230c      	movs	r3, #12
 8000550:	e018      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 8000552:	2310      	movs	r3, #16
 8000554:	e016      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 8000556:	2314      	movs	r3, #20
 8000558:	e014      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 800055a:	2318      	movs	r3, #24
 800055c:	e012      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 800055e:	231c      	movs	r3, #28
 8000560:	e010      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e00e      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e00c      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 800056a:	2308      	movs	r3, #8
 800056c:	e00a      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 800056e:	230c      	movs	r3, #12
 8000570:	e008      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 8000572:	2310      	movs	r3, #16
 8000574:	e006      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 8000576:	2314      	movs	r3, #20
 8000578:	e004      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 800057a:	2318      	movs	r3, #24
 800057c:	e002      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 800057e:	231c      	movs	r3, #28
 8000580:	e000      	b.n	8000584 <GET_CRLH_Position+0xbc>
		break;
	default:
		return 0;
 8000582:	2300      	movs	r3, #0
		break;
	}

}
 8000584:	4618      	mov	r0, r3
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	b086      	sub	sp, #24
 8000592:	af00      	add	r7, sp, #0
 8000594:	6078      	str	r0, [r7, #4]
 8000596:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register;
	config_register =(pinconfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOX->CRL:&GPIOX->CRH;
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	881b      	ldrh	r3, [r3, #0]
 800059c:	2bff      	cmp	r3, #255	; 0xff
 800059e:	d801      	bhi.n	80005a4 <MCAL_GPIO_Init+0x16>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	e001      	b.n	80005a8 <MCAL_GPIO_Init+0x1a>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	3304      	adds	r3, #4
 80005a8:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 80005aa:	2300      	movs	r3, #0
 80005ac:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 80005ae:	683b      	ldr	r3, [r7, #0]
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f7ff ff88 	bl	80004c8 <GET_CRLH_Position>
 80005b8:	4603      	mov	r3, r0
 80005ba:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	7bfa      	ldrb	r2, [r7, #15]
 80005c2:	210f      	movs	r1, #15
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	401a      	ands	r2, r3
 80005cc:	693b      	ldr	r3, [r7, #16]
 80005ce:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	789b      	ldrb	r3, [r3, #2]
 80005d4:	2b07      	cmp	r3, #7
 80005d6:	d00b      	beq.n	80005f0 <MCAL_GPIO_Init+0x62>
 80005d8:	683b      	ldr	r3, [r7, #0]
 80005da:	789b      	ldrb	r3, [r3, #2]
 80005dc:	2b06      	cmp	r3, #6
 80005de:	d007      	beq.n	80005f0 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005e0:	683b      	ldr	r3, [r7, #0]
 80005e2:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80005e4:	2b05      	cmp	r3, #5
 80005e6:	d003      	beq.n	80005f0 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	789b      	ldrb	r3, [r3, #2]
 80005ec:	2b04      	cmp	r3, #4
 80005ee:	d10e      	bne.n	800060e <MCAL_GPIO_Init+0x80>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	789b      	ldrb	r3, [r3, #2]
 80005f4:	3b04      	subs	r3, #4
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	b25a      	sxtb	r2, r3
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	78db      	ldrb	r3, [r3, #3]
 80005fe:	b25b      	sxtb	r3, r3
 8000600:	4313      	orrs	r3, r2
 8000602:	b25b      	sxtb	r3, r3
 8000604:	b2db      	uxtb	r3, r3
 8000606:	f003 030f 	and.w	r3, r3, #15
 800060a:	75fb      	strb	r3, [r7, #23]
 800060c:	e031      	b.n	8000672 <MCAL_GPIO_Init+0xe4>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT)
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	789b      	ldrb	r3, [r3, #2]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d003      	beq.n	800061e <MCAL_GPIO_Init+0x90>
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	789b      	ldrb	r3, [r3, #2]
 800061a:	2b01      	cmp	r3, #1
 800061c:	d107      	bne.n	800062e <MCAL_GPIO_Init+0xa0>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 800061e:	683b      	ldr	r3, [r7, #0]
 8000620:	789b      	ldrb	r3, [r3, #2]
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 030f 	and.w	r3, r3, #15
 800062a:	75fb      	strb	r3, [r7, #23]
 800062c:	e021      	b.n	8000672 <MCAL_GPIO_Init+0xe4>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	789b      	ldrb	r3, [r3, #2]
 8000632:	2b08      	cmp	r3, #8
 8000634:	d107      	bne.n	8000646 <MCAL_GPIO_Init+0xb8>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	789b      	ldrb	r3, [r3, #2]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	b2db      	uxtb	r3, r3
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	75fb      	strb	r3, [r7, #23]
 8000644:	e015      	b.n	8000672 <MCAL_GPIO_Init+0xe4>
		}
		//if pin is PU or PD
		else
		{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 8000646:	2308      	movs	r3, #8
 8000648:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	789b      	ldrb	r3, [r3, #2]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d107      	bne.n	8000662 <MCAL_GPIO_Init+0xd4>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	8812      	ldrh	r2, [r2, #0]
 800065a:	431a      	orrs	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	e007      	b.n	8000672 <MCAL_GPIO_Init+0xe4>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	68db      	ldr	r3, [r3, #12]
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	8812      	ldrh	r2, [r2, #0]
 800066a:	43d2      	mvns	r2, r2
 800066c:	401a      	ands	r2, r3
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 8000672:	693b      	ldr	r3, [r7, #16]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	7df9      	ldrb	r1, [r7, #23]
 8000678:	7bfa      	ldrb	r2, [r7, #15]
 800067a:	fa01 f202 	lsl.w	r2, r1, r2
 800067e:	431a      	orrs	r2, r3
 8000680:	693b      	ldr	r3, [r7, #16]
 8000682:	601a      	str	r2, [r3, #0]

}
 8000684:	bf00      	nop
 8000686:	3718      	adds	r7, #24
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <MCAL_I2C_Init>:
 */

#define I2C1_INDEX    0
#define I2C2_INDEX    1

void MCAL_I2C_Init(I2C_TypeDef *I2Cx ,I2C_config *I2C_cfg ){
 800068c:	b5b0      	push	{r4, r5, r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	6039      	str	r1, [r7, #0]
	uint16_t temp_reg=0, freq_range=0, result = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	82fb      	strh	r3, [r7, #22]
 800069a:	2300      	movs	r3, #0
 800069c:	82bb      	strh	r3, [r7, #20]
 800069e:	2300      	movs	r3, #0
 80006a0:	827b      	strh	r3, [r7, #18]
	uint32_t PCLK1 = 8000000;
 80006a2:	4b75      	ldr	r3, [pc, #468]	; (8000878 <MCAL_I2C_Init+0x1ec>)
 80006a4:	60fb      	str	r3, [r7, #12]

	if(I2Cx == I2C1){
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a74      	ldr	r2, [pc, #464]	; (800087c <MCAL_I2C_Init+0x1f0>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d110      	bne.n	80006d0 <MCAL_I2C_Init+0x44>
		Global_I2C_Config[I2C1_INDEX] = *I2C_cfg;
 80006ae:	4a74      	ldr	r2, [pc, #464]	; (8000880 <MCAL_I2C_Init+0x1f4>)
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	4614      	mov	r4, r2
 80006b4:	461d      	mov	r5, r3
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C1_CLK_EN();
 80006c2:	4b70      	ldr	r3, [pc, #448]	; (8000884 <MCAL_I2C_Init+0x1f8>)
 80006c4:	69db      	ldr	r3, [r3, #28]
 80006c6:	4a6f      	ldr	r2, [pc, #444]	; (8000884 <MCAL_I2C_Init+0x1f8>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80006cc:	61d3      	str	r3, [r2, #28]
 80006ce:	e010      	b.n	80006f2 <MCAL_I2C_Init+0x66>
	}
	else{
		Global_I2C_Config[I2C2_INDEX] = *I2C_cfg;
 80006d0:	4b6b      	ldr	r3, [pc, #428]	; (8000880 <MCAL_I2C_Init+0x1f4>)
 80006d2:	683a      	ldr	r2, [r7, #0]
 80006d4:	f103 0420 	add.w	r4, r3, #32
 80006d8:	4615      	mov	r5, r2
 80006da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		RCC_I2C2_CLK_EN();
 80006e6:	4b67      	ldr	r3, [pc, #412]	; (8000884 <MCAL_I2C_Init+0x1f8>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a66      	ldr	r2, [pc, #408]	; (8000884 <MCAL_I2C_Init+0x1f8>)
 80006ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006f0:	61d3      	str	r3, [r2, #28]
	}

	if(I2C_cfg->I2C_Mode == I2C_MODE_I2C){
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	689b      	ldr	r3, [r3, #8]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d17a      	bne.n	80007f0 <MCAL_I2C_Init+0x164>

		//-------------------------------------Timing init----------------------------------------------------------

		//in CR2 register, FREQ[5:0] bits -> peripheral clock frequency
		temp_reg = I2Cx->CR2;
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	685b      	ldr	r3, [r3, #4]
 80006fe:	82fb      	strh	r3, [r7, #22]

		//clear FREQ[5:0] bits
		temp_reg &= ~(I2C_CR2_FREQ_MASK);
 8000700:	8afb      	ldrh	r3, [r7, #22]
 8000702:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000706:	82fb      	strh	r3, [r7, #22]

		//get pclk1 freq
		PCLK1 = MCAL_RCC_GetPCLK1Freq();
 8000708:	f000 faf8 	bl	8000cfc <MCAL_RCC_GetPCLK1Freq>
 800070c:	60f8      	str	r0, [r7, #12]

		//set FREQ[5:0] bits depending on pclk1 value
		freq_range = (uint16_t)(PCLK1/1000000);
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4a5d      	ldr	r2, [pc, #372]	; (8000888 <MCAL_I2C_Init+0x1fc>)
 8000712:	fba2 2303 	umull	r2, r3, r2, r3
 8000716:	0c9b      	lsrs	r3, r3, #18
 8000718:	82bb      	strh	r3, [r7, #20]
		temp_reg |= freq_range;
 800071a:	8afa      	ldrh	r2, [r7, #22]
 800071c:	8abb      	ldrh	r3, [r7, #20]
 800071e:	4313      	orrs	r3, r2
 8000720:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR2 = temp_reg;
 8000722:	8afa      	ldrh	r2, [r7, #22]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	605a      	str	r2, [r3, #4]

		//======================configure clock control register (CCR)=================================

		//disable selected I2C peripheral to configure time
		I2Cx->CR2 &= ~(I2C_CR1_PE);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	f023 0201 	bic.w	r2, r3, #1
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	605a      	str	r2, [r3, #4]

		temp_reg = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	82fb      	strh	r3, [r7, #22]

		//configure speed in standard mode
		if(I2C_cfg->Clock_Speed == I2C_CLCK_SM_50K || I2C_cfg->Clock_Speed == I2C_CLCK_SM_100K){
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000740:	4293      	cmp	r3, r2
 8000742:	d004      	beq.n	800074e <MCAL_I2C_Init+0xc2>
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a50      	ldr	r2, [pc, #320]	; (800088c <MCAL_I2C_Init+0x200>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d112      	bne.n	8000774 <MCAL_I2C_Init+0xe8>

			//to understand this equation refer to lecture 7 in unit 8
			result = (uint16_t)(PCLK1 / (2 * I2C_cfg->Clock_Speed));
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	fbb2 f3f3 	udiv	r3, r2, r3
 800075a:	827b      	strh	r3, [r7, #18]
			temp_reg |= result;
 800075c:	8afa      	ldrh	r2, [r7, #22]
 800075e:	8a7b      	ldrh	r3, [r7, #18]
 8000760:	4313      	orrs	r3, r2
 8000762:	82fb      	strh	r3, [r7, #22]
			I2Cx->CCR = temp_reg;
 8000764:	8afa      	ldrh	r2, [r7, #22]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	61da      	str	r2, [r3, #28]

			//Configure TRISE
			I2Cx->TRISE = freq_range + 1;  //to understand this equation refer to lecture 7 in unit 8
 800076a:	8abb      	ldrh	r3, [r7, #20]
 800076c:	3301      	adds	r3, #1
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	621a      	str	r2, [r3, #32]
		else{
			//fast mode not supported
		}

		//======================configure CR1 register=================================
		temp_reg = I2Cx->CR1;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	82fb      	strh	r3, [r7, #22]
		temp_reg |= (uint16_t)(I2C_cfg->ACK_Control | I2C_cfg->I2C_Mode | I2C_cfg->Stretch_Mode);
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	699b      	ldr	r3, [r3, #24]
 800077e:	b29a      	uxth	r2, r3
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	b29b      	uxth	r3, r3
 8000786:	4313      	orrs	r3, r2
 8000788:	b29a      	uxth	r2, r3
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	b29b      	uxth	r3, r3
 8000790:	4313      	orrs	r3, r2
 8000792:	b29a      	uxth	r2, r3
 8000794:	8afb      	ldrh	r3, [r7, #22]
 8000796:	4313      	orrs	r3, r2
 8000798:	82fb      	strh	r3, [r7, #22]
		I2Cx->CR1 = temp_reg;
 800079a:	8afa      	ldrh	r2, [r7, #22]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	601a      	str	r2, [r3, #0]


		//======================configure OAR1 and OAR2 register=================================
		temp_reg = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	82fb      	strh	r3, [r7, #22]
		if(I2C_cfg->Slave_Address.Enable_Dual_Add == 1){
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	899b      	ldrh	r3, [r3, #12]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d10d      	bne.n	80007c8 <MCAL_I2C_Init+0x13c>
			temp_reg = I2C_OAR2_ENDUAL;
 80007ac:	2301      	movs	r3, #1
 80007ae:	82fb      	strh	r3, [r7, #22]
			temp_reg |= I2C_cfg->Slave_Address.Secondary_Slave_Add << I2C_OAR2_ADD2_POS;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	8a1b      	ldrh	r3, [r3, #16]
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	b21a      	sxth	r2, r3
 80007b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007bc:	4313      	orrs	r3, r2
 80007be:	b21b      	sxth	r3, r3
 80007c0:	82fb      	strh	r3, [r7, #22]
			I2Cx->OAR2 = temp_reg;
 80007c2:	8afa      	ldrh	r2, [r7, #22]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	60da      	str	r2, [r3, #12]
		}

		temp_reg = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	82fb      	strh	r3, [r7, #22]
		temp_reg |= I2C_cfg->Slave_Address.Primary_Slave_Add << 1;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	89db      	ldrh	r3, [r3, #14]
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	b21a      	sxth	r2, r3
 80007d4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80007d8:	4313      	orrs	r3, r2
 80007da:	b21b      	sxth	r3, r3
 80007dc:	82fb      	strh	r3, [r7, #22]
		temp_reg |= I2C_cfg->Slave_Address.Addressing_Slave_Mode;
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	8afb      	ldrh	r3, [r7, #22]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	82fb      	strh	r3, [r7, #22]
		I2Cx->OAR1 = temp_reg;
 80007ea:	8afa      	ldrh	r2, [r7, #22]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	609a      	str	r2, [r3, #8]
	else{
		//SMBUS not supported
	}

	//Interrupt enable for slave
	if(I2C_cfg->P_IRQ_Callback != NULL){
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d034      	beq.n	8000862 <MCAL_I2C_Init+0x1d6>
		I2Cx->CR2 |= (I2C_CR2_ITERREN);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	685b      	ldr	r3, [r3, #4]
 80007fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITEVTEN);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685b      	ldr	r3, [r3, #4]
 8000808:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	605a      	str	r2, [r3, #4]
		I2Cx->CR2 |= (I2C_CR2_ITBUFEN);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	605a      	str	r2, [r3, #4]

		if(I2Cx==I2C1){
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MCAL_I2C_Init+0x1f0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d10c      	bne.n	800083e <MCAL_I2C_Init+0x1b2>
			NVIC_IRQ31_I2C1_EV_enable();
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MCAL_I2C_Init+0x204>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	; (8000890 <MCAL_I2C_Init+0x204>)
 800082a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800082e:	6013      	str	r3, [r2, #0]
			NVIC_IRQ32_I2C1_ER_enable();
 8000830:	4b18      	ldr	r3, [pc, #96]	; (8000894 <MCAL_I2C_Init+0x208>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a17      	ldr	r2, [pc, #92]	; (8000894 <MCAL_I2C_Init+0x208>)
 8000836:	f043 0301 	orr.w	r3, r3, #1
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	e00b      	b.n	8000856 <MCAL_I2C_Init+0x1ca>
		}
		else{
			NVIC_IRQ33_I2C2_EV_enable();
 800083e:	4b15      	ldr	r3, [pc, #84]	; (8000894 <MCAL_I2C_Init+0x208>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a14      	ldr	r2, [pc, #80]	; (8000894 <MCAL_I2C_Init+0x208>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6013      	str	r3, [r2, #0]
			NVIC_IRQ34_I2C2_ER_enable();
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <MCAL_I2C_Init+0x208>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a11      	ldr	r2, [pc, #68]	; (8000894 <MCAL_I2C_Init+0x208>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	6013      	str	r3, [r2, #0]
		}

		I2Cx->SR1=0;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2200      	movs	r2, #0
 800085a:	615a      	str	r2, [r3, #20]
		I2Cx->SR2=0;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2200      	movs	r2, #0
 8000860:	619a      	str	r2, [r3, #24]
	}

	//enable I2C peripheral
	I2Cx->CR1 |= I2C_CR1_PE;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f043 0201 	orr.w	r2, r3, #1
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	601a      	str	r2, [r3, #0]

}
 800086e:	bf00      	nop
 8000870:	3718      	adds	r7, #24
 8000872:	46bd      	mov	sp, r7
 8000874:	bdb0      	pop	{r4, r5, r7, pc}
 8000876:	bf00      	nop
 8000878:	007a1200 	.word	0x007a1200
 800087c:	40005400 	.word	0x40005400
 8000880:	2000001c 	.word	0x2000001c
 8000884:	40021000 	.word	0x40021000
 8000888:	431bde83 	.word	0x431bde83
 800088c:	000186a0 	.word	0x000186a0
 8000890:	e000e100 	.word	0xe000e100
 8000894:	e000e104 	.word	0xe000e104

08000898 <MCAL_I2C_GPIO_Set_Pins>:
		NVIC_IRQ34_I2C2_ER_disable();
		RCC_I2C2_CLK_RESET();
	}
}

void MCAL_I2C_GPIO_Set_Pins(I2C_TypeDef *I2Cx ){
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t PINCONFIG;
	if(I2Cx == I2C1)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <MCAL_I2C_GPIO_Set_Pins+0x80>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d118      	bne.n	80008da <MCAL_I2C_GPIO_Set_Pins+0x42>
	{
		// PB6 :SCL
		// PB7 :SDA
		PINCONFIG.GPIO_PinNumber =GPIO_PIN6;
 80008a8:	2340      	movs	r3, #64	; 0x40
 80008aa:	81bb      	strh	r3, [r7, #12]
		PINCONFIG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008ac:	2307      	movs	r3, #7
 80008ae:	73bb      	strb	r3, [r7, #14]
		PINCONFIG.GPIO_Output_Speed=GPIO_SPEED_10M ;
 80008b0:	2301      	movs	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCONFIG);
 80008b4:	f107 030c 	add.w	r3, r7, #12
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	; (800091c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80008bc:	f7ff fe67 	bl	800058e <MCAL_GPIO_Init>

		PINCONFIG.GPIO_PinNumber =GPIO_PIN7;
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	81bb      	strh	r3, [r7, #12]
		PINCONFIG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008c4:	2307      	movs	r3, #7
 80008c6:	73bb      	strb	r3, [r7, #14]
		PINCONFIG.GPIO_Output_Speed= GPIO_SPEED_10M;
 80008c8:	2301      	movs	r3, #1
 80008ca:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCONFIG);
 80008cc:	f107 030c 	add.w	r3, r7, #12
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80008d4:	f7ff fe5b 	bl	800058e <MCAL_GPIO_Init>
		PINCONFIG.GPIO_PinNumber =GPIO_PIN11;
		PINCONFIG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
		PINCONFIG.GPIO_Output_Speed= GPIO_SPEED_10M;
		MCAL_GPIO_Init(GPIOB, &PINCONFIG);
	}
}
 80008d8:	e019      	b.n	800090e <MCAL_I2C_GPIO_Set_Pins+0x76>
		PINCONFIG.GPIO_PinNumber =GPIO_PIN10;
 80008da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008de:	81bb      	strh	r3, [r7, #12]
		PINCONFIG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008e0:	2307      	movs	r3, #7
 80008e2:	73bb      	strb	r3, [r7, #14]
		PINCONFIG.GPIO_Output_Speed= GPIO_SPEED_10M;
 80008e4:	2301      	movs	r3, #1
 80008e6:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCONFIG);
 80008e8:	f107 030c 	add.w	r3, r7, #12
 80008ec:	4619      	mov	r1, r3
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 80008f0:	f7ff fe4d 	bl	800058e <MCAL_GPIO_Init>
		PINCONFIG.GPIO_PinNumber =GPIO_PIN11;
 80008f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008f8:	81bb      	strh	r3, [r7, #12]
		PINCONFIG.GPIO_MODE = GPIO_MODE_OUTPUT_AF_OD;
 80008fa:	2307      	movs	r3, #7
 80008fc:	73bb      	strb	r3, [r7, #14]
		PINCONFIG.GPIO_Output_Speed= GPIO_SPEED_10M;
 80008fe:	2301      	movs	r3, #1
 8000900:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &PINCONFIG);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MCAL_I2C_GPIO_Set_Pins+0x84>)
 800090a:	f7ff fe40 	bl	800058e <MCAL_GPIO_Init>
}
 800090e:	bf00      	nop
 8000910:	3710      	adds	r7, #16
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40005400 	.word	0x40005400
 800091c:	40010c00 	.word	0x40010c00

08000920 <MCAL_I2C_MASTER_TX>:



void MCAL_I2C_MASTER_TX(I2C_TypeDef *I2Cx , uint16_t ADDRESS , uint8_t* PTXBUFFER , uint32_t DATALEN , Stop_Condition STOP , Repeated_Start START){
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	60f8      	str	r0, [r7, #12]
 8000928:	607a      	str	r2, [r7, #4]
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	460b      	mov	r3, r1
 800092e:	817b      	strh	r3, [r7, #10]

	int i;

	//1. set the START bit in CR1 register to generate a start condition
	I2C_GENERATE_START(I2Cx,Enable,START);
 8000930:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000934:	461a      	mov	r2, r3
 8000936:	2101      	movs	r1, #1
 8000938:	68f8      	ldr	r0, [r7, #12]
 800093a:	f000 f8bb 	bl	8000ab4 <I2C_GENERATE_START>

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GET_FLAG_STATUS(I2Cx,EV5));
 800093e:	bf00      	nop
 8000940:	2101      	movs	r1, #1
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	f000 f8de 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d0f8      	beq.n	8000940 <MCAL_I2C_MASTER_TX+0x20>

	//3. send address
	I2C_SEND_ADDRESS(I2Cx,ADDRESS,Transmit);
 800094e:	897b      	ldrh	r3, [r7, #10]
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	68f8      	ldr	r0, [r7, #12]
 8000956:	f000 f965 	bl	8000c24 <I2C_SEND_ADDRESS>


	//4. wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GET_FLAG_STATUS(I2Cx,EV6));
 800095a:	bf00      	nop
 800095c:	2102      	movs	r1, #2
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 f8d0 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d0f8      	beq.n	800095c <MCAL_I2C_MASTER_TX+0x3c>

	//5. check for TRA, BUSY, MSL and TXE flags
	while(!I2C_GET_FLAG_STATUS(I2Cx,MASTER_BYTE_TRANSMITTING));
 800096a:	bf00      	nop
 800096c:	4915      	ldr	r1, [pc, #84]	; (80009c4 <MCAL_I2C_MASTER_TX+0xa4>)
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f8c8 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0f8      	beq.n	800096c <MCAL_I2C_MASTER_TX+0x4c>


	//6. send data
	for(i=0; i<DATALEN; i++){
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]
 800097e:	e011      	b.n	80009a4 <MCAL_I2C_MASTER_TX+0x84>

		I2Cx->DR = PTXBUFFER[i];
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	4413      	add	r3, r2
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	611a      	str	r2, [r3, #16]

		//wait for EV8
		//EV8: TxE=1, shift register not empty, d. ata register empty, cleared by writing DR register
		while(!I2C_GET_FLAG_STATUS(I2Cx,EV8));
 800098e:	bf00      	nop
 8000990:	490d      	ldr	r1, [pc, #52]	; (80009c8 <MCAL_I2C_MASTER_TX+0xa8>)
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f000 f8b6 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d0f8      	beq.n	8000990 <MCAL_I2C_MASTER_TX+0x70>
	for(i=0; i<DATALEN; i++){
 800099e:	697b      	ldr	r3, [r7, #20]
 80009a0:	3301      	adds	r3, #1
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	683a      	ldr	r2, [r7, #0]
 80009a8:	429a      	cmp	r2, r3
 80009aa:	d8e9      	bhi.n	8000980 <MCAL_I2C_MASTER_TX+0x60>
	//EV8_2: TxE=1, BTF = 1, Program Stop request. TxE and BTF are cleared by hardware by the Stop condition
	//while(!I2C_GET_FLAG_STATUS(I2Cx,EV8_2));


	//8. send stop condition
	if(STOP == WITH_STOP){
 80009ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d103      	bne.n	80009bc <MCAL_I2C_MASTER_TX+0x9c>
		I2C_GENERATE_STOP(I2Cx,Enable);
 80009b4:	2101      	movs	r1, #1
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f000 f953 	bl	8000c62 <I2C_GENERATE_STOP>
	}
}
 80009bc:	bf00      	nop
 80009be:	3718      	adds	r7, #24
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	00070080 	.word	0x00070080
 80009c8:	00070081 	.word	0x00070081

080009cc <MCAL_I2C_MASTER_RX>:

void MCAL_I2C_MASTER_RX(I2C_TypeDef *I2Cx , uint16_t ADDRESS , uint8_t* PRXBUFFER , uint32_t DATALEN , Stop_Condition STOP , Repeated_Start START){
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	460b      	mov	r3, r1
 80009da:	817b      	strh	r3, [r7, #10]

	int i;
	uint8_t index = (I2Cx == I2C1)?I2C1_INDEX:I2C2_INDEX;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	4a32      	ldr	r2, [pc, #200]	; (8000aa8 <MCAL_I2C_MASTER_RX+0xdc>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	bf14      	ite	ne
 80009e4:	2301      	movne	r3, #1
 80009e6:	2300      	moveq	r3, #0
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	74fb      	strb	r3, [r7, #19]

	//1. set the START bit in CR1 register to generate a start condition
	I2C_GENERATE_START(I2Cx,Enable,START);
 80009ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80009f0:	461a      	mov	r2, r3
 80009f2:	2101      	movs	r1, #1
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f85d 	bl	8000ab4 <I2C_GENERATE_START>

	//2. wait for EV5
	//EV5: SB=1, cleared by reading SR1 register followed by writing DR register with Address.
	while(!I2C_GET_FLAG_STATUS(I2Cx,EV5));
 80009fa:	bf00      	nop
 80009fc:	2101      	movs	r1, #1
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f000 f880 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f8      	beq.n	80009fc <MCAL_I2C_MASTER_RX+0x30>

	//3. send address
	I2C_SEND_ADDRESS(I2Cx,ADDRESS,Receive);
 8000a0a:	897b      	ldrh	r3, [r7, #10]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	4619      	mov	r1, r3
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f000 f907 	bl	8000c24 <I2C_SEND_ADDRESS>


	//4. wait for EV6
	//EV6: ADDR=1, cleared by reading SR1 register followed by reading SR2.
	while(!I2C_GET_FLAG_STATUS(I2Cx,EV6));
 8000a16:	bf00      	nop
 8000a18:	2102      	movs	r1, #2
 8000a1a:	68f8      	ldr	r0, [r7, #12]
 8000a1c:	f000 f872 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0f8      	beq.n	8000a18 <MCAL_I2C_MASTER_RX+0x4c>

	I2Cx->CR1 |=(I2C_CR1_ACK);
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	601a      	str	r2, [r3, #0]

	for( i=0; i<DATALEN; i++ )
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
 8000a36:	e011      	b.n	8000a5c <MCAL_I2C_MASTER_RX+0x90>
	{
		//wait for EV7
		//EV7: RXNE = 1, clear by reading DR register
		while(!(I2C_GET_FLAG_STATUS(I2Cx, EV7)));
 8000a38:	bf00      	nop
 8000a3a:	491c      	ldr	r1, [pc, #112]	; (8000aac <MCAL_I2C_MASTER_RX+0xe0>)
 8000a3c:	68f8      	ldr	r0, [r7, #12]
 8000a3e:	f000 f861 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f8      	beq.n	8000a3a <MCAL_I2C_MASTER_RX+0x6e>

		PRXBUFFER[i]= I2Cx->DR;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	6919      	ldr	r1, [r3, #16]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	687a      	ldr	r2, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	b2ca      	uxtb	r2, r1
 8000a54:	701a      	strb	r2, [r3, #0]
	for( i=0; i<DATALEN; i++ )
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	3301      	adds	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	683a      	ldr	r2, [r7, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8e9      	bhi.n	8000a38 <MCAL_I2C_MASTER_RX+0x6c>
	}


	I2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	601a      	str	r2, [r3, #0]

	if( STOP == WITH_STOP )
 8000a70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d103      	bne.n	8000a80 <MCAL_I2C_MASTER_RX+0xb4>
	{
		I2C_GENERATE_STOP(I2Cx,Enable) ;
 8000a78:	2101      	movs	r1, #1
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f000 f8f1 	bl	8000c62 <I2C_GENERATE_STOP>
	}


	if(Global_I2C_Config[index].ACK_Control == I2C_ACK_ENABLE){
 8000a80:	7cfb      	ldrb	r3, [r7, #19]
 8000a82:	4a0b      	ldr	r2, [pc, #44]	; (8000ab0 <MCAL_I2C_MASTER_RX+0xe4>)
 8000a84:	015b      	lsls	r3, r3, #5
 8000a86:	4413      	add	r3, r2
 8000a88:	3318      	adds	r3, #24
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a90:	d105      	bne.n	8000a9e <MCAL_I2C_MASTER_RX+0xd2>
		//Re enable ACK
		I2Cx->CR1 |=(I2C_CR1_ACK);
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	601a      	str	r2, [r3, #0]
	}

}
 8000a9e:	bf00      	nop
 8000aa0:	3718      	adds	r7, #24
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40005400 	.word	0x40005400
 8000aac:	00070083 	.word	0x00070083
 8000ab0:	2000001c 	.word	0x2000001c

08000ab4 <I2C_GENERATE_START>:

void I2C_GENERATE_START(I2C_TypeDef* I2Cx , FunctionalState NewState, Repeated_Start START){
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	460b      	mov	r3, r1
 8000abe:	70fb      	strb	r3, [r7, #3]
 8000ac0:	4613      	mov	r3, r2
 8000ac2:	70bb      	strb	r3, [r7, #2]

	if(START != REPEATEDSTART){
 8000ac4:	78bb      	ldrb	r3, [r7, #2]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d007      	beq.n	8000ada <I2C_GENERATE_START+0x26>
		while( I2C_GET_FLAG_STATUS(I2Cx, I2C_BUSY));
 8000aca:	bf00      	nop
 8000acc:	2100      	movs	r1, #0
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f818 	bl	8000b04 <I2C_GET_FLAG_STATUS>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d1f8      	bne.n	8000acc <I2C_GENERATE_START+0x18>
	}

	if(NewState == Enable){
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d106      	bne.n	8000aee <I2C_GENERATE_START+0x3a>
		I2Cx->CR1 |=I2C_CR1_START;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->CR1 &= ~(I2C_CR1_START);
	}

}
 8000aec:	e005      	b.n	8000afa <I2C_GENERATE_START+0x46>
		I2Cx->CR1 &= ~(I2C_CR1_START);
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	601a      	str	r2, [r3, #0]
}
 8000afa:	bf00      	nop
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <I2C_GET_FLAG_STATUS>:


Flag_Status I2C_GET_FLAG_STATUS( I2C_TypeDef *I2Cx , Status FLAG ){
 8000b04:	b480      	push	{r7}
 8000b06:	b089      	sub	sp, #36	; 0x24
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]

	Flag_Status F_state ;
	volatile uint32_t dummyread;
	uint32_t flag1 = 0, flag2 = 0, lastevent;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	2300      	movs	r3, #0
 8000b14:	617b      	str	r3, [r7, #20]

	switch( FLAG )
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	4a3f      	ldr	r2, [pc, #252]	; (8000c18 <I2C_GET_FLAG_STATUS+0x114>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d037      	beq.n	8000b8e <I2C_GET_FLAG_STATUS+0x8a>
 8000b1e:	4a3e      	ldr	r2, [pc, #248]	; (8000c18 <I2C_GET_FLAG_STATUS+0x114>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d806      	bhi.n	8000b32 <I2C_GET_FLAG_STATUS+0x2e>
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d01a      	beq.n	8000b5e <I2C_GET_FLAG_STATUS+0x5a>
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	d30c      	bcc.n	8000b46 <I2C_GET_FLAG_STATUS+0x42>
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d022      	beq.n	8000b76 <I2C_GET_FLAG_STATUS+0x72>
 8000b30:	e06c      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
 8000b32:	4a3a      	ldr	r2, [pc, #232]	; (8000c1c <I2C_GET_FLAG_STATUS+0x118>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d051      	beq.n	8000bdc <I2C_GET_FLAG_STATUS+0xd8>
 8000b38:	4a38      	ldr	r2, [pc, #224]	; (8000c1c <I2C_GET_FLAG_STATUS+0x118>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d342      	bcc.n	8000bc4 <I2C_GET_FLAG_STATUS+0xc0>
 8000b3e:	4a38      	ldr	r2, [pc, #224]	; (8000c20 <I2C_GET_FLAG_STATUS+0x11c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d057      	beq.n	8000bf4 <I2C_GET_FLAG_STATUS+0xf0>
 8000b44:	e062      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
	{
	case I2C_BUSY :
		if (I2Cx->SR2 & I2C_SR2_BUSY)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d002      	beq.n	8000b58 <I2C_GET_FLAG_STATUS+0x54>
			F_state=SET ;
 8000b52:	2301      	movs	r3, #1
 8000b54:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;
		break;
 8000b56:	e059      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state=RESET ;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	77fb      	strb	r3, [r7, #31]
		break;
 8000b5c:	e056      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>

	case EV5 :
		if (I2Cx->SR1 & I2C_SR1_SB)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	695b      	ldr	r3, [r3, #20]
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d002      	beq.n	8000b70 <I2C_GET_FLAG_STATUS+0x6c>
			F_state=SET ;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;
		break;
 8000b6e:	e04d      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state=RESET ;
 8000b70:	2300      	movs	r3, #0
 8000b72:	77fb      	strb	r3, [r7, #31]
		break;
 8000b74:	e04a      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>

	case EV6 :
		if (I2Cx->SR1 & I2C_SR1_ADDR)
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d002      	beq.n	8000b88 <I2C_GET_FLAG_STATUS+0x84>
			F_state=SET ;
 8000b82:	2301      	movs	r3, #1
 8000b84:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;


		break;
 8000b86:	e041      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state=RESET ;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	77fb      	strb	r3, [r7, #31]
		break;
 8000b8c:	e03e      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>

	case MASTER_BYTE_TRANSMITTING :
		flag1 = I2Cx->SR1;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	695b      	ldr	r3, [r3, #20]
 8000b92:	61bb      	str	r3, [r7, #24]
		flag2 = I2Cx->SR2;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	617b      	str	r3, [r7, #20]
		flag2 = flag2 << 16;
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	617b      	str	r3, [r7, #20]

		lastevent = (flag1 | flag2) & ((uint32_t)0x00FFFFFF);
 8000ba0:	69ba      	ldr	r2, [r7, #24]
 8000ba2:	697b      	ldr	r3, [r7, #20]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000baa:	613b      	str	r3, [r7, #16]

		if((lastevent & FLAG) == FLAG){
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	683a      	ldr	r2, [r7, #0]
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d102      	bne.n	8000bbe <I2C_GET_FLAG_STATUS+0xba>
			F_state = SET;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	77fb      	strb	r3, [r7, #31]
		}
		else{
			F_state = RESET;
		}
		break;
 8000bbc:	e026      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state = RESET;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	77fb      	strb	r3, [r7, #31]
		break;
 8000bc2:	e023      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>

	case EV8 :
		if (I2Cx->SR1 & I2C_SR1_TXE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	695b      	ldr	r3, [r3, #20]
 8000bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d002      	beq.n	8000bd6 <I2C_GET_FLAG_STATUS+0xd2>
			F_state=SET ;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;
		break;
 8000bd4:	e01a      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state=RESET ;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	77fb      	strb	r3, [r7, #31]
		break;
 8000bda:	e017      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
	case EV8_2 :
		if (I2Cx->SR1 & I2C_SR1_BTF)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	695b      	ldr	r3, [r3, #20]
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <I2C_GET_FLAG_STATUS+0xea>
			F_state=SET ;
 8000be8:	2301      	movs	r3, #1
 8000bea:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;
		break;
 8000bec:	e00e      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>
			F_state=RESET ;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	77fb      	strb	r3, [r7, #31]
		break;
 8000bf2:	e00b      	b.n	8000c0c <I2C_GET_FLAG_STATUS+0x108>

	case EV7 :
		if (I2Cx->SR1 & I2C_SR1_RXNE)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	695b      	ldr	r3, [r3, #20]
 8000bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d002      	beq.n	8000c06 <I2C_GET_FLAG_STATUS+0x102>
			F_state=SET ;
 8000c00:	2301      	movs	r3, #1
 8000c02:	77fb      	strb	r3, [r7, #31]
		else
			F_state=RESET ;
		break;
 8000c04:	e001      	b.n	8000c0a <I2C_GET_FLAG_STATUS+0x106>
			F_state=RESET ;
 8000c06:	2300      	movs	r3, #0
 8000c08:	77fb      	strb	r3, [r7, #31]
		break;
 8000c0a:	bf00      	nop

	}
	return F_state ;
 8000c0c:	7ffb      	ldrb	r3, [r7, #31]


}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3724      	adds	r7, #36	; 0x24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr
 8000c18:	00070080 	.word	0x00070080
 8000c1c:	00070082 	.word	0x00070082
 8000c20:	00070083 	.word	0x00070083

08000c24 <I2C_SEND_ADDRESS>:


void I2C_SEND_ADDRESS(I2C_TypeDef* I2Cx, uint16_t ADDRESS , I2C_Direction DIRECTION){
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	807b      	strh	r3, [r7, #2]
 8000c30:	4613      	mov	r3, r2
 8000c32:	707b      	strb	r3, [r7, #1]

	ADDRESS = ADDRESS << 1;
 8000c34:	887b      	ldrh	r3, [r7, #2]
 8000c36:	005b      	lsls	r3, r3, #1
 8000c38:	807b      	strh	r3, [r7, #2]

	if(DIRECTION != Transmit){
 8000c3a:	787b      	ldrb	r3, [r7, #1]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d004      	beq.n	8000c4a <I2C_SEND_ADDRESS+0x26>
		//set bit 0 to read
		ADDRESS |= 1<<0;
 8000c40:	887b      	ldrh	r3, [r7, #2]
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	807b      	strh	r3, [r7, #2]
 8000c48:	e003      	b.n	8000c52 <I2C_SEND_ADDRESS+0x2e>
	}
	else{
		ADDRESS &= ~(1<<0);
 8000c4a:	887b      	ldrh	r3, [r7, #2]
 8000c4c:	f023 0301 	bic.w	r3, r3, #1
 8000c50:	807b      	strh	r3, [r7, #2]
	}

	I2Cx->DR = ADDRESS;
 8000c52:	887a      	ldrh	r2, [r7, #2]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	611a      	str	r2, [r3, #16]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bc80      	pop	{r7}
 8000c60:	4770      	bx	lr

08000c62 <I2C_GENERATE_STOP>:

void I2C_GENERATE_STOP(I2C_TypeDef* I2Cx ,FunctionalState NewState){
 8000c62:	b480      	push	{r7}
 8000c64:	b083      	sub	sp, #12
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	6078      	str	r0, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	70fb      	strb	r3, [r7, #3]

	if(NewState == Enable){
 8000c6e:	78fb      	ldrb	r3, [r7, #3]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d106      	bne.n	8000c82 <I2C_GENERATE_STOP+0x20>
		I2Cx->CR1 |= I2C_CR1_STOP;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	601a      	str	r2, [r3, #0]
	}
	else{
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
	}
}
 8000c80:	e005      	b.n	8000c8e <I2C_GENERATE_STOP+0x2c>
		I2Cx->CR1 &= ~(I2C_CR1_STOP);
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	601a      	str	r2, [r3, #0]
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <MCAL_RCC_GetSYSCLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

const uint8_t AHB_Prescaler_Table[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch ((RCC->CFGR >> 2)&0b11){
 8000c9c:	4b0a      	ldr	r3, [pc, #40]	; (8000cc8 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	f003 0303 	and.w	r3, r3, #3
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d006      	beq.n	8000cb8 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000caa:	2b01      	cmp	r3, #1
 8000cac:	d302      	bcc.n	8000cb4 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d004      	beq.n	8000cbc <MCAL_RCC_GetSYSCLKFreq+0x24>
 8000cb2:	e005      	b.n	8000cc0 <MCAL_RCC_GetSYSCLKFreq+0x28>

	case 0:
		return HSI_CLK;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000cb6:	e003      	b.n	8000cc0 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		//todo need to calculate it (user should specify it)
		return HSE_CLK;
 8000cb8:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000cba:	e001      	b.n	8000cc0 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		//todo need to calculate it
		return 16000000;
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000cbe:	e7ff      	b.n	8000cc0 <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	}
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40021000 	.word	0x40021000
 8000ccc:	007a1200 	.word	0x007a1200
 8000cd0:	00f42400 	.word	0x00f42400

08000cd4 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_Prescaler_Table[(RCC->CFGR >> 4)&0b111]);
 8000cd8:	f7ff ffde 	bl	8000c98 <MCAL_RCC_GetSYSCLKFreq>
 8000cdc:	4601      	mov	r1, r0
 8000cde:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <MCAL_RCC_GetHCLKFreq+0x20>)
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	091b      	lsrs	r3, r3, #4
 8000ce4:	f003 0307 	and.w	r3, r3, #7
 8000ce8:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <MCAL_RCC_GetHCLKFreq+0x24>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	08000f7c 	.word	0x08000f7c

08000cfc <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 8)&0xF]);
 8000d00:	f7ff ffe8 	bl	8000cd4 <MCAL_RCC_GetHCLKFreq>
 8000d04:	4601      	mov	r1, r0
 8000d06:	4b05      	ldr	r3, [pc, #20]	; (8000d1c <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	0a1b      	lsrs	r3, r3, #8
 8000d0c:	f003 030f 	and.w	r3, r3, #15
 8000d10:	4a03      	ldr	r2, [pc, #12]	; (8000d20 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000d12:	5cd3      	ldrb	r3, [r2, r3]
 8000d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	08000f74 	.word	0x08000f74

08000d24 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SR  & (1<<1)) >> 1 ) ;
 8000d2a:	4b13      	ldr	r3, [pc, #76]	; (8000d78 <SPI1_IRQHandler+0x54>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	f003 0301 	and.w	r3, r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	793b      	ldrb	r3, [r7, #4]
 8000d38:	f362 0300 	bfi	r3, r2, #0, #1
 8000d3c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SR  & (1<<0)) >> 0 ) ;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <SPI1_IRQHandler+0x54>)
 8000d40:	689b      	ldr	r3, [r3, #8]
 8000d42:	f003 0301 	and.w	r3, r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	793b      	ldrb	r3, [r7, #4]
 8000d4a:	f362 0341 	bfi	r3, r2, #1, #1
 8000d4e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SR  & (1<<4)) >> 4 ) ;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <SPI1_IRQHandler+0x54>)
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	091b      	lsrs	r3, r3, #4
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	793b      	ldrb	r3, [r7, #4]
 8000d5e:	f362 0382 	bfi	r3, r2, #2, #1
 8000d62:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_Callback(irq_src);
 8000d64:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <SPI1_IRQHandler+0x58>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	695b      	ldr	r3, [r3, #20]
 8000d6a:	7938      	ldrb	r0, [r7, #4]
 8000d6c:	4798      	blx	r3
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40013000 	.word	0x40013000
 8000d7c:	2000005c 	.word	0x2000005c

08000d80 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SR  & (1<<1)) >> 1 ) ;
 8000d86:	4b13      	ldr	r3, [pc, #76]	; (8000dd4 <SPI2_IRQHandler+0x54>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	793b      	ldrb	r3, [r7, #4]
 8000d94:	f362 0300 	bfi	r3, r2, #0, #1
 8000d98:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SR  & (1<<0)) >> 0 ) ;
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <SPI2_IRQHandler+0x54>)
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	b2da      	uxtb	r2, r3
 8000da4:	793b      	ldrb	r3, [r7, #4]
 8000da6:	f362 0341 	bfi	r3, r2, #1, #1
 8000daa:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SR  & (1<<4)) >> 4 ) ;
 8000dac:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <SPI2_IRQHandler+0x54>)
 8000dae:	689b      	ldr	r3, [r3, #8]
 8000db0:	091b      	lsrs	r3, r3, #4
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	793b      	ldrb	r3, [r7, #4]
 8000dba:	f362 0382 	bfi	r3, r2, #2, #1
 8000dbe:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_Callback(irq_src);
 8000dc0:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <SPI2_IRQHandler+0x58>)
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	7938      	ldrb	r0, [r7, #4]
 8000dc8:	4798      	blx	r3
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40013000 	.word	0x40013000
 8000dd8:	2000005c 	.word	0x2000005c

08000ddc <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_Callback();
 8000de0:	4b02      	ldr	r3, [pc, #8]	; (8000dec <USART1_IRQHandler+0x10>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	691b      	ldr	r3, [r3, #16]
 8000de6:	4798      	blx	r3

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	20000064 	.word	0x20000064

08000df0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_Callback();
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	4798      	blx	r3

}
 8000dfc:	bf00      	nop
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000064 	.word	0x20000064

08000e04 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_Callback();
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <USART3_IRQHandler+0x10>)
 8000e0a:	689b      	ldr	r3, [r3, #8]
 8000e0c:	691b      	ldr	r3, [r3, #16]
 8000e0e:	4798      	blx	r3

}
 8000e10:	bf00      	nop
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000064 	.word	0x20000064

08000e18 <main>:
#include "STM32F103C6_I2C_driver.h"
#include "I2C_Slave_EEPROM.h"


int main(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <main+0x98>)
 8000e20:	699b      	ldr	r3, [r3, #24]
 8000e22:	4a23      	ldr	r2, [pc, #140]	; (8000eb0 <main+0x98>)
 8000e24:	f043 0304 	orr.w	r3, r3, #4
 8000e28:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000e2a:	4b21      	ldr	r3, [pc, #132]	; (8000eb0 <main+0x98>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a20      	ldr	r2, [pc, #128]	; (8000eb0 <main+0x98>)
 8000e30:	f043 0308 	orr.w	r3, r3, #8
 8000e34:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000e36:	4b1e      	ldr	r3, [pc, #120]	; (8000eb0 <main+0x98>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	4a1d      	ldr	r2, [pc, #116]	; (8000eb0 <main+0x98>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6193      	str	r3, [r2, #24]


	//Test case 1
	uint8_t DATA1[] = {0x1,0x2,0x3,0x4,0x5,0x6,0x7};
 8000e42:	4a1c      	ldr	r2, [pc, #112]	; (8000eb4 <main+0x9c>)
 8000e44:	f107 0308 	add.w	r3, r7, #8
 8000e48:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e4c:	6018      	str	r0, [r3, #0]
 8000e4e:	3304      	adds	r3, #4
 8000e50:	8019      	strh	r1, [r3, #0]
 8000e52:	3302      	adds	r3, #2
 8000e54:	0c0a      	lsrs	r2, r1, #16
 8000e56:	701a      	strb	r2, [r3, #0]
	uint8_t DATA2[7]= {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	f8c3 2003 	str.w	r2, [r3, #3]

	EEPROM_INIT();
 8000e62:	f7ff f985 	bl	8000170 <EEPROM_INIT>
	EEPROM_WRITE_DATA(0xAF, DATA1, 7);
 8000e66:	f107 0308 	add.w	r3, r7, #8
 8000e6a:	2207      	movs	r2, #7
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	20af      	movs	r0, #175	; 0xaf
 8000e70:	f7ff f99c 	bl	80001ac <EEPROM_WRITE_DATA>
	EEPROM_READ_DATA(0xAF, DATA2, 7);
 8000e74:	463b      	mov	r3, r7
 8000e76:	2207      	movs	r2, #7
 8000e78:	4619      	mov	r1, r3
 8000e7a:	20af      	movs	r0, #175	; 0xaf
 8000e7c:	f7ff f9e8 	bl	8000250 <EEPROM_READ_DATA>

	//Test case 2
	DATA1[0] = 0xA;
 8000e80:	230a      	movs	r3, #10
 8000e82:	723b      	strb	r3, [r7, #8]
	DATA1[1] = 0xB;
 8000e84:	230b      	movs	r3, #11
 8000e86:	727b      	strb	r3, [r7, #9]
	DATA1[2] = 0xC;
 8000e88:	230c      	movs	r3, #12
 8000e8a:	72bb      	strb	r3, [r7, #10]
	DATA1[3] = 0xD;
 8000e8c:	230d      	movs	r3, #13
 8000e8e:	72fb      	strb	r3, [r7, #11]

	EEPROM_WRITE_DATA(0xFFF, DATA1, 4);
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	2204      	movs	r2, #4
 8000e96:	4619      	mov	r1, r3
 8000e98:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000e9c:	f7ff f986 	bl	80001ac <EEPROM_WRITE_DATA>
	EEPROM_READ_DATA(0xFFF, DATA2, 4);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000eaa:	f7ff f9d1 	bl	8000250 <EEPROM_READ_DATA>

	while(1){
 8000eae:	e7fe      	b.n	8000eae <main+0x96>
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	08000f6c 	.word	0x08000f6c

08000eb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb8:	480d      	ldr	r0, [pc, #52]	; (8000ef0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eba:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ebc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec2:	490d      	ldr	r1, [pc, #52]	; (8000ef8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec4:	4a0d      	ldr	r2, [pc, #52]	; (8000efc <LoopForever+0xe>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed8:	4c0a      	ldr	r4, [pc, #40]	; (8000f04 <LoopForever+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000ee6:	f000 f811 	bl	8000f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eea:	f7ff ff95 	bl	8000e18 <main>

08000eee <LoopForever>:

LoopForever:
    b LoopForever
 8000eee:	e7fe      	b.n	8000eee <LoopForever>
  ldr   r0, =_estack
 8000ef0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000efc:	08000f94 	.word	0x08000f94
  ldr r2, =_sbss
 8000f00:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f04:	200000ac 	.word	0x200000ac

08000f08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC1_2_IRQHandler>
	...

08000f0c <__libc_init_array>:
 8000f0c:	b570      	push	{r4, r5, r6, lr}
 8000f0e:	2500      	movs	r5, #0
 8000f10:	4e0c      	ldr	r6, [pc, #48]	; (8000f44 <__libc_init_array+0x38>)
 8000f12:	4c0d      	ldr	r4, [pc, #52]	; (8000f48 <__libc_init_array+0x3c>)
 8000f14:	1ba4      	subs	r4, r4, r6
 8000f16:	10a4      	asrs	r4, r4, #2
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	d109      	bne.n	8000f30 <__libc_init_array+0x24>
 8000f1c:	f000 f81a 	bl	8000f54 <_init>
 8000f20:	2500      	movs	r5, #0
 8000f22:	4e0a      	ldr	r6, [pc, #40]	; (8000f4c <__libc_init_array+0x40>)
 8000f24:	4c0a      	ldr	r4, [pc, #40]	; (8000f50 <__libc_init_array+0x44>)
 8000f26:	1ba4      	subs	r4, r4, r6
 8000f28:	10a4      	asrs	r4, r4, #2
 8000f2a:	42a5      	cmp	r5, r4
 8000f2c:	d105      	bne.n	8000f3a <__libc_init_array+0x2e>
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f34:	4798      	blx	r3
 8000f36:	3501      	adds	r5, #1
 8000f38:	e7ee      	b.n	8000f18 <__libc_init_array+0xc>
 8000f3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f3e:	4798      	blx	r3
 8000f40:	3501      	adds	r5, #1
 8000f42:	e7f2      	b.n	8000f2a <__libc_init_array+0x1e>
 8000f44:	08000f8c 	.word	0x08000f8c
 8000f48:	08000f8c 	.word	0x08000f8c
 8000f4c:	08000f8c 	.word	0x08000f8c
 8000f50:	08000f90 	.word	0x08000f90

08000f54 <_init>:
 8000f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f56:	bf00      	nop
 8000f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f5a:	bc08      	pop	{r3}
 8000f5c:	469e      	mov	lr, r3
 8000f5e:	4770      	bx	lr

08000f60 <_fini>:
 8000f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f62:	bf00      	nop
 8000f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f66:	bc08      	pop	{r3}
 8000f68:	469e      	mov	lr, r3
 8000f6a:	4770      	bx	lr

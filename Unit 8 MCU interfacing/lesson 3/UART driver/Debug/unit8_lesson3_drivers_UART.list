
unit8_lesson3_drivers_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009f4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000b24  08000b24  00010b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  4 .ARM          00000000  08000b3c  08000b3c  00010b44  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b3c  08000b44  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b3c  08000b3c  00010b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b40  08000b40  00010b40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000b44  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000b44  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010b44  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000407f  00000000  00000000  00010b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a14  00000000  00000000  00014bec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a9c  00000000  00000000  00015600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  000160a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016270  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000af3  00000000  00000000  000163e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020e5  00000000  00000000  00016edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a052  00000000  00000000  00018fc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00023012  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000598  00000000  00000000  00023090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000b0c 	.word	0x08000b0c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000b0c 	.word	0x08000b0c

08000170 <EXTI0_IRQHandler>:

//================== ISR Functions==========================================


void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000028 	.word	0x20000028

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000028 	.word	0x20000028

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000028 	.word	0x20000028

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000028 	.word	0x20000028

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000028 	.word	0x20000028

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000028 	.word	0x20000028

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000028 	.word	0x20000028

08000390 <GET_CRLH_Position>:
#include "STM32F103C6_GPIO_driver.h"

static uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <GET_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <GET_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <GET_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <GET_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <GET_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <GET_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <GET_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <GET_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <GET_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <GET_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <GET_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <GET_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <GET_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <GET_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <GET_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <GET_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <GET_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <GET_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <GET_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <GET_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <GET_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <GET_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <GET_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <GET_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	default:
		return 0;
 800044a:	2300      	movs	r3, #0
		break;
	}

}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register;
	config_register =(pinconfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOX->CRL:&GPIOX->CRH;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d801      	bhi.n	800046c <MCAL_GPIO_Init+0x16>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	e001      	b.n	8000470 <MCAL_GPIO_Init+0x1a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3304      	adds	r3, #4
 8000470:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff88 	bl	8000390 <GET_CRLH_Position>
 8000480:	4603      	mov	r3, r0
 8000482:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	7bfa      	ldrb	r2, [r7, #15]
 800048a:	210f      	movs	r1, #15
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_Init+0x80>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	75fb      	strb	r3, [r7, #23]
 80004d4:	e031      	b.n	800053a <MCAL_GPIO_Init+0xe4>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	75fb      	strb	r3, [r7, #23]
 80004f4:	e021      	b.n	800053a <MCAL_GPIO_Init+0xe4>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d107      	bne.n	800050e <MCAL_GPIO_Init+0xb8>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	75fb      	strb	r3, [r7, #23]
 800050c:	e015      	b.n	800053a <MCAL_GPIO_Init+0xe4>
		}
		//if pin is PU or PD
		else
		{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 800050e:	2308      	movs	r3, #8
 8000510:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d107      	bne.n	800052a <MCAL_GPIO_Init+0xd4>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	683a      	ldr	r2, [r7, #0]
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	e007      	b.n	800053a <MCAL_GPIO_Init+0xe4>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	7df9      	ldrb	r1, [r7, #23]
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	601a      	str	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <MCAL_RCC_GetSYSCLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

const uint8_t AHB_Prescaler_Table[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch ((RCC->CFGR >> 2)&0b11){
 8000558:	4b0a      	ldr	r3, [pc, #40]	; (8000584 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	089b      	lsrs	r3, r3, #2
 800055e:	f003 0303 	and.w	r3, r3, #3
 8000562:	2b01      	cmp	r3, #1
 8000564:	d006      	beq.n	8000574 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000566:	2b01      	cmp	r3, #1
 8000568:	d302      	bcc.n	8000570 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 800056a:	2b02      	cmp	r3, #2
 800056c:	d004      	beq.n	8000578 <MCAL_RCC_GetSYSCLKFreq+0x24>
 800056e:	e005      	b.n	800057c <MCAL_RCC_GetSYSCLKFreq+0x28>

	case 0:
		return HSI_CLK;
 8000570:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 8000572:	e003      	b.n	800057c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		//todo need to calculate it (user should specify it)
		return HSE_CLK;
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 8000576:	e001      	b.n	800057c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		//todo need to calculate it
		return 16000000;
 8000578:	4b04      	ldr	r3, [pc, #16]	; (800058c <MCAL_RCC_GetSYSCLKFreq+0x38>)
 800057a:	e7ff      	b.n	800057c <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	}
}
 800057c:	4618      	mov	r0, r3
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	40021000 	.word	0x40021000
 8000588:	007a1200 	.word	0x007a1200
 800058c:	00f42400 	.word	0x00f42400

08000590 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_Prescaler_Table[(RCC->CFGR >> 4)&0b111]);
 8000594:	f7ff ffde 	bl	8000554 <MCAL_RCC_GetSYSCLKFreq>
 8000598:	4601      	mov	r1, r0
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <MCAL_RCC_GetHCLKFreq+0x20>)
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	091b      	lsrs	r3, r3, #4
 80005a0:	f003 0307 	and.w	r3, r3, #7
 80005a4:	4a03      	ldr	r2, [pc, #12]	; (80005b4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005a6:	5cd3      	ldrb	r3, [r2, r3]
 80005a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	40021000 	.word	0x40021000
 80005b4:	08000b2c 	.word	0x08000b2c

080005b8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 8)&0xF]);
 80005bc:	f7ff ffe8 	bl	8000590 <MCAL_RCC_GetHCLKFreq>
 80005c0:	4601      	mov	r1, r0
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005c4:	685b      	ldr	r3, [r3, #4]
 80005c6:	0a1b      	lsrs	r3, r3, #8
 80005c8:	f003 030f 	and.w	r3, r3, #15
 80005cc:	4a03      	ldr	r2, [pc, #12]	; (80005dc <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005ce:	5cd3      	ldrb	r3, [r2, r3]
 80005d0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	08000b24 	.word	0x08000b24

080005e0 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 11)&0b111]);
 80005e4:	f7ff ffd4 	bl	8000590 <MCAL_RCC_GetHCLKFreq>
 80005e8:	4601      	mov	r1, r0
 80005ea:	4b05      	ldr	r3, [pc, #20]	; (8000600 <MCAL_RCC_GetPCLK2Freq+0x20>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	0adb      	lsrs	r3, r3, #11
 80005f0:	f003 0307 	and.w	r3, r3, #7
 80005f4:	4a03      	ldr	r2, [pc, #12]	; (8000604 <MCAL_RCC_GetPCLK2Freq+0x24>)
 80005f6:	5cd3      	ldrb	r3, [r2, r3]
 80005f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	08000b24 	.word	0x08000b24

08000608 <MCAL_USART_Init>:
 * @brief                -initialize the USARTX pin  to a specified parameters
 * @param [in]           -USARTX where x can be (USARTX1 USARTX2 USART3)
 * @retval               - null
 * Note                  -null
 */
void MCAL_USART_Init(USART_TypeDef* USARTx, USART_config* USART_cfg){
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]


	uint32_t pclk, BRR;

	//enable clock for corresponding instance
	if(USARTx == USART1){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	4a55      	ldr	r2, [pc, #340]	; (800076c <MCAL_USART_Init+0x164>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d109      	bne.n	800062e <MCAL_USART_Init+0x26>
		Global_USART_Config[0] = USART_cfg;
 800061a:	4a55      	ldr	r2, [pc, #340]	; (8000770 <MCAL_USART_Init+0x168>)
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000620:	4b54      	ldr	r3, [pc, #336]	; (8000774 <MCAL_USART_Init+0x16c>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a53      	ldr	r2, [pc, #332]	; (8000774 <MCAL_USART_Init+0x16c>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	e016      	b.n	800065c <MCAL_USART_Init+0x54>
	}
	else if(USARTx == USART2){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a51      	ldr	r2, [pc, #324]	; (8000778 <MCAL_USART_Init+0x170>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d109      	bne.n	800064a <MCAL_USART_Init+0x42>
		Global_USART_Config[1] = USART_cfg;
 8000636:	4a4e      	ldr	r2, [pc, #312]	; (8000770 <MCAL_USART_Init+0x168>)
 8000638:	683b      	ldr	r3, [r7, #0]
 800063a:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 800063c:	4b4d      	ldr	r3, [pc, #308]	; (8000774 <MCAL_USART_Init+0x16c>)
 800063e:	69db      	ldr	r3, [r3, #28]
 8000640:	4a4c      	ldr	r2, [pc, #304]	; (8000774 <MCAL_USART_Init+0x16c>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	61d3      	str	r3, [r2, #28]
 8000648:	e008      	b.n	800065c <MCAL_USART_Init+0x54>
	}
	else{
		Global_USART_Config[2] = USART_cfg;
 800064a:	4a49      	ldr	r2, [pc, #292]	; (8000770 <MCAL_USART_Init+0x168>)
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000650:	4b48      	ldr	r3, [pc, #288]	; (8000774 <MCAL_USART_Init+0x16c>)
 8000652:	69db      	ldr	r3, [r3, #28]
 8000654:	4a47      	ldr	r2, [pc, #284]	; (8000774 <MCAL_USART_Init+0x16c>)
 8000656:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800065a:	61d3      	str	r3, [r2, #28]
	}

	//enable USART module
	USARTx->CR1 |= 1<<13;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	68db      	ldr	r3, [r3, #12]
 8000660:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	60da      	str	r2, [r3, #12]

	//-----------all of the following configs corresponding bits in the registers are already done in the reference macros---------

	//enable TX/RX according to config
	USARTx->CR1 |= USART_cfg->USART_MODE;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	683a      	ldr	r2, [r7, #0]
 800066e:	7812      	ldrb	r2, [r2, #0]
 8000670:	431a      	orrs	r2, r3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60da      	str	r2, [r3, #12]

	//payload length
	USARTx->CR1 |= USART_cfg->Payload_length;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	68db      	ldr	r3, [r3, #12]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	7a12      	ldrb	r2, [r2, #8]
 800067e:	431a      	orrs	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	60da      	str	r2, [r3, #12]

	//parity bits
	USARTx->CR1 |= USART_cfg->Parity;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	683a      	ldr	r2, [r7, #0]
 800068a:	7a52      	ldrb	r2, [r2, #9]
 800068c:	431a      	orrs	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60da      	str	r2, [r3, #12]

	//stop bits
	USARTx->CR2 |= USART_cfg->Stop_bits;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	691b      	ldr	r3, [r3, #16]
 8000696:	683a      	ldr	r2, [r7, #0]
 8000698:	7a92      	ldrb	r2, [r2, #10]
 800069a:	431a      	orrs	r2, r3
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	611a      	str	r2, [r3, #16]

	//control flow
	USARTx->CR3 |= USART_cfg->HW_Flow_Control;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	695b      	ldr	r3, [r3, #20]
 80006a4:	683a      	ldr	r2, [r7, #0]
 80006a6:	7ad2      	ldrb	r2, [r2, #11]
 80006a8:	431a      	orrs	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	615a      	str	r2, [r3, #20]

	//------------------------------------Baud rate configuration------------------------------------------------
	//PCLK1 for USART2,3
	//PCLK2 for USART1

	if(USARTx == USART1){
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	4a2e      	ldr	r2, [pc, #184]	; (800076c <MCAL_USART_Init+0x164>)
 80006b2:	4293      	cmp	r3, r2
 80006b4:	d103      	bne.n	80006be <MCAL_USART_Init+0xb6>
		pclk = MCAL_RCC_GetPCLK2Freq();
 80006b6:	f7ff ff93 	bl	80005e0 <MCAL_RCC_GetPCLK2Freq>
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	e002      	b.n	80006c4 <MCAL_USART_Init+0xbc>
	}
	else{
		pclk = MCAL_RCC_GetPCLK1Freq();
 80006be:	f7ff ff7b 	bl	80005b8 <MCAL_RCC_GetPCLK1Freq>
 80006c2:	60f8      	str	r0, [r7, #12]
	}

	//details in @ref Baud rate calculation
	BRR = USART_BRR_Register(pclk,USART_cfg->Baud_rate);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	011b      	lsls	r3, r3, #4
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80006d0:	0119      	lsls	r1, r3, #4
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	009a      	lsls	r2, r3, #2
 80006dc:	441a      	add	r2, r3
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	011b      	lsls	r3, r3, #4
 80006ee:	68f8      	ldr	r0, [r7, #12]
 80006f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	fb00 f303 	mul.w	r3, r0, r3
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	011b      	lsls	r3, r3, #4
 80006fe:	4a1f      	ldr	r2, [pc, #124]	; (800077c <MCAL_USART_Init+0x174>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	095b      	lsrs	r3, r3, #5
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	430b      	orrs	r3, r1
 800070c:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	68ba      	ldr	r2, [r7, #8]
 8000712:	609a      	str	r2, [r3, #8]

	//-------------------------------------------------------------------------------------------------------------


	//Enable/Disable interrupt
	if(USART_cfg->IRQ_Enable != USART_IRQ_ENABLE_NONE){
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	7b1b      	ldrb	r3, [r3, #12]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d022      	beq.n	8000762 <MCAL_USART_Init+0x15a>
		USARTx->CR1 |= (USART_cfg->IRQ_Enable);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	68db      	ldr	r3, [r3, #12]
 8000720:	683a      	ldr	r2, [r7, #0]
 8000722:	7b12      	ldrb	r2, [r2, #12]
 8000724:	431a      	orrs	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx
		if(USARTx == USART1){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a0f      	ldr	r2, [pc, #60]	; (800076c <MCAL_USART_Init+0x164>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <MCAL_USART_Init+0x138>
			NVIC_IRQ37_USART1_enable();
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <MCAL_USART_Init+0x178>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MCAL_USART_Init+0x178>)
 8000738:	f043 0320 	orr.w	r3, r3, #32
 800073c:	6013      	str	r3, [r2, #0]
		else{
			NVIC_IRQ39_USART3_enable();
		}
	}

}
 800073e:	e010      	b.n	8000762 <MCAL_USART_Init+0x15a>
		else if(USARTx == USART2){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a0d      	ldr	r2, [pc, #52]	; (8000778 <MCAL_USART_Init+0x170>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <MCAL_USART_Init+0x14e>
			NVIC_IRQ38_USART2_enable();
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <MCAL_USART_Init+0x178>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a0c      	ldr	r2, [pc, #48]	; (8000780 <MCAL_USART_Init+0x178>)
 800074e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000752:	6013      	str	r3, [r2, #0]
}
 8000754:	e005      	b.n	8000762 <MCAL_USART_Init+0x15a>
			NVIC_IRQ39_USART3_enable();
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MCAL_USART_Init+0x178>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a09      	ldr	r2, [pc, #36]	; (8000780 <MCAL_USART_Init+0x178>)
 800075c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40013800 	.word	0x40013800
 8000770:	2000001c 	.word	0x2000001c
 8000774:	40021000 	.word	0x40021000
 8000778:	40004400 	.word	0x40004400
 800077c:	51eb851f 	.word	0x51eb851f
 8000780:	e000e104 	.word	0xe000e104

08000784 <MCAL_USART_Send_Data>:
		NVIC_IRQ39_USART3_disable();
	}

}

void MCAL_USART_Send_Data(USART_TypeDef* USARTx, uint16_t* Data, enum Polling_Mechanism PollingEN ){
 8000784:	b480      	push	{r7}
 8000786:	b087      	sub	sp, #28
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	60b9      	str	r1, [r7, #8]
 800078e:	4613      	mov	r3, r2
 8000790:	71fb      	strb	r3, [r7, #7]

	USART_config* USART_CFG = NULL;
 8000792:	2300      	movs	r3, #0
 8000794:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1){
 8000796:	68fb      	ldr	r3, [r7, #12]
 8000798:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MCAL_USART_Send_Data+0x78>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d103      	bne.n	80007a6 <MCAL_USART_Send_Data+0x22>
		USART_CFG = Global_USART_Config[0];
 800079e:	4b18      	ldr	r3, [pc, #96]	; (8000800 <MCAL_USART_Send_Data+0x7c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	617b      	str	r3, [r7, #20]
 80007a4:	e00a      	b.n	80007bc <MCAL_USART_Send_Data+0x38>
	}
	else if(USARTx == USART2){
 80007a6:	68fb      	ldr	r3, [r7, #12]
 80007a8:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MCAL_USART_Send_Data+0x80>)
 80007aa:	4293      	cmp	r3, r2
 80007ac:	d103      	bne.n	80007b6 <MCAL_USART_Send_Data+0x32>
		USART_CFG = Global_USART_Config[1];
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MCAL_USART_Send_Data+0x7c>)
 80007b0:	685b      	ldr	r3, [r3, #4]
 80007b2:	617b      	str	r3, [r7, #20]
 80007b4:	e002      	b.n	80007bc <MCAL_USART_Send_Data+0x38>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 80007b6:	4b12      	ldr	r3, [pc, #72]	; (8000800 <MCAL_USART_Send_Data+0x7c>)
 80007b8:	689b      	ldr	r3, [r3, #8]
 80007ba:	617b      	str	r3, [r7, #20]
	}
	//check if TXE is set in SR
	if(PollingEN == enable){
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d106      	bne.n	80007d0 <MCAL_USART_Send_Data+0x4c>
		while(!(USARTx->SR & 1<<7));
 80007c2:	bf00      	nop
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d0f9      	beq.n	80007c4 <MCAL_USART_Send_Data+0x40>
	}

	//check payload length
	if(USART_CFG->Payload_length == USART_Payload_Length_8){
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	7a1b      	ldrb	r3, [r3, #8]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d105      	bne.n	80007e4 <MCAL_USART_Send_Data+0x60>
		USARTx->DR = (*Data & (uint8_t)0xFF);
 80007d8:	68bb      	ldr	r3, [r7, #8]
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	b2da      	uxtb	r2, r3
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	605a      	str	r2, [r3, #4]
	}
	else{
		USARTx->DR = (*Data & (uint16_t)0x1FF);
	}
}
 80007e2:	e005      	b.n	80007f0 <MCAL_USART_Send_Data+0x6c>
		USARTx->DR = (*Data & (uint16_t)0x1FF);
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	605a      	str	r2, [r3, #4]
}
 80007f0:	bf00      	nop
 80007f2:	371c      	adds	r7, #28
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40013800 	.word	0x40013800
 8000800:	2000001c 	.word	0x2000001c
 8000804:	40004400 	.word	0x40004400

08000808 <MCAL_USART_Receive_Data>:
void MCAL_USART_Receive_Data(USART_TypeDef* USARTx, uint16_t* Data, enum Polling_Mechanism PollingEN ){
 8000808:	b480      	push	{r7}
 800080a:	b087      	sub	sp, #28
 800080c:	af00      	add	r7, sp, #0
 800080e:	60f8      	str	r0, [r7, #12]
 8000810:	60b9      	str	r1, [r7, #8]
 8000812:	4613      	mov	r3, r2
 8000814:	71fb      	strb	r3, [r7, #7]
	//the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//because it is replaced by the parity.
	//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.


	USART_config* USART_CFG = NULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1){
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	4a24      	ldr	r2, [pc, #144]	; (80008b0 <MCAL_USART_Receive_Data+0xa8>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d103      	bne.n	800082a <MCAL_USART_Receive_Data+0x22>
		USART_CFG = Global_USART_Config[0];
 8000822:	4b24      	ldr	r3, [pc, #144]	; (80008b4 <MCAL_USART_Receive_Data+0xac>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	e00a      	b.n	8000840 <MCAL_USART_Receive_Data+0x38>
	}
	else if(USARTx == USART2){
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	4a22      	ldr	r2, [pc, #136]	; (80008b8 <MCAL_USART_Receive_Data+0xb0>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d103      	bne.n	800083a <MCAL_USART_Receive_Data+0x32>
		USART_CFG = Global_USART_Config[1];
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MCAL_USART_Receive_Data+0xac>)
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	617b      	str	r3, [r7, #20]
 8000838:	e002      	b.n	8000840 <MCAL_USART_Receive_Data+0x38>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 800083a:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MCAL_USART_Receive_Data+0xac>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	617b      	str	r3, [r7, #20]
	}
	//check if RXNE is set in SR
	if(PollingEN == enable){
 8000840:	79fb      	ldrb	r3, [r7, #7]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d106      	bne.n	8000854 <MCAL_USART_Receive_Data+0x4c>
		while(!(USARTx->SR & 1<<5));
 8000846:	bf00      	nop
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	2b00      	cmp	r3, #0
 8000852:	d0f9      	beq.n	8000848 <MCAL_USART_Receive_Data+0x40>
	}

	//check payload length
	if(USART_CFG->Payload_length == USART_Payload_Length_8){
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	7a1b      	ldrb	r3, [r3, #8]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d112      	bne.n	8000882 <MCAL_USART_Receive_Data+0x7a>

		//if no parity
		if(USART_CFG->Parity == USART_Parity_NONE){
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	7a5b      	ldrb	r3, [r3, #9]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d105      	bne.n	8000870 <MCAL_USART_Receive_Data+0x68>
			*Data = USARTx->DR;
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	b29a      	uxth	r2, r3
 800086a:	68bb      	ldr	r3, [r7, #8]
 800086c:	801a      	strh	r2, [r3, #0]
		}
		else{
			*Data = (USARTx->DR & (uint8_t)0xFF);
		}
	}
}
 800086e:	e019      	b.n	80008a4 <MCAL_USART_Receive_Data+0x9c>
			*Data = (USARTx->DR & (uint8_t)0x7F);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	b29b      	uxth	r3, r3
 8000876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800087a:	b29a      	uxth	r2, r3
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	801a      	strh	r2, [r3, #0]
}
 8000880:	e010      	b.n	80008a4 <MCAL_USART_Receive_Data+0x9c>
		if(USART_CFG->Parity == USART_Parity_NONE){
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	7a5b      	ldrb	r3, [r3, #9]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d105      	bne.n	8000896 <MCAL_USART_Receive_Data+0x8e>
			*Data = USARTx->DR;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	b29a      	uxth	r2, r3
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	801a      	strh	r2, [r3, #0]
}
 8000894:	e006      	b.n	80008a4 <MCAL_USART_Receive_Data+0x9c>
			*Data = (USARTx->DR & (uint8_t)0xFF);
 8000896:	68fb      	ldr	r3, [r7, #12]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	b29b      	uxth	r3, r3
 800089c:	b2db      	uxtb	r3, r3
 800089e:	b29a      	uxth	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	801a      	strh	r2, [r3, #0]
}
 80008a4:	bf00      	nop
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40013800 	.word	0x40013800
 80008b4:	2000001c 	.word	0x2000001c
 80008b8:	40004400 	.word	0x40004400

080008bc <MCAL_USART_GPIO_Set_Pins>:

	//wait till TC flag is set in SR
	while(!(USARTx->SR & 1<<6));
}

void MCAL_USART_GPIO_Set_Pins(USART_TypeDef* USARTx){
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]

	USART_config* USART_CFG = NULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	60fb      	str	r3, [r7, #12]
	if(USARTx == USART1){
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a33      	ldr	r2, [pc, #204]	; (8000998 <MCAL_USART_GPIO_Set_Pins+0xdc>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d103      	bne.n	80008d8 <MCAL_USART_GPIO_Set_Pins+0x1c>
		USART_CFG = Global_USART_Config[0];
 80008d0:	4b32      	ldr	r3, [pc, #200]	; (800099c <MCAL_USART_GPIO_Set_Pins+0xe0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e00a      	b.n	80008ee <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else if(USARTx == USART2){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a31      	ldr	r2, [pc, #196]	; (80009a0 <MCAL_USART_GPIO_Set_Pins+0xe4>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d103      	bne.n	80008e8 <MCAL_USART_GPIO_Set_Pins+0x2c>
		USART_CFG = Global_USART_Config[1];
 80008e0:	4b2e      	ldr	r3, [pc, #184]	; (800099c <MCAL_USART_GPIO_Set_Pins+0xe0>)
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e002      	b.n	80008ee <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 80008e8:	4b2c      	ldr	r3, [pc, #176]	; (800099c <MCAL_USART_GPIO_Set_Pins+0xe0>)
 80008ea:	689b      	ldr	r3, [r3, #8]
 80008ec:	60fb      	str	r3, [r7, #12]
	}


	GPIO_PinConfig_t USART_pincfg;

	if(USARTx == USART1){
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a29      	ldr	r2, [pc, #164]	; (8000998 <MCAL_USART_GPIO_Set_Pins+0xdc>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d118      	bne.n	8000928 <MCAL_USART_GPIO_Set_Pins+0x6c>
		//PA9->TX, PA10-> RX, PA11-> CTS, PA12-> RTS

		//PA9 TX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN9;
 80008f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008fa:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80008fc:	2306      	movs	r3, #6
 80008fe:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000900:	2301      	movs	r3, #1
 8000902:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4619      	mov	r1, r3
 800090a:	4826      	ldr	r0, [pc, #152]	; (80009a4 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 800090c:	f7ff fda3 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 RX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 8000910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000914:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000916:	2308      	movs	r3, #8
 8000918:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 800091a:	f107 0308 	add.w	r3, r7, #8
 800091e:	4619      	mov	r1, r3
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000922:	f7ff fd98 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &USART_pincfg);

		}

	}
}
 8000926:	e032      	b.n	800098e <MCAL_USART_GPIO_Set_Pins+0xd2>
	else if(USARTx == USART2){
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	4a1d      	ldr	r2, [pc, #116]	; (80009a0 <MCAL_USART_GPIO_Set_Pins+0xe4>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d116      	bne.n	800095e <MCAL_USART_GPIO_Set_Pins+0xa2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN2;
 8000930:	2304      	movs	r3, #4
 8000932:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000934:	2306      	movs	r3, #6
 8000936:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000938:	2301      	movs	r3, #1
 800093a:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	4619      	mov	r1, r3
 8000942:	4818      	ldr	r0, [pc, #96]	; (80009a4 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000944:	f7ff fd87 	bl	8000456 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN3;
 8000948:	2308      	movs	r3, #8
 800094a:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 800094c:	2308      	movs	r3, #8
 800094e:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000950:	f107 0308 	add.w	r3, r7, #8
 8000954:	4619      	mov	r1, r3
 8000956:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000958:	f7ff fd7d 	bl	8000456 <MCAL_GPIO_Init>
}
 800095c:	e017      	b.n	800098e <MCAL_USART_GPIO_Set_Pins+0xd2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 800095e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000962:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000964:	2306      	movs	r3, #6
 8000966:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000968:	2301      	movs	r3, #1
 800096a:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	; (80009a8 <MCAL_USART_GPIO_Set_Pins+0xec>)
 8000974:	f7ff fd6f 	bl	8000456 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN11;
 8000978:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800097c:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 800097e:	2308      	movs	r3, #8
 8000980:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 8000982:	f107 0308 	add.w	r3, r7, #8
 8000986:	4619      	mov	r1, r3
 8000988:	4807      	ldr	r0, [pc, #28]	; (80009a8 <MCAL_USART_GPIO_Set_Pins+0xec>)
 800098a:	f7ff fd64 	bl	8000456 <MCAL_GPIO_Init>
}
 800098e:	bf00      	nop
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40013800 	.word	0x40013800
 800099c:	2000001c 	.word	0x2000001c
 80009a0:	40004400 	.word	0x40004400
 80009a4:	40010800 	.word	0x40010800
 80009a8:	40010c00 	.word	0x40010c00

080009ac <USART1_IRQHandler>:


//ISR
void USART1_IRQHandler()
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_Callback;

}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_Callback;

}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_Callback;

}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr

080009d0 <clock_init>:
#include "STM32F103C6_RCC_driver.h"
#include "STM32F103C6_USART_driver.h"

int flag = 0;

void clock_init(){
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 80009d4:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <clock_init+0x30>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <clock_init+0x30>)
 80009da:	f043 0304 	orr.w	r3, r3, #4
 80009de:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 80009e0:	4b07      	ldr	r3, [pc, #28]	; (8000a00 <clock_init+0x30>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <clock_init+0x30>)
 80009e6:	f043 0308 	orr.w	r3, r3, #8
 80009ea:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <clock_init+0x30>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a03      	ldr	r2, [pc, #12]	; (8000a00 <clock_init+0x30>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6193      	str	r3, [r2, #24]
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr
 8000a00:	40021000 	.word	0x40021000

08000a04 <test_IRQ>:

unsigned char ch;

void test_IRQ(void){
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	MCAL_USART_Receive_Data(USART1, &ch, disable);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	4905      	ldr	r1, [pc, #20]	; (8000a20 <test_IRQ+0x1c>)
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <test_IRQ+0x20>)
 8000a0e:	f7ff fefb 	bl	8000808 <MCAL_USART_Receive_Data>
	MCAL_USART_Send_Data(USART1, &ch, enable);
 8000a12:	2200      	movs	r2, #0
 8000a14:	4902      	ldr	r1, [pc, #8]	; (8000a20 <test_IRQ+0x1c>)
 8000a16:	4803      	ldr	r0, [pc, #12]	; (8000a24 <test_IRQ+0x20>)
 8000a18:	f7ff feb4 	bl	8000784 <MCAL_USART_Send_Data>
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	20000064 	.word	0x20000064
 8000a24:	40013800 	.word	0x40013800

08000a28 <main>:

int main(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af00      	add	r7, sp, #0
	clock_init();
 8000a2e:	f7ff ffcf 	bl	80009d0 <clock_init>


	USART_config usart_cfg;

	usart_cfg.Baud_rate = USART_BaudRate_115200;
 8000a32:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000a36:	60bb      	str	r3, [r7, #8]
	usart_cfg.HW_Flow_Control = USART_Flow_Control_NONE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
	usart_cfg.IRQ_Enable = USART_IRQ_ENABLE_RXNEIE;
 8000a3c:	2320      	movs	r3, #32
 8000a3e:	743b      	strb	r3, [r7, #16]
	usart_cfg.P_IRQ_Callback = test_IRQ;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <main+0x40>)
 8000a42:	617b      	str	r3, [r7, #20]
	usart_cfg.Parity = USART_Parity_NONE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	737b      	strb	r3, [r7, #13]
	usart_cfg.Payload_length = USART_Payload_Length_8;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	733b      	strb	r3, [r7, #12]
	usart_cfg.Stop_bits = USART_Stop_bit_1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	73bb      	strb	r3, [r7, #14]
	usart_cfg.USART_MODE = USART_MODE_TX_RX;
 8000a50:	230c      	movs	r3, #12
 8000a52:	713b      	strb	r3, [r7, #4]

	MCAL_USART_Init(USART1, &usart_cfg);
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4804      	ldr	r0, [pc, #16]	; (8000a6c <main+0x44>)
 8000a5a:	f7ff fdd5 	bl	8000608 <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000a5e:	4803      	ldr	r0, [pc, #12]	; (8000a6c <main+0x44>)
 8000a60:	f7ff ff2c 	bl	80008bc <MCAL_USART_GPIO_Set_Pins>

	while(1){
 8000a64:	e7fe      	b.n	8000a64 <main+0x3c>
 8000a66:	bf00      	nop
 8000a68:	08000a05 	.word	0x08000a05
 8000a6c:	40013800 	.word	0x40013800

08000a70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a72:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000a74:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a78:	480c      	ldr	r0, [pc, #48]	; (8000aac <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7a:	490d      	ldr	r1, [pc, #52]	; (8000ab0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	; (8000ab4 <LoopForever+0xe>)
  movs r3, #0
 8000a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a80:	e002      	b.n	8000a88 <LoopCopyDataInit>

08000a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a86:	3304      	adds	r3, #4

08000a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a8c:	d3f9      	bcc.n	8000a82 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a8e:	4a0a      	ldr	r2, [pc, #40]	; (8000ab8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a90:	4c0a      	ldr	r4, [pc, #40]	; (8000abc <LoopForever+0x16>)
  movs r3, #0
 8000a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a94:	e001      	b.n	8000a9a <LoopFillZerobss>

08000a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a98:	3204      	adds	r2, #4

08000a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a9c:	d3fb      	bcc.n	8000a96 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a9e:	f000 f811 	bl	8000ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000aa2:	f7ff ffc1 	bl	8000a28 <main>

08000aa6 <LoopForever>:

LoopForever:
    b LoopForever
 8000aa6:	e7fe      	b.n	8000aa6 <LoopForever>
  ldr   r0, =_estack
 8000aa8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000ab4:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000ab8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000abc:	20000068 	.word	0x20000068

08000ac0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ac0:	e7fe      	b.n	8000ac0 <ADC1_2_IRQHandler>
	...

08000ac4 <__libc_init_array>:
 8000ac4:	b570      	push	{r4, r5, r6, lr}
 8000ac6:	2500      	movs	r5, #0
 8000ac8:	4e0c      	ldr	r6, [pc, #48]	; (8000afc <__libc_init_array+0x38>)
 8000aca:	4c0d      	ldr	r4, [pc, #52]	; (8000b00 <__libc_init_array+0x3c>)
 8000acc:	1ba4      	subs	r4, r4, r6
 8000ace:	10a4      	asrs	r4, r4, #2
 8000ad0:	42a5      	cmp	r5, r4
 8000ad2:	d109      	bne.n	8000ae8 <__libc_init_array+0x24>
 8000ad4:	f000 f81a 	bl	8000b0c <_init>
 8000ad8:	2500      	movs	r5, #0
 8000ada:	4e0a      	ldr	r6, [pc, #40]	; (8000b04 <__libc_init_array+0x40>)
 8000adc:	4c0a      	ldr	r4, [pc, #40]	; (8000b08 <__libc_init_array+0x44>)
 8000ade:	1ba4      	subs	r4, r4, r6
 8000ae0:	10a4      	asrs	r4, r4, #2
 8000ae2:	42a5      	cmp	r5, r4
 8000ae4:	d105      	bne.n	8000af2 <__libc_init_array+0x2e>
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000aec:	4798      	blx	r3
 8000aee:	3501      	adds	r5, #1
 8000af0:	e7ee      	b.n	8000ad0 <__libc_init_array+0xc>
 8000af2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000af6:	4798      	blx	r3
 8000af8:	3501      	adds	r5, #1
 8000afa:	e7f2      	b.n	8000ae2 <__libc_init_array+0x1e>
 8000afc:	08000b3c 	.word	0x08000b3c
 8000b00:	08000b3c 	.word	0x08000b3c
 8000b04:	08000b3c 	.word	0x08000b3c
 8000b08:	08000b40 	.word	0x08000b40

08000b0c <_init>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr

08000b18 <_fini>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	bf00      	nop
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr


ATMEGA32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000076e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  0000076e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000076e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001763  00000000  00000000  00000964  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000af4  00000000  00000000  000020c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d61  00000000  00000000  00002bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000454  00000000  00000000  0000391c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e7  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6c  00000000  00000000  00004557  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004fc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_12>
  34:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_13>
  38:	0c 94 0b 03 	jmp	0x616	; 0x616 <__vector_14>
  3c:	0c 94 32 03 	jmp	0x664	; 0x664 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ef       	ldi	r30, 0xFA	; 250
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 36       	cpi	r26, 0x6B	; 107
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 ab 00 	call	0x156	; 0x156 <main>
  8a:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
		if (position < 16 && position >= 0)
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
		}
	}
}
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	1a ba       	out	0x1a, r1	; 26
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 bb       	out	0x18, r24	; 24
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret

000000ce <LCD_WRITE_COMMAND>:
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
  d2:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
  d6:	cb bb       	out	0x1b, r28	; 27
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	89 7f       	andi	r24, 0xF9	; 249
  dc:	88 bb       	out	0x18, r24	; 24
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_WRITE_COMMAND+0x14>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_WRITE_COMMAND+0x1a>
  e8:	00 00       	nop
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_clear_screen>:
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
  f8:	08 95       	ret

000000fa <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fa:	87 e8       	ldi	r24, 0x87	; 135
  fc:	93 e1       	ldi	r25, 0x13	; 19
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <LCD_INIT+0x4>
 102:	00 c0       	rjmp	.+0      	; 0x104 <LCD_INIT+0xa>
 104:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 106:	87 b3       	in	r24, 0x17	; 23
 108:	8e 60       	ori	r24, 0x0E	; 14
 10a:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 10c:	88 b3       	in	r24, 0x18	; 24
 10e:	81 7f       	andi	r24, 0xF1	; 241
 110:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	8a bb       	out	0x1a, r24	; 26
 116:	85 ea       	ldi	r24, 0xA5	; 165
 118:	9e e0       	ldi	r25, 0x0E	; 14
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <LCD_INIT+0x20>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_INIT+0x26>
 120:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 122:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE); 
 12c:	86 e0       	ldi	r24, 0x06	; 6
 12e:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 138:	8f e0       	ldi	r24, 0x0F	; 15
 13a:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
 13e:	08 95       	ret

00000140 <SPI_Call_INIT>:
char ch ;

void SPI_Call_INIT(void)
{
	#ifdef SPI_Act_As_Slave
	MCAL_SPI_ReceiveData(&ch,Enabled);
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	84 e6       	ldi	r24, 0x64	; 100
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <MCAL_SPI_ReceiveData>
	MCAL_USART_SendData( &ch , Enable);
 14a:	60 e0       	ldi	r22, 0x00	; 0
 14c:	84 e6       	ldi	r24, 0x64	; 100
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 de 02 	call	0x5bc	; 0x5bc <MCAL_USART_SendData>
 154:	08 95       	ret

00000156 <main>:
}


	
int main(void)
{
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	64 97       	sbiw	r28, 0x14	; 20
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    LCD_INIT();
 16a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_INIT>
    USART_CONFIG usart_cfg;
	
	usart_cfg.Baud_Rate = USART_BAUD_RATE_9600;
 16e:	80 e8       	ldi	r24, 0x80	; 128
 170:	95 e2       	ldi	r25, 0x25	; 37
 172:	9f 83       	std	Y+7, r25	; 0x07
 174:	8e 83       	std	Y+6, r24	; 0x06
	usart_cfg.Mode = USART_MODE_TX_RX;
 176:	88 e1       	ldi	r24, 0x18	; 24
 178:	89 83       	std	Y+1, r24	; 0x01
	usart_cfg.Operating_Mode = USART_Operating_Mode_Asynch_Normal;
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	8b 83       	std	Y+3, r24	; 0x03
	usart_cfg.Data_Bits = USART_DATA_BITS_8;
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	8c 83       	std	Y+4, r24	; 0x04
	usart_cfg.Stop_Bits = USART_STOP_BITS_1;
 182:	1d 82       	std	Y+5, r1	; 0x05
	usart_cfg.Parity = USART_PARITY_NONE;
 184:	18 86       	std	Y+8, r1	; 0x08
	usart_cfg.IRQ_EN = USART_IRQ_ENABLE_NONE;
 186:	19 86       	std	Y+9, r1	; 0x09
	usart_cfg.P_IRQ_CALL = NULL;
 188:	1b 86       	std	Y+11, r1	; 0x0b
 18a:	1a 86       	std	Y+10, r1	; 0x0a
    
	MCAL_USART_Init(&usart_cfg);
 18c:	ce 01       	movw	r24, r28
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <MCAL_USART_Init>
	
	SPI_CONFIG SPI_Conf ;
	
	SPI_Conf.BaudRate_Prescalers = SPI_BaudRate_Prescalers_4 ;
 194:	8c ef       	ldi	r24, 0xFC	; 252
 196:	8d 87       	std	Y+13, r24	; 0x0d
	SPI_Conf.Data_Order = SPI_Data_Order_MSB_Transmitted_First ;
 198:	8f ed       	ldi	r24, 0xDF	; 223
 19a:	89 8b       	std	Y+17, r24	; 0x11
	SPI_Conf.IRQ_EN = SPI_IRQ_ENABLE_Enable ;
 19c:	80 e8       	ldi	r24, 0x80	; 128
 19e:	8a 8b       	std	Y+18, r24	; 0x12
	SPI_Conf.P_IRQ_CALL = SPI_Call_INIT ;
 1a0:	80 ea       	ldi	r24, 0xA0	; 160
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	9c 8b       	std	Y+20, r25	; 0x14
 1a6:	8b 8b       	std	Y+19, r24	; 0x13
	SPI_Conf.Phase = SPI_Phase_Data_Latched_On_First_Clock ;
 1a8:	8b ef       	ldi	r24, 0xFB	; 251
 1aa:	88 8b       	std	Y+16, r24	; 0x10
	SPI_Conf.Polarity = SPI_Polarity_Low_level_idle_state ;
 1ac:	87 ef       	ldi	r24, 0xF7	; 247
 1ae:	8f 87       	std	Y+15, r24	; 0x0f
	SPI_Conf.Speed_Communication = SPI_Speed_Communication_Normal ;
 1b0:	8e ef       	ldi	r24, 0xFE	; 254
 1b2:	8e 87       	std	Y+14, r24	; 0x0e
	SPI_Conf.MODE = SPI_MODE_Master ;
	MCAL_SPI_Set_Master_Pin();
	#endif
	
	#ifdef SPI_Act_As_Slave
	SPI_Conf.MODE = SPI_MODE_Slave ;
 1b4:	8f ee       	ldi	r24, 0xEF	; 239
 1b6:	8c 87       	std	Y+12, r24	; 0x0c
	MCAL_SPI_Set_Slave_Pin() ;
 1b8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <MCAL_SPI_Set_Slave_Pin>
	#endif
	
	MCAL_SPI_Init(&SPI_Conf) ;
 1bc:	ce 01       	movw	r24, r28
 1be:	0c 96       	adiw	r24, 0x0c	; 12
 1c0:	0e 94 18 01 	call	0x230	; 0x230 <MCAL_SPI_Init>
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0x6e>

000001c6 <MCAL_GPIO_Init>:
}


uint8_t MCAL_GPIO_ReadPort(GPIO_typedef* GPIOX ){
	return GPIOX->PIN;
}
 1c6:	fc 01       	movw	r30, r24
 1c8:	db 01       	movw	r26, r22
 1ca:	11 96       	adiw	r26, 0x01	; 1
 1cc:	8c 91       	ld	r24, X
 1ce:	11 97       	sbiw	r26, 0x01	; 1
 1d0:	81 11       	cpse	r24, r1
 1d2:	0b c0       	rjmp	.+22     	; 0x1ea <MCAL_GPIO_Init+0x24>
 1d4:	8c 91       	ld	r24, X
 1d6:	80 95       	com	r24
 1d8:	91 81       	ldd	r25, Z+1	; 0x01
 1da:	89 23       	and	r24, r25
 1dc:	81 83       	std	Z+1, r24	; 0x01
 1de:	8c 91       	ld	r24, X
 1e0:	80 95       	com	r24
 1e2:	92 81       	ldd	r25, Z+2	; 0x02
 1e4:	89 23       	and	r24, r25
 1e6:	82 83       	std	Z+2, r24	; 0x02
 1e8:	08 95       	ret
 1ea:	81 30       	cpi	r24, 0x01	; 1
 1ec:	51 f4       	brne	.+20     	; 0x202 <MCAL_GPIO_Init+0x3c>
 1ee:	8c 91       	ld	r24, X
 1f0:	80 95       	com	r24
 1f2:	91 81       	ldd	r25, Z+1	; 0x01
 1f4:	89 23       	and	r24, r25
 1f6:	81 83       	std	Z+1, r24	; 0x01
 1f8:	8c 91       	ld	r24, X
 1fa:	92 81       	ldd	r25, Z+2	; 0x02
 1fc:	89 2b       	or	r24, r25
 1fe:	82 83       	std	Z+2, r24	; 0x02
 200:	08 95       	ret
 202:	8c 91       	ld	r24, X
 204:	91 81       	ldd	r25, Z+1	; 0x01
 206:	89 2b       	or	r24, r25
 208:	81 83       	std	Z+1, r24	; 0x01
 20a:	8c 91       	ld	r24, X
 20c:	80 95       	com	r24
 20e:	92 81       	ldd	r25, Z+2	; 0x02
 210:	89 23       	and	r24, r25
 212:	82 83       	std	Z+2, r24	; 0x02
 214:	08 95       	ret

00000216 <MCAL_GPIO_WritePin>:

void MCAL_GPIO_WritePin(GPIO_typedef* GPIOX , uint8_t PinNumber, uint8_t value){
	if(value){
 216:	44 23       	and	r20, r20
 218:	29 f0       	breq	.+10     	; 0x224 <MCAL_GPIO_WritePin+0xe>
		GPIOX->PORT |= PinNumber;
 21a:	fc 01       	movw	r30, r24
 21c:	22 81       	ldd	r18, Z+2	; 0x02
 21e:	62 2b       	or	r22, r18
 220:	62 83       	std	Z+2, r22	; 0x02
 222:	08 95       	ret
	}
	else{
		GPIOX->PORT &= ~PinNumber;
 224:	60 95       	com	r22
 226:	fc 01       	movw	r30, r24
 228:	22 81       	ldd	r18, Z+2	; 0x02
 22a:	62 23       	and	r22, r18
 22c:	62 83       	std	Z+2, r22	; 0x02
 22e:	08 95       	ret

00000230 <MCAL_SPI_Init>:
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
	//PB7--->SCK
	Pin_SPI_Conf.GPIO_Mode = GPIO_MODE_OUTPUT ;
	Pin_SPI_Conf.GPIO_Pin_Number = GPIO_PIN7 ;
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
}
 230:	0f 93       	push	r16
 232:	1f 93       	push	r17
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	8c 01       	movw	r16, r24
 23a:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 23e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 242:	fc 01       	movw	r30, r24
 244:	c1 81       	ldd	r28, Z+1	; 0x01
 246:	c3 30       	cpi	r28, 0x03	; 3
 248:	09 f0       	breq	.+2      	; 0x24c <MCAL_SPI_Init+0x1c>
 24a:	c0 e0       	ldi	r28, 0x00	; 0
 24c:	f8 01       	movw	r30, r16
 24e:	80 81       	ld	r24, Z
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	09 f4       	brne	.+2      	; 0x256 <MCAL_SPI_Init+0x26>
 254:	c8 2b       	or	r28, r24
 256:	f8 01       	movw	r30, r16
 258:	d2 81       	ldd	r29, Z+2	; 0x02
 25a:	d1 30       	cpi	r29, 0x01	; 1
 25c:	09 f0       	breq	.+2      	; 0x260 <MCAL_SPI_Init+0x30>
 25e:	d0 e0       	ldi	r29, 0x00	; 0
 260:	f8 01       	movw	r30, r16
 262:	83 81       	ldd	r24, Z+3	; 0x03
 264:	88 30       	cpi	r24, 0x08	; 8
 266:	19 f0       	breq	.+6      	; 0x26e <MCAL_SPI_Init+0x3e>
 268:	87 3f       	cpi	r24, 0xF7	; 247
 26a:	49 f0       	breq	.+18     	; 0x27e <MCAL_SPI_Init+0x4e>
 26c:	09 c0       	rjmp	.+18     	; 0x280 <MCAL_SPI_Init+0x50>
 26e:	c8 2b       	or	r28, r24
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	60 e8       	ldi	r22, 0x80	; 128
 274:	86 e3       	ldi	r24, 0x36	; 54
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	0e 94 0b 01 	call	0x216	; 0x216 <MCAL_GPIO_WritePin>
 27c:	01 c0       	rjmp	.+2      	; 0x280 <MCAL_SPI_Init+0x50>
 27e:	c8 23       	and	r28, r24
 280:	f8 01       	movw	r30, r16
 282:	84 81       	ldd	r24, Z+4	; 0x04
 284:	84 30       	cpi	r24, 0x04	; 4
 286:	21 f0       	breq	.+8      	; 0x290 <MCAL_SPI_Init+0x60>
 288:	8b 3f       	cpi	r24, 0xFB	; 251
 28a:	19 f4       	brne	.+6      	; 0x292 <MCAL_SPI_Init+0x62>
 28c:	c8 23       	and	r28, r24
 28e:	01 c0       	rjmp	.+2      	; 0x292 <MCAL_SPI_Init+0x62>
 290:	c8 2b       	or	r28, r24
 292:	f8 01       	movw	r30, r16
 294:	85 81       	ldd	r24, Z+5	; 0x05
 296:	80 32       	cpi	r24, 0x20	; 32
 298:	19 f0       	breq	.+6      	; 0x2a0 <MCAL_SPI_Init+0x70>
 29a:	8f 3d       	cpi	r24, 0xDF	; 223
 29c:	19 f0       	breq	.+6      	; 0x2a4 <MCAL_SPI_Init+0x74>
 29e:	03 c0       	rjmp	.+6      	; 0x2a6 <MCAL_SPI_Init+0x76>
 2a0:	c8 2b       	or	r28, r24
 2a2:	01 c0       	rjmp	.+2      	; 0x2a6 <MCAL_SPI_Init+0x76>
 2a4:	c8 23       	and	r28, r24
 2a6:	f8 01       	movw	r30, r16
 2a8:	86 81       	ldd	r24, Z+6	; 0x06
 2aa:	8f 37       	cpi	r24, 0x7F	; 127
 2ac:	19 f0       	breq	.+6      	; 0x2b4 <MCAL_SPI_Init+0x84>
 2ae:	80 38       	cpi	r24, 0x80	; 128
 2b0:	31 f0       	breq	.+12     	; 0x2be <MCAL_SPI_Init+0x8e>
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <MCAL_SPI_Init+0x96>
 2b4:	c8 23       	and	r28, r24
 2b6:	8f b7       	in	r24, 0x3f	; 63
 2b8:	8f 77       	andi	r24, 0x7F	; 127
 2ba:	8f bf       	out	0x3f, r24	; 63
 2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <MCAL_SPI_Init+0x96>
 2be:	c8 2b       	or	r28, r24
 2c0:	8f b7       	in	r24, 0x3f	; 63
 2c2:	80 68       	ori	r24, 0x80	; 128
 2c4:	8f bf       	out	0x3f, r24	; 63
 2c6:	de b9       	out	0x0e, r29	; 14
 2c8:	c0 64       	ori	r28, 0x40	; 64
 2ca:	cd b9       	out	0x0d, r28	; 13
 2cc:	df 91       	pop	r29
 2ce:	cf 91       	pop	r28
 2d0:	1f 91       	pop	r17
 2d2:	0f 91       	pop	r16
 2d4:	08 95       	ret

000002d6 <MCAL_SPI_ReceiveData>:
 2d6:	61 11       	cpse	r22, r1
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <MCAL_SPI_ReceiveData+0x8>
 2da:	77 9b       	sbis	0x0e, 7	; 14
 2dc:	fe cf       	rjmp	.-4      	; 0x2da <MCAL_SPI_ReceiveData+0x4>
 2de:	2f b1       	in	r18, 0x0f	; 15
 2e0:	fc 01       	movw	r30, r24
 2e2:	20 83       	st	Z, r18
 2e4:	08 95       	ret

000002e6 <MCAL_SPI_Set_Slave_Pin>:



void MCAL_SPI_Set_Slave_Pin( void )
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	00 d0       	rcall	.+0      	; 0x2ec <MCAL_SPI_Set_Slave_Pin+0x6>
 2ec:	cd b7       	in	r28, 0x3d	; 61
 2ee:	de b7       	in	r29, 0x3e	; 62
	GPIO_PIN_CONFIG Pin_SPI_Conf ;
		
	//PB4---> SS
	Pin_SPI_Conf.GPIO_Mode = GPIO_MODE_INPUT_FLOAT ;
 2f0:	1a 82       	std	Y+2, r1	; 0x02
	Pin_SPI_Conf.GPIO_Pin_Number = GPIO_PIN4 ;
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
 2f6:	be 01       	movw	r22, r28
 2f8:	6f 5f       	subi	r22, 0xFF	; 255
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	86 e3       	ldi	r24, 0x36	; 54
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
	//PB5--->MOSI
	Pin_SPI_Conf.GPIO_Mode = GPIO_MODE_INPUT_FLOAT ;
 304:	1a 82       	std	Y+2, r1	; 0x02
	Pin_SPI_Conf.GPIO_Pin_Number = GPIO_PIN5 ;
 306:	80 e2       	ldi	r24, 0x20	; 32
 308:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
 30a:	be 01       	movw	r22, r28
 30c:	6f 5f       	subi	r22, 0xFF	; 255
 30e:	7f 4f       	sbci	r23, 0xFF	; 255
 310:	86 e3       	ldi	r24, 0x36	; 54
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
	//PB6--->MISO
	Pin_SPI_Conf.GPIO_Mode = GPIO_MODE_OUTPUT ;
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	8a 83       	std	Y+2, r24	; 0x02
	Pin_SPI_Conf.GPIO_Pin_Number = GPIO_PIN6 ;
 31c:	80 e4       	ldi	r24, 0x40	; 64
 31e:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
 320:	be 01       	movw	r22, r28
 322:	6f 5f       	subi	r22, 0xFF	; 255
 324:	7f 4f       	sbci	r23, 0xFF	; 255
 326:	86 e3       	ldi	r24, 0x36	; 54
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
	//PB7--->SCK
	Pin_SPI_Conf.GPIO_Mode = GPIO_MODE_INPUT_FLOAT ;
 32e:	1a 82       	std	Y+2, r1	; 0x02
	Pin_SPI_Conf.GPIO_Pin_Number = GPIO_PIN7 ;
 330:	80 e8       	ldi	r24, 0x80	; 128
 332:	89 83       	std	Y+1, r24	; 0x01
	MCAL_GPIO_Init(GPIOB,&Pin_SPI_Conf);
 334:	be 01       	movw	r22, r28
 336:	6f 5f       	subi	r22, 0xFF	; 255
 338:	7f 4f       	sbci	r23, 0xFF	; 255
 33a:	86 e3       	ldi	r24, 0x36	; 54
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
}
 342:	0f 90       	pop	r0
 344:	0f 90       	pop	r0
 346:	df 91       	pop	r29
 348:	cf 91       	pop	r28
 34a:	08 95       	ret

0000034c <__vector_12>:
 */


void __vector_12 (void) __attribute__((signal));
void __vector_12 (void)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	2f 93       	push	r18
 358:	3f 93       	push	r19
 35a:	4f 93       	push	r20
 35c:	5f 93       	push	r21
 35e:	6f 93       	push	r22
 360:	7f 93       	push	r23
 362:	8f 93       	push	r24
 364:	9f 93       	push	r25
 366:	af 93       	push	r26
 368:	bf 93       	push	r27
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	g_SPI_Config->P_IRQ_CALL() ;
 36e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 372:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 376:	07 80       	ldd	r0, Z+7	; 0x07
 378:	f0 85       	ldd	r31, Z+8	; 0x08
 37a:	e0 2d       	mov	r30, r0
 37c:	09 95       	icall
 37e:	ff 91       	pop	r31
 380:	ef 91       	pop	r30
 382:	bf 91       	pop	r27
 384:	af 91       	pop	r26
 386:	9f 91       	pop	r25
 388:	8f 91       	pop	r24
 38a:	7f 91       	pop	r23
 38c:	6f 91       	pop	r22
 38e:	5f 91       	pop	r21
 390:	4f 91       	pop	r20
 392:	3f 91       	pop	r19
 394:	2f 91       	pop	r18
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <MCAL_USART_Init>:
	while (*RXBuffer != '\r') {
		RXBuffer++;
		MCAL_USART_ReceiveData(RXBuffer,Enable);
	}
	*RXBuffer = '\0';
}
 3a0:	0f 93       	push	r16
 3a2:	1f 93       	push	r17
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <MCAL_USART_Init+0xa>
 3aa:	cd b7       	in	r28, 0x3d	; 61
 3ac:	de b7       	in	r29, 0x3e	; 62
 3ae:	8c 01       	movw	r16, r24
 3b0:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <global_USART_config+0x1>
 3b4:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <global_USART_config>
 3b8:	fc 01       	movw	r30, r24
 3ba:	82 81       	ldd	r24, Z+2	; 0x02
 3bc:	9e ef       	ldi	r25, 0xFE	; 254
 3be:	98 0f       	add	r25, r24
 3c0:	92 30       	cpi	r25, 0x02	; 2
 3c2:	f0 f4       	brcc	.+60     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3c4:	80 b5       	in	r24, 0x20	; 32
 3c6:	80 68       	ori	r24, 0x80	; 128
 3c8:	80 bd       	out	0x20, r24	; 32
 3ca:	90 b5       	in	r25, 0x20	; 32
 3cc:	81 81       	ldd	r24, Z+1	; 0x01
 3ce:	89 2b       	or	r24, r25
 3d0:	80 bd       	out	0x20, r24	; 32
 3d2:	80 b5       	in	r24, 0x20	; 32
 3d4:	80 64       	ori	r24, 0x40	; 64
 3d6:	80 bd       	out	0x20, r24	; 32
 3d8:	25 81       	ldd	r18, Z+5	; 0x05
 3da:	36 81       	ldd	r19, Z+6	; 0x06
 3dc:	c9 01       	movw	r24, r18
 3de:	a0 e0       	ldi	r26, 0x00	; 0
 3e0:	b0 e0       	ldi	r27, 0x00	; 0
 3e2:	9c 01       	movw	r18, r24
 3e4:	ad 01       	movw	r20, r26
 3e6:	22 0f       	add	r18, r18
 3e8:	33 1f       	adc	r19, r19
 3ea:	44 1f       	adc	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	72 e1       	ldi	r23, 0x12	; 18
 3f2:	8a e7       	ldi	r24, 0x7A	; 122
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodsi4>
 3fa:	21 50       	subi	r18, 0x01	; 1
 3fc:	31 09       	sbc	r19, r1
 3fe:	51 c0       	rjmp	.+162    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 400:	81 11       	cpse	r24, r1
 402:	26 c0       	rjmp	.+76     	; 0x450 <__EEPROM_REGION_LENGTH__+0x50>
 404:	80 b5       	in	r24, 0x20	; 32
 406:	80 68       	ori	r24, 0x80	; 128
 408:	80 bd       	out	0x20, r24	; 32
 40a:	80 b5       	in	r24, 0x20	; 32
 40c:	8f 7b       	andi	r24, 0xBF	; 191
 40e:	80 bd       	out	0x20, r24	; 32
 410:	8b b1       	in	r24, 0x0b	; 11
 412:	82 60       	ori	r24, 0x02	; 2
 414:	8b b9       	out	0x0b, r24	; 11
 416:	f8 01       	movw	r30, r16
 418:	25 81       	ldd	r18, Z+5	; 0x05
 41a:	36 81       	ldd	r19, Z+6	; 0x06
 41c:	c9 01       	movw	r24, r18
 41e:	a0 e0       	ldi	r26, 0x00	; 0
 420:	b0 e0       	ldi	r27, 0x00	; 0
 422:	88 0f       	add	r24, r24
 424:	99 1f       	adc	r25, r25
 426:	aa 1f       	adc	r26, r26
 428:	bb 1f       	adc	r27, r27
 42a:	88 0f       	add	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	9c 01       	movw	r18, r24
 434:	ad 01       	movw	r20, r26
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	44 1f       	adc	r20, r20
 43c:	55 1f       	adc	r21, r21
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	72 e1       	ldi	r23, 0x12	; 18
 442:	8a e7       	ldi	r24, 0x7A	; 122
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodsi4>
 44a:	21 50       	subi	r18, 0x01	; 1
 44c:	31 09       	sbc	r19, r1
 44e:	29 c0       	rjmp	.+82     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 450:	80 b5       	in	r24, 0x20	; 32
 452:	80 68       	ori	r24, 0x80	; 128
 454:	80 bd       	out	0x20, r24	; 32
 456:	80 b5       	in	r24, 0x20	; 32
 458:	8f 7b       	andi	r24, 0xBF	; 191
 45a:	80 bd       	out	0x20, r24	; 32
 45c:	8b b1       	in	r24, 0x0b	; 11
 45e:	8d 7f       	andi	r24, 0xFD	; 253
 460:	8b b9       	out	0x0b, r24	; 11
 462:	f8 01       	movw	r30, r16
 464:	25 81       	ldd	r18, Z+5	; 0x05
 466:	36 81       	ldd	r19, Z+6	; 0x06
 468:	c9 01       	movw	r24, r18
 46a:	a0 e0       	ldi	r26, 0x00	; 0
 46c:	b0 e0       	ldi	r27, 0x00	; 0
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	aa 1f       	adc	r26, r26
 474:	bb 1f       	adc	r27, r27
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	aa 1f       	adc	r26, r26
 47c:	bb 1f       	adc	r27, r27
 47e:	9c 01       	movw	r18, r24
 480:	ad 01       	movw	r20, r26
 482:	22 0f       	add	r18, r18
 484:	33 1f       	adc	r19, r19
 486:	44 1f       	adc	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	22 0f       	add	r18, r18
 48c:	33 1f       	adc	r19, r19
 48e:	44 1f       	adc	r20, r20
 490:	55 1f       	adc	r21, r21
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	72 e1       	ldi	r23, 0x12	; 18
 496:	8a e7       	ldi	r24, 0x7A	; 122
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <__udivmodsi4>
 49e:	21 50       	subi	r18, 0x01	; 1
 4a0:	31 09       	sbc	r19, r1
 4a2:	29 b9       	out	0x09, r18	; 9
 4a4:	80 b5       	in	r24, 0x20	; 32
 4a6:	80 68       	ori	r24, 0x80	; 128
 4a8:	80 bd       	out	0x20, r24	; 32
 4aa:	f8 01       	movw	r30, r16
 4ac:	83 81       	ldd	r24, Z+3	; 0x03
 4ae:	81 30       	cpi	r24, 0x01	; 1
 4b0:	69 f0       	breq	.+26     	; 0x4cc <__EEPROM_REGION_LENGTH__+0xcc>
 4b2:	28 f0       	brcs	.+10     	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	a1 f0       	breq	.+40     	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
 4b8:	83 30       	cpi	r24, 0x03	; 3
 4ba:	e1 f0       	breq	.+56     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
 4bc:	21 c0       	rjmp	.+66     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4be:	8a b1       	in	r24, 0x0a	; 10
 4c0:	8b 7f       	andi	r24, 0xFB	; 251
 4c2:	8a b9       	out	0x0a, r24	; 10
 4c4:	80 b5       	in	r24, 0x20	; 32
 4c6:	89 7f       	andi	r24, 0xF9	; 249
 4c8:	80 bd       	out	0x20, r24	; 32
 4ca:	1a c0       	rjmp	.+52     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4cc:	8a b1       	in	r24, 0x0a	; 10
 4ce:	8b 7f       	andi	r24, 0xFB	; 251
 4d0:	8a b9       	out	0x0a, r24	; 10
 4d2:	80 b5       	in	r24, 0x20	; 32
 4d4:	8b 7f       	andi	r24, 0xFB	; 251
 4d6:	80 bd       	out	0x20, r24	; 32
 4d8:	80 b5       	in	r24, 0x20	; 32
 4da:	82 60       	ori	r24, 0x02	; 2
 4dc:	80 bd       	out	0x20, r24	; 32
 4de:	10 c0       	rjmp	.+32     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4e0:	8a b1       	in	r24, 0x0a	; 10
 4e2:	8b 7f       	andi	r24, 0xFB	; 251
 4e4:	8a b9       	out	0x0a, r24	; 10
 4e6:	80 b5       	in	r24, 0x20	; 32
 4e8:	8d 7f       	andi	r24, 0xFD	; 253
 4ea:	80 bd       	out	0x20, r24	; 32
 4ec:	80 b5       	in	r24, 0x20	; 32
 4ee:	84 60       	ori	r24, 0x04	; 4
 4f0:	80 bd       	out	0x20, r24	; 32
 4f2:	06 c0       	rjmp	.+12     	; 0x500 <__EEPROM_REGION_LENGTH__+0x100>
 4f4:	8a b1       	in	r24, 0x0a	; 10
 4f6:	8b 7f       	andi	r24, 0xFB	; 251
 4f8:	8a b9       	out	0x0a, r24	; 10
 4fa:	80 b5       	in	r24, 0x20	; 32
 4fc:	86 60       	ori	r24, 0x06	; 6
 4fe:	80 bd       	out	0x20, r24	; 32
 500:	80 b5       	in	r24, 0x20	; 32
 502:	80 68       	ori	r24, 0x80	; 128
 504:	80 bd       	out	0x20, r24	; 32
 506:	90 b5       	in	r25, 0x20	; 32
 508:	f8 01       	movw	r30, r16
 50a:	84 81       	ldd	r24, Z+4	; 0x04
 50c:	89 2b       	or	r24, r25
 50e:	80 bd       	out	0x20, r24	; 32
 510:	80 b5       	in	r24, 0x20	; 32
 512:	80 68       	ori	r24, 0x80	; 128
 514:	80 bd       	out	0x20, r24	; 32
 516:	90 b5       	in	r25, 0x20	; 32
 518:	87 81       	ldd	r24, Z+7	; 0x07
 51a:	89 2b       	or	r24, r25
 51c:	80 bd       	out	0x20, r24	; 32
 51e:	80 85       	ldd	r24, Z+8	; 0x08
 520:	88 23       	and	r24, r24
 522:	29 f1       	breq	.+74     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 524:	9a b1       	in	r25, 0x0a	; 10
 526:	89 2b       	or	r24, r25
 528:	8a b9       	out	0x0a, r24	; 10
 52a:	8f b7       	in	r24, 0x3f	; 63
 52c:	80 68       	ori	r24, 0x80	; 128
 52e:	8f bf       	out	0x3f, r24	; 63
 530:	80 85       	ldd	r24, Z+8	; 0x08
 532:	80 34       	cpi	r24, 0x40	; 64
 534:	a9 f0       	breq	.+42     	; 0x560 <__EEPROM_REGION_LENGTH__+0x160>
 536:	80 38       	cpi	r24, 0x80	; 128
 538:	19 f0       	breq	.+6      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 53a:	80 32       	cpi	r24, 0x20	; 32
 53c:	c1 f4       	brne	.+48     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 53e:	08 c0       	rjmp	.+16     	; 0x550 <__EEPROM_REGION_LENGTH__+0x150>
 540:	f8 01       	movw	r30, r16
 542:	81 85       	ldd	r24, Z+9	; 0x09
 544:	92 85       	ldd	r25, Z+10	; 0x0a
 546:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <GP_IRQ_CALL+0x1>
 54a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <GP_IRQ_CALL>
 54e:	0f c0       	rjmp	.+30     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 550:	f8 01       	movw	r30, r16
 552:	81 85       	ldd	r24, Z+9	; 0x09
 554:	92 85       	ldd	r25, Z+10	; 0x0a
 556:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <GP_IRQ_CALL+0x3>
 55a:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <GP_IRQ_CALL+0x2>
 55e:	07 c0       	rjmp	.+14     	; 0x56e <__EEPROM_REGION_LENGTH__+0x16e>
 560:	f8 01       	movw	r30, r16
 562:	81 85       	ldd	r24, Z+9	; 0x09
 564:	92 85       	ldd	r25, Z+10	; 0x0a
 566:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <GP_IRQ_CALL+0x5>
 56a:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <GP_IRQ_CALL+0x4>
 56e:	f8 01       	movw	r30, r16
 570:	80 81       	ld	r24, Z
 572:	9a b1       	in	r25, 0x0a	; 10
 574:	89 2b       	or	r24, r25
 576:	8a b9       	out	0x0a, r24	; 10
 578:	82 81       	ldd	r24, Z+2	; 0x02
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	61 f4       	brne	.+24     	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
 57e:	81 e0       	ldi	r24, 0x01	; 1
 580:	89 83       	std	Y+1, r24	; 0x01
 582:	82 e0       	ldi	r24, 0x02	; 2
 584:	8a 83       	std	Y+2, r24	; 0x02
 586:	be 01       	movw	r22, r28
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	86 e3       	ldi	r24, 0x36	; 54
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
 594:	0c c0       	rjmp	.+24     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 596:	83 30       	cpi	r24, 0x03	; 3
 598:	51 f4       	brne	.+20     	; 0x5ae <__EEPROM_REGION_LENGTH__+0x1ae>
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	89 83       	std	Y+1, r24	; 0x01
 59e:	8a 83       	std	Y+2, r24	; 0x02
 5a0:	be 01       	movw	r22, r28
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	86 e3       	ldi	r24, 0x36	; 54
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <MCAL_GPIO_Init>
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	1f 91       	pop	r17
 5b8:	0f 91       	pop	r16
 5ba:	08 95       	ret

000005bc <MCAL_USART_SendData>:
 5bc:	61 11       	cpse	r22, r1
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <MCAL_USART_SendData+0x8>
 5c0:	5d 9b       	sbis	0x0b, 5	; 11
 5c2:	fe cf       	rjmp	.-4      	; 0x5c0 <MCAL_USART_SendData+0x4>
 5c4:	8c b9       	out	0x0c, r24	; 12
 5c6:	08 95       	ret

000005c8 <__vector_13>:

//-------------------------------------------------ISR functions-----------------------------------------------

void __vector_13 (void) __attribute__((signal));
void __vector_13 (void)
{
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	ef 93       	push	r30
 5e8:	ff 93       	push	r31
	
	GP_IRQ_CALL[0]();
 5ea:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <GP_IRQ_CALL>
 5ee:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <GP_IRQ_CALL+0x1>
 5f2:	09 95       	icall
}
 5f4:	ff 91       	pop	r31
 5f6:	ef 91       	pop	r30
 5f8:	bf 91       	pop	r27
 5fa:	af 91       	pop	r26
 5fc:	9f 91       	pop	r25
 5fe:	8f 91       	pop	r24
 600:	7f 91       	pop	r23
 602:	6f 91       	pop	r22
 604:	5f 91       	pop	r21
 606:	4f 91       	pop	r20
 608:	3f 91       	pop	r19
 60a:	2f 91       	pop	r18
 60c:	0f 90       	pop	r0
 60e:	0f be       	out	0x3f, r0	; 63
 610:	0f 90       	pop	r0
 612:	1f 90       	pop	r1
 614:	18 95       	reti

00000616 <__vector_14>:

void __vector_14 (void) __attribute__((signal));
void __vector_14 (void)
{
 616:	1f 92       	push	r1
 618:	0f 92       	push	r0
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	0f 92       	push	r0
 61e:	11 24       	eor	r1, r1
 620:	2f 93       	push	r18
 622:	3f 93       	push	r19
 624:	4f 93       	push	r20
 626:	5f 93       	push	r21
 628:	6f 93       	push	r22
 62a:	7f 93       	push	r23
 62c:	8f 93       	push	r24
 62e:	9f 93       	push	r25
 630:	af 93       	push	r26
 632:	bf 93       	push	r27
 634:	ef 93       	push	r30
 636:	ff 93       	push	r31
	
	GP_IRQ_CALL[1]();
 638:	e0 91 67 00 	lds	r30, 0x0067	; 0x800067 <GP_IRQ_CALL+0x2>
 63c:	f0 91 68 00 	lds	r31, 0x0068	; 0x800068 <GP_IRQ_CALL+0x3>
 640:	09 95       	icall
}
 642:	ff 91       	pop	r31
 644:	ef 91       	pop	r30
 646:	bf 91       	pop	r27
 648:	af 91       	pop	r26
 64a:	9f 91       	pop	r25
 64c:	8f 91       	pop	r24
 64e:	7f 91       	pop	r23
 650:	6f 91       	pop	r22
 652:	5f 91       	pop	r21
 654:	4f 91       	pop	r20
 656:	3f 91       	pop	r19
 658:	2f 91       	pop	r18
 65a:	0f 90       	pop	r0
 65c:	0f be       	out	0x3f, r0	; 63
 65e:	0f 90       	pop	r0
 660:	1f 90       	pop	r1
 662:	18 95       	reti

00000664 <__vector_15>:

void __vector_15 (void) __attribute__((signal));
void __vector_15 (void)
{
 664:	1f 92       	push	r1
 666:	0f 92       	push	r0
 668:	0f b6       	in	r0, 0x3f	; 63
 66a:	0f 92       	push	r0
 66c:	11 24       	eor	r1, r1
 66e:	2f 93       	push	r18
 670:	3f 93       	push	r19
 672:	4f 93       	push	r20
 674:	5f 93       	push	r21
 676:	6f 93       	push	r22
 678:	7f 93       	push	r23
 67a:	8f 93       	push	r24
 67c:	9f 93       	push	r25
 67e:	af 93       	push	r26
 680:	bf 93       	push	r27
 682:	ef 93       	push	r30
 684:	ff 93       	push	r31
	
	GP_IRQ_CALL[2]();
 686:	e0 91 69 00 	lds	r30, 0x0069	; 0x800069 <GP_IRQ_CALL+0x4>
 68a:	f0 91 6a 00 	lds	r31, 0x006A	; 0x80006a <GP_IRQ_CALL+0x5>
 68e:	09 95       	icall
}
 690:	ff 91       	pop	r31
 692:	ef 91       	pop	r30
 694:	bf 91       	pop	r27
 696:	af 91       	pop	r26
 698:	9f 91       	pop	r25
 69a:	8f 91       	pop	r24
 69c:	7f 91       	pop	r23
 69e:	6f 91       	pop	r22
 6a0:	5f 91       	pop	r21
 6a2:	4f 91       	pop	r20
 6a4:	3f 91       	pop	r19
 6a6:	2f 91       	pop	r18
 6a8:	0f 90       	pop	r0
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	0f 90       	pop	r0
 6ae:	1f 90       	pop	r1
 6b0:	18 95       	reti

000006b2 <__udivmodsi4>:
 6b2:	a1 e2       	ldi	r26, 0x21	; 33
 6b4:	1a 2e       	mov	r1, r26
 6b6:	aa 1b       	sub	r26, r26
 6b8:	bb 1b       	sub	r27, r27
 6ba:	fd 01       	movw	r30, r26
 6bc:	0d c0       	rjmp	.+26     	; 0x6d8 <__udivmodsi4_ep>

000006be <__udivmodsi4_loop>:
 6be:	aa 1f       	adc	r26, r26
 6c0:	bb 1f       	adc	r27, r27
 6c2:	ee 1f       	adc	r30, r30
 6c4:	ff 1f       	adc	r31, r31
 6c6:	a2 17       	cp	r26, r18
 6c8:	b3 07       	cpc	r27, r19
 6ca:	e4 07       	cpc	r30, r20
 6cc:	f5 07       	cpc	r31, r21
 6ce:	20 f0       	brcs	.+8      	; 0x6d8 <__udivmodsi4_ep>
 6d0:	a2 1b       	sub	r26, r18
 6d2:	b3 0b       	sbc	r27, r19
 6d4:	e4 0b       	sbc	r30, r20
 6d6:	f5 0b       	sbc	r31, r21

000006d8 <__udivmodsi4_ep>:
 6d8:	66 1f       	adc	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	1a 94       	dec	r1
 6e2:	69 f7       	brne	.-38     	; 0x6be <__udivmodsi4_loop>
 6e4:	60 95       	com	r22
 6e6:	70 95       	com	r23
 6e8:	80 95       	com	r24
 6ea:	90 95       	com	r25
 6ec:	9b 01       	movw	r18, r22
 6ee:	ac 01       	movw	r20, r24
 6f0:	bd 01       	movw	r22, r26
 6f2:	cf 01       	movw	r24, r30
 6f4:	08 95       	ret

000006f6 <_exit>:
 6f6:	f8 94       	cli

000006f8 <__stop_program>:
 6f8:	ff cf       	rjmp	.-2      	; 0x6f8 <__stop_program>

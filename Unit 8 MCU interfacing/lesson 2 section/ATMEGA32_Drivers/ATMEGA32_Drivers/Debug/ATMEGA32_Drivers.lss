
ATMEGA32_Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000054c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000054c  000005e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800078  00800078  000005f8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000628  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119b  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000920  00000000  00000000  0000190f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000097a  00000000  00000000  0000222f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000065e  00000000  00000000  00002dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b1  00000000  00000000  00003432  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  000039e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e4       	ldi	r30, 0x4C	; 76
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e7       	ldi	r26, 0x78	; 120
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 37       	cpi	r26, 0x7A	; 122
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 f5 00 	call	0x1ea	; 0x1ea <main>
  8a:	0c 94 a4 02 	jmp	0x548	; 0x548 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_lcd_kick>:
void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
}

void LCD_lcd_kick(){
	LCD_CTRL |= (1 << EN_SWITCH);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	88 60       	ori	r24, 0x08	; 8
  96:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	83 ed       	ldi	r24, 0xD3	; 211
  9a:	90 e3       	ldi	r25, 0x30	; 48
  9c:	01 97       	sbiw	r24, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <LCD_lcd_kick+0xa>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <LCD_lcd_kick+0x10>
  a2:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
  a4:	88 b3       	in	r24, 0x18	; 24
  a6:	87 7f       	andi	r24, 0xF7	; 247
  a8:	88 bb       	out	0x18, r24	; 24
  aa:	08 95       	ret

000000ac <LCD_check_lcd_isbusy>:
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
}

void LCD_check_lcd_isbusy(){
	DataDir_LCD_PORT &= ~(0xFF<<DATA_shift);
  ac:	8a b3       	in	r24, 0x1a	; 26
  ae:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1 << RW_SWITCH);
  b0:	88 b3       	in	r24, 0x18	; 24
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1 << RS_SWITCH);
  b6:	88 b3       	in	r24, 0x18	; 24
  b8:	8d 7f       	andi	r24, 0xFD	; 253
  ba:	88 bb       	out	0x18, r24	; 24
	LCD_lcd_kick();
  bc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
	DataDir_LCD_PORT |= (0xFF<<DATA_shift);
  c0:	8a b3       	in	r24, 0x1a	; 26
  c2:	8f ef       	ldi	r24, 0xFF	; 255
  c4:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1 << RW_SWITCH);
  c6:	88 b3       	in	r24, 0x18	; 24
  c8:	8b 7f       	andi	r24, 0xFB	; 251
  ca:	88 bb       	out	0x18, r24	; 24
  cc:	08 95       	ret

000000ce <LCD_WRITE_COMMAND>:
	
}


void LCD_WRITE_COMMAND(unsigned char command){
  ce:	cf 93       	push	r28
  d0:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
  d2:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
		LCD_PORT = command;
  d6:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH)); 
  d8:	88 b3       	in	r24, 0x18	; 24
  da:	89 7f       	andi	r24, 0xF9	; 249
  dc:	88 bb       	out	0x18, r24	; 24
  de:	89 ef       	ldi	r24, 0xF9	; 249
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	01 97       	sbiw	r24, 0x01	; 1
  e4:	f1 f7       	brne	.-4      	; 0xe2 <LCD_WRITE_COMMAND+0x14>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <LCD_WRITE_COMMAND+0x1a>
  e8:	00 00       	nop
		_delay_ms(1);
		LCD_lcd_kick();
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_lcd_kick ();
		LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}
  ee:	cf 91       	pop	r28
  f0:	08 95       	ret

000000f2 <LCD_clear_screen>:


#include "lcd.h"

void LCD_clear_screen(){
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
  f8:	08 95       	ret

000000fa <LCD_GOTO_XY>:
	LCD_CTRL |= (1 << EN_SWITCH);
	_delay_ms(50);
	LCD_CTRL &= ~(1 << EN_SWITCH);
}

void LCD_GOTO_XY(unsigned char line, unsigned char position){
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c8 2f       	mov	r28, r24
 100:	d6 2f       	mov	r29, r22
	if (line == 1)
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	31 f4       	brne	.+12     	; 0x112 <LCD_GOTO_XY+0x18>
	{
		if (position < 16 && position >= 0)
 106:	60 31       	cpi	r22, 0x10	; 16
 108:	20 f4       	brcc	.+8      	; 0x112 <LCD_GOTO_XY+0x18>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW+position);
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	86 0f       	add	r24, r22
 10e:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 112:	c2 30       	cpi	r28, 0x02	; 2
 114:	31 f4       	brne	.+12     	; 0x122 <LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 116:	d0 31       	cpi	r29, 0x10	; 16
 118:	20 f4       	brcc	.+8      	; 0x122 <LCD_GOTO_XY+0x28>
		{
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW+position);
 11a:	80 ec       	ldi	r24, 0xC0	; 192
 11c:	8d 0f       	add	r24, r29
 11e:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
		}
	}
}
 122:	df 91       	pop	r29
 124:	cf 91       	pop	r28
 126:	08 95       	ret

00000128 <LCD_INIT>:
 128:	87 e8       	ldi	r24, 0x87	; 135
 12a:	93 e1       	ldi	r25, 0x13	; 19
 12c:	01 97       	sbiw	r24, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <LCD_INIT+0x4>
 130:	00 c0       	rjmp	.+0      	; 0x132 <LCD_INIT+0xa>
 132:	00 00       	nop

void LCD_INIT(){
	_delay_ms(20);
	DataDir_LCD_CTRL |= (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 134:	87 b3       	in	r24, 0x17	; 23
 136:	8e 60       	ori	r24, 0x0E	; 14
 138:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~ (1<<EN_SWITCH | 1<<RS_SWITCH | 1<<RW_SWITCH);
 13a:	88 b3       	in	r24, 0x18	; 24
 13c:	81 7f       	andi	r24, 0xF1	; 241
 13e:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 140:	8f ef       	ldi	r24, 0xFF	; 255
 142:	8a bb       	out	0x1a, r24	; 26
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	9e e0       	ldi	r25, 0x0E	; 14
 148:	01 97       	sbiw	r24, 0x01	; 1
 14a:	f1 f7       	brne	.-4      	; 0x148 <LCD_INIT+0x20>
 14c:	00 c0       	rjmp	.+0      	; 0x14e <LCD_INIT+0x26>
 14e:	00 00       	nop
	_delay_ms(15);
	LCD_clear_screen();
 150:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
		//LCD_WRITE_COMMAND(0x06);              /* Increment cursor (shift cursor to right)*/
		//LCD_WRITE_COMMAND(0x01);
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE); 
 15a:	86 e0       	ldi	r24, 0x06	; 6
 15c:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 160:	80 e8       	ldi	r24, 0x80	; 128
 162:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);	
 166:	8f e0       	ldi	r24, 0x0F	; 15
 168:	0e 94 67 00 	call	0xce	; 0xce <LCD_WRITE_COMMAND>
 16c:	08 95       	ret

0000016e <LCD_WRITE_CHAR>:
		LCD_CTRL &= ~ ((1<<RW_SWITCH)|(1<<RS_SWITCH));
		LCD_lcd_kick();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character){
 16e:	cf 93       	push	r28
 170:	c8 2f       	mov	r28, r24
	#ifdef EIGHT_BIT_MODE
		LCD_check_lcd_isbusy();
 172:	0e 94 56 00 	call	0xac	; 0xac <LCD_check_lcd_isbusy>
		LCD_PORT = character;
 176:	cb bb       	out	0x1b, r28	; 27
		LCD_CTRL &= ~(1 << RW_SWITCH);
 178:	88 b3       	in	r24, 0x18	; 24
 17a:	8b 7f       	andi	r24, 0xFB	; 251
 17c:	88 bb       	out	0x18, r24	; 24
		LCD_CTRL |= (1 << RS_SWITCH);
 17e:	88 b3       	in	r24, 0x18	; 24
 180:	82 60       	ori	r24, 0x02	; 2
 182:	88 bb       	out	0x18, r24	; 24
 184:	89 ef       	ldi	r24, 0xF9	; 249
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_WRITE_CHAR+0x1a>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_WRITE_CHAR+0x20>
 18e:	00 00       	nop
		_delay_ms(1); 
		LCD_lcd_kick();
 190:	0e 94 49 00 	call	0x92	; 0x92 <LCD_lcd_kick>
		LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
		LCD_CTRL |= 1<<RS_SWITCH; //turn RS ON for Data mode.
		LCD_CTRL &= ~ (1<<RW_SWITCH);//turn RW off so you can write.
		LCD_lcd_kick ();
	#endif
}
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char* string){
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	8c 01       	movw	r16, r24
	int count = 0;
 1a2:	c0 e0       	ldi	r28, 0x00	; 0
 1a4:	d0 e0       	ldi	r29, 0x00	; 0
	while (*string > 0){
 1a6:	18 c0       	rjmp	.+48     	; 0x1d8 <LCD_WRITE_STRING+0x40>
		count++;
 1a8:	21 96       	adiw	r28, 0x01	; 1
		LCD_WRITE_CHAR(*string++);
 1aa:	0f 5f       	subi	r16, 0xFF	; 255
 1ac:	1f 4f       	sbci	r17, 0xFF	; 255
 1ae:	0e 94 b7 00 	call	0x16e	; 0x16e <LCD_WRITE_CHAR>
		if (count == 16)
 1b2:	c0 31       	cpi	r28, 0x10	; 16
 1b4:	d1 05       	cpc	r29, r1
 1b6:	29 f4       	brne	.+10     	; 0x1c2 <LCD_WRITE_STRING+0x2a>
		{
			LCD_GOTO_XY(2,0);
 1b8:	60 e0       	ldi	r22, 0x00	; 0
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
 1c0:	0b c0       	rjmp	.+22     	; 0x1d8 <LCD_WRITE_STRING+0x40>
		}
		else if (count == 32)
 1c2:	c0 32       	cpi	r28, 0x20	; 32
 1c4:	d1 05       	cpc	r29, r1
 1c6:	41 f4       	brne	.+16     	; 0x1d8 <LCD_WRITE_STRING+0x40>
		{
			LCD_clear_screen();
 1c8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 1cc:	60 e0       	ldi	r22, 0x00	; 0
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
			count = 0;
 1d4:	c0 e0       	ldi	r28, 0x00	; 0
 1d6:	d0 e0       	ldi	r29, 0x00	; 0
	#endif
}

void LCD_WRITE_STRING(char* string){
	int count = 0;
	while (*string > 0){
 1d8:	f8 01       	movw	r30, r16
 1da:	80 81       	ld	r24, Z
 1dc:	81 11       	cpse	r24, r1
 1de:	e4 cf       	rjmp	.-56     	; 0x1a8 <LCD_WRITE_STRING+0x10>
			LCD_clear_screen();
			LCD_GOTO_XY(1,0);
			count = 0;
		}
	}
 1e0:	df 91       	pop	r29
 1e2:	cf 91       	pop	r28
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <main>:
#include "GPIO_Driver.h"
#include "USART_Driver.h"
#include "lcd.h"

int main(void)
{
 1ea:	cf 93       	push	r28
 1ec:	df 93       	push	r29
 1ee:	cd b7       	in	r28, 0x3d	; 61
 1f0:	de b7       	in	r29, 0x3e	; 62
 1f2:	c2 5d       	subi	r28, 0xD2	; 210
 1f4:	d1 09       	sbc	r29, r1
 1f6:	0f b6       	in	r0, 0x3f	; 63
 1f8:	f8 94       	cli
 1fa:	de bf       	out	0x3e, r29	; 62
 1fc:	0f be       	out	0x3f, r0	; 63
 1fe:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    char x[200];
    LCD_INIT();
 200:	0e 94 94 00 	call	0x128	; 0x128 <LCD_INIT>
    LCD_clear_screen();
 204:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_clear_screen>
 
    LCD_WRITE_STRING("UART test");
 208:	80 e6       	ldi	r24, 0x60	; 96
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_WRITE_STRING>
    
    USART_CONFIG usart_cfg;
	usart_cfg.Baud_Rate = USART_BAUD_RATE_9600;
 210:	80 e8       	ldi	r24, 0x80	; 128
 212:	95 e2       	ldi	r25, 0x25	; 37
 214:	c2 53       	subi	r28, 0x32	; 50
 216:	df 4f       	sbci	r29, 0xFF	; 255
 218:	99 83       	std	Y+1, r25	; 0x01
 21a:	88 83       	st	Y, r24
 21c:	ce 5c       	subi	r28, 0xCE	; 206
 21e:	d0 40       	sbci	r29, 0x00	; 0
	usart_cfg.Mode = USART_MODE_TX_RX;
 220:	88 e1       	ldi	r24, 0x18	; 24
 222:	c7 53       	subi	r28, 0x37	; 55
 224:	df 4f       	sbci	r29, 0xFF	; 255
 226:	88 83       	st	Y, r24
 228:	c9 5c       	subi	r28, 0xC9	; 201
 22a:	d0 40       	sbci	r29, 0x00	; 0
	usart_cfg.Operating_Mode = USART_Operating_Mode_Asynch_Normal;
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	c5 53       	subi	r28, 0x35	; 53
 230:	df 4f       	sbci	r29, 0xFF	; 255
 232:	88 83       	st	Y, r24
 234:	cb 5c       	subi	r28, 0xCB	; 203
 236:	d0 40       	sbci	r29, 0x00	; 0
	usart_cfg.Data_Bits = USART_DATA_BITS_8;
 238:	83 e0       	ldi	r24, 0x03	; 3
 23a:	c4 53       	subi	r28, 0x34	; 52
 23c:	df 4f       	sbci	r29, 0xFF	; 255
 23e:	88 83       	st	Y, r24
 240:	cc 5c       	subi	r28, 0xCC	; 204
 242:	d0 40       	sbci	r29, 0x00	; 0
	usart_cfg.Stop_Bits = USART_STOP_BITS_1;
 244:	c3 53       	subi	r28, 0x33	; 51
 246:	df 4f       	sbci	r29, 0xFF	; 255
 248:	18 82       	st	Y, r1
 24a:	cd 5c       	subi	r28, 0xCD	; 205
 24c:	d0 40       	sbci	r29, 0x00	; 0
	usart_cfg.Parity = USART_PARITY_NONE;
 24e:	c0 53       	subi	r28, 0x30	; 48
 250:	df 4f       	sbci	r29, 0xFF	; 255
 252:	18 82       	st	Y, r1
 254:	c0 5d       	subi	r28, 0xD0	; 208
 256:	d0 40       	sbci	r29, 0x00	; 0
    
	MCAL_USART_Init(&usart_cfg);
 258:	ce 01       	movw	r24, r28
 25a:	87 53       	subi	r24, 0x37	; 55
 25c:	9f 4f       	sbci	r25, 0xFF	; 255
 25e:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <MCAL_USART_Init>
    MCAL_USART_Send_String("Mohamed Samir");
 262:	8a e6       	ldi	r24, 0x6A	; 106
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 5d 02 	call	0x4ba	; 0x4ba <MCAL_USART_Send_String>
    LCD_GOTO_XY(2,0);
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_GOTO_XY>
    while (1)
    {
	    MCAL_USART_Receive_String(&x);
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	0e 94 6f 02 	call	0x4de	; 0x4de <MCAL_USART_Receive_String>
	    LCD_WRITE_STRING(x);
 27a:	ce 01       	movw	r24, r28
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	0e 94 cc 00 	call	0x198	; 0x198 <LCD_WRITE_STRING>
 282:	f7 cf       	rjmp	.-18     	; 0x272 <main+0x88>

00000284 <MCAL_GPIO_Init>:
#include "GPIO_Driver.h"



void MCAL_GPIO_Init (GPIO_typedef* GPIOX , GPIO_PIN_CONFIG * pinconfig){
 284:	fc 01       	movw	r30, r24
 286:	db 01       	movw	r26, r22
	
	if(pinconfig->GPIO_Mode == GPIO_MODE_INPUT_FLOAT){
 288:	11 96       	adiw	r26, 0x01	; 1
 28a:	8c 91       	ld	r24, X
 28c:	11 97       	sbiw	r26, 0x01	; 1
 28e:	81 11       	cpse	r24, r1
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <MCAL_GPIO_Init+0x24>
		GPIOX->DDR &= ~(pinconfig->GPIO_Pin_Number);
 292:	8c 91       	ld	r24, X
 294:	80 95       	com	r24
 296:	91 81       	ldd	r25, Z+1	; 0x01
 298:	89 23       	and	r24, r25
 29a:	81 83       	std	Z+1, r24	; 0x01
		GPIOX->PORT &= ~(pinconfig->GPIO_Pin_Number);
 29c:	8c 91       	ld	r24, X
 29e:	80 95       	com	r24
 2a0:	92 81       	ldd	r25, Z+2	; 0x02
 2a2:	89 23       	and	r24, r25
 2a4:	82 83       	std	Z+2, r24	; 0x02
 2a6:	08 95       	ret
	}
	else if(pinconfig->GPIO_Mode == GPIO_MODE_INPUT_PU){
 2a8:	81 30       	cpi	r24, 0x01	; 1
 2aa:	51 f4       	brne	.+20     	; 0x2c0 <MCAL_GPIO_Init+0x3c>
		GPIOX->DDR &= ~(pinconfig->GPIO_Pin_Number);
 2ac:	8c 91       	ld	r24, X
 2ae:	80 95       	com	r24
 2b0:	91 81       	ldd	r25, Z+1	; 0x01
 2b2:	89 23       	and	r24, r25
 2b4:	81 83       	std	Z+1, r24	; 0x01
		GPIOX->PORT |= (pinconfig->GPIO_Pin_Number);
 2b6:	8c 91       	ld	r24, X
 2b8:	92 81       	ldd	r25, Z+2	; 0x02
 2ba:	89 2b       	or	r24, r25
 2bc:	82 83       	std	Z+2, r24	; 0x02
 2be:	08 95       	ret
	}
	else{
		GPIOX->DDR |= (pinconfig->GPIO_Pin_Number);
 2c0:	8c 91       	ld	r24, X
 2c2:	91 81       	ldd	r25, Z+1	; 0x01
 2c4:	89 2b       	or	r24, r25
 2c6:	81 83       	std	Z+1, r24	; 0x01
		GPIOX->PORT &= ~(pinconfig->GPIO_Pin_Number);
 2c8:	8c 91       	ld	r24, X
 2ca:	80 95       	com	r24
 2cc:	92 81       	ldd	r25, Z+2	; 0x02
 2ce:	89 23       	and	r24, r25
 2d0:	82 83       	std	Z+2, r24	; 0x02
 2d2:	08 95       	ret

000002d4 <MCAL_USART_Init>:
}
void MCAL_USART_DeInit(void){
	USART->UCSRB = 0;
	USART->UBRRL = 0;
	UCSRC = 0b10000110;
	USART->UCSRA = 0b00100000;
 2d4:	0f 93       	push	r16
 2d6:	1f 93       	push	r17
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	00 d0       	rcall	.+0      	; 0x2de <MCAL_USART_Init+0xa>
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	8c 01       	movw	r16, r24
 2e4:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__data_end+0x1>
 2e8:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__data_end>
 2ec:	fc 01       	movw	r30, r24
 2ee:	82 81       	ldd	r24, Z+2	; 0x02
 2f0:	9e ef       	ldi	r25, 0xFE	; 254
 2f2:	98 0f       	add	r25, r24
 2f4:	92 30       	cpi	r25, 0x02	; 2
 2f6:	f0 f4       	brcc	.+60     	; 0x334 <MCAL_USART_Init+0x60>
 2f8:	80 b5       	in	r24, 0x20	; 32
 2fa:	80 68       	ori	r24, 0x80	; 128
 2fc:	80 bd       	out	0x20, r24	; 32
 2fe:	90 b5       	in	r25, 0x20	; 32
 300:	81 81       	ldd	r24, Z+1	; 0x01
 302:	89 2b       	or	r24, r25
 304:	80 bd       	out	0x20, r24	; 32
 306:	80 b5       	in	r24, 0x20	; 32
 308:	80 64       	ori	r24, 0x40	; 64
 30a:	80 bd       	out	0x20, r24	; 32
 30c:	25 81       	ldd	r18, Z+5	; 0x05
 30e:	36 81       	ldd	r19, Z+6	; 0x06
 310:	c9 01       	movw	r24, r18
 312:	a0 e0       	ldi	r26, 0x00	; 0
 314:	b0 e0       	ldi	r27, 0x00	; 0
 316:	9c 01       	movw	r18, r24
 318:	ad 01       	movw	r20, r26
 31a:	22 0f       	add	r18, r18
 31c:	33 1f       	adc	r19, r19
 31e:	44 1f       	adc	r20, r20
 320:	55 1f       	adc	r21, r21
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	74 e2       	ldi	r23, 0x24	; 36
 326:	84 ef       	ldi	r24, 0xF4	; 244
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 82 02 	call	0x504	; 0x504 <__udivmodsi4>
 32e:	21 50       	subi	r18, 0x01	; 1
 330:	31 09       	sbc	r19, r1
 332:	51 c0       	rjmp	.+162    	; 0x3d6 <MCAL_USART_Init+0x102>
 334:	81 11       	cpse	r24, r1
 336:	26 c0       	rjmp	.+76     	; 0x384 <MCAL_USART_Init+0xb0>
 338:	80 b5       	in	r24, 0x20	; 32
 33a:	80 68       	ori	r24, 0x80	; 128
 33c:	80 bd       	out	0x20, r24	; 32
 33e:	80 b5       	in	r24, 0x20	; 32
 340:	8f 7b       	andi	r24, 0xBF	; 191
 342:	80 bd       	out	0x20, r24	; 32
 344:	8b b1       	in	r24, 0x0b	; 11
 346:	82 60       	ori	r24, 0x02	; 2
 348:	8b b9       	out	0x0b, r24	; 11
 34a:	f8 01       	movw	r30, r16
 34c:	25 81       	ldd	r18, Z+5	; 0x05
 34e:	36 81       	ldd	r19, Z+6	; 0x06
 350:	c9 01       	movw	r24, r18
 352:	a0 e0       	ldi	r26, 0x00	; 0
 354:	b0 e0       	ldi	r27, 0x00	; 0
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	aa 1f       	adc	r26, r26
 364:	bb 1f       	adc	r27, r27
 366:	9c 01       	movw	r18, r24
 368:	ad 01       	movw	r20, r26
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	44 1f       	adc	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	74 e2       	ldi	r23, 0x24	; 36
 376:	84 ef       	ldi	r24, 0xF4	; 244
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 82 02 	call	0x504	; 0x504 <__udivmodsi4>
 37e:	21 50       	subi	r18, 0x01	; 1
 380:	31 09       	sbc	r19, r1
 382:	29 c0       	rjmp	.+82     	; 0x3d6 <MCAL_USART_Init+0x102>
 384:	80 b5       	in	r24, 0x20	; 32
 386:	80 68       	ori	r24, 0x80	; 128
 388:	80 bd       	out	0x20, r24	; 32
 38a:	80 b5       	in	r24, 0x20	; 32
 38c:	8f 7b       	andi	r24, 0xBF	; 191
 38e:	80 bd       	out	0x20, r24	; 32
 390:	8b b1       	in	r24, 0x0b	; 11
 392:	8d 7f       	andi	r24, 0xFD	; 253
 394:	8b b9       	out	0x0b, r24	; 11
 396:	f8 01       	movw	r30, r16
 398:	25 81       	ldd	r18, Z+5	; 0x05
 39a:	36 81       	ldd	r19, Z+6	; 0x06
 39c:	c9 01       	movw	r24, r18
 39e:	a0 e0       	ldi	r26, 0x00	; 0
 3a0:	b0 e0       	ldi	r27, 0x00	; 0
 3a2:	88 0f       	add	r24, r24
 3a4:	99 1f       	adc	r25, r25
 3a6:	aa 1f       	adc	r26, r26
 3a8:	bb 1f       	adc	r27, r27
 3aa:	88 0f       	add	r24, r24
 3ac:	99 1f       	adc	r25, r25
 3ae:	aa 1f       	adc	r26, r26
 3b0:	bb 1f       	adc	r27, r27
 3b2:	9c 01       	movw	r18, r24
 3b4:	ad 01       	movw	r20, r26
 3b6:	22 0f       	add	r18, r18
 3b8:	33 1f       	adc	r19, r19
 3ba:	44 1f       	adc	r20, r20
 3bc:	55 1f       	adc	r21, r21
 3be:	22 0f       	add	r18, r18
 3c0:	33 1f       	adc	r19, r19
 3c2:	44 1f       	adc	r20, r20
 3c4:	55 1f       	adc	r21, r21
 3c6:	60 e0       	ldi	r22, 0x00	; 0
 3c8:	74 e2       	ldi	r23, 0x24	; 36
 3ca:	84 ef       	ldi	r24, 0xF4	; 244
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	0e 94 82 02 	call	0x504	; 0x504 <__udivmodsi4>
 3d2:	21 50       	subi	r18, 0x01	; 1
 3d4:	31 09       	sbc	r19, r1
 3d6:	29 b9       	out	0x09, r18	; 9
 3d8:	80 b5       	in	r24, 0x20	; 32
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	80 bd       	out	0x20, r24	; 32
 3de:	f8 01       	movw	r30, r16
 3e0:	83 81       	ldd	r24, Z+3	; 0x03
 3e2:	81 30       	cpi	r24, 0x01	; 1
 3e4:	69 f0       	breq	.+26     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3e6:	28 f0       	brcs	.+10     	; 0x3f2 <MCAL_USART_Init+0x11e>
 3e8:	82 30       	cpi	r24, 0x02	; 2
 3ea:	a1 f0       	breq	.+40     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 3ec:	83 30       	cpi	r24, 0x03	; 3
 3ee:	e1 f0       	breq	.+56     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3f0:	21 c0       	rjmp	.+66     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 3f2:	8a b1       	in	r24, 0x0a	; 10
 3f4:	8b 7f       	andi	r24, 0xFB	; 251
 3f6:	8a b9       	out	0x0a, r24	; 10
 3f8:	80 b5       	in	r24, 0x20	; 32
 3fa:	89 7f       	andi	r24, 0xF9	; 249
 3fc:	80 bd       	out	0x20, r24	; 32
 3fe:	1a c0       	rjmp	.+52     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 400:	8a b1       	in	r24, 0x0a	; 10
 402:	8b 7f       	andi	r24, 0xFB	; 251
 404:	8a b9       	out	0x0a, r24	; 10
 406:	80 b5       	in	r24, 0x20	; 32
 408:	8b 7f       	andi	r24, 0xFB	; 251
 40a:	80 bd       	out	0x20, r24	; 32
 40c:	80 b5       	in	r24, 0x20	; 32
 40e:	82 60       	ori	r24, 0x02	; 2
 410:	80 bd       	out	0x20, r24	; 32
 412:	10 c0       	rjmp	.+32     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 414:	8a b1       	in	r24, 0x0a	; 10
 416:	8b 7f       	andi	r24, 0xFB	; 251
 418:	8a b9       	out	0x0a, r24	; 10
 41a:	80 b5       	in	r24, 0x20	; 32
 41c:	8d 7f       	andi	r24, 0xFD	; 253
 41e:	80 bd       	out	0x20, r24	; 32
 420:	80 b5       	in	r24, 0x20	; 32
 422:	84 60       	ori	r24, 0x04	; 4
 424:	80 bd       	out	0x20, r24	; 32
 426:	06 c0       	rjmp	.+12     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 428:	8a b1       	in	r24, 0x0a	; 10
 42a:	8b 7f       	andi	r24, 0xFB	; 251
 42c:	8a b9       	out	0x0a, r24	; 10
 42e:	80 b5       	in	r24, 0x20	; 32
 430:	86 60       	ori	r24, 0x06	; 6
 432:	80 bd       	out	0x20, r24	; 32
 434:	80 b5       	in	r24, 0x20	; 32
 436:	80 68       	ori	r24, 0x80	; 128
 438:	80 bd       	out	0x20, r24	; 32
 43a:	90 b5       	in	r25, 0x20	; 32
 43c:	f8 01       	movw	r30, r16
 43e:	84 81       	ldd	r24, Z+4	; 0x04
 440:	89 2b       	or	r24, r25
 442:	80 bd       	out	0x20, r24	; 32
 444:	80 b5       	in	r24, 0x20	; 32
 446:	80 68       	ori	r24, 0x80	; 128
 448:	80 bd       	out	0x20, r24	; 32
 44a:	90 b5       	in	r25, 0x20	; 32
 44c:	87 81       	ldd	r24, Z+7	; 0x07
 44e:	89 2b       	or	r24, r25
 450:	80 bd       	out	0x20, r24	; 32
 452:	80 81       	ld	r24, Z
 454:	9a b1       	in	r25, 0x0a	; 10
 456:	89 2b       	or	r24, r25
 458:	8a b9       	out	0x0a, r24	; 10
 45a:	82 81       	ldd	r24, Z+2	; 0x02
 45c:	82 30       	cpi	r24, 0x02	; 2
 45e:	61 f4       	brne	.+24     	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	89 83       	std	Y+1, r24	; 0x01
 464:	82 e0       	ldi	r24, 0x02	; 2
 466:	8a 83       	std	Y+2, r24	; 0x02
 468:	be 01       	movw	r22, r28
 46a:	6f 5f       	subi	r22, 0xFF	; 255
 46c:	7f 4f       	sbci	r23, 0xFF	; 255
 46e:	86 e3       	ldi	r24, 0x36	; 54
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 42 01 	call	0x284	; 0x284 <MCAL_GPIO_Init>
 476:	0c c0       	rjmp	.+24     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 478:	83 30       	cpi	r24, 0x03	; 3
 47a:	51 f4       	brne	.+20     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 47c:	81 e0       	ldi	r24, 0x01	; 1
 47e:	89 83       	std	Y+1, r24	; 0x01
 480:	8a 83       	std	Y+2, r24	; 0x02
 482:	be 01       	movw	r22, r28
 484:	6f 5f       	subi	r22, 0xFF	; 255
 486:	7f 4f       	sbci	r23, 0xFF	; 255
 488:	86 e3       	ldi	r24, 0x36	; 54
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 42 01 	call	0x284	; 0x284 <MCAL_GPIO_Init>
 490:	0f 90       	pop	r0
 492:	0f 90       	pop	r0
 494:	df 91       	pop	r29
 496:	cf 91       	pop	r28
 498:	1f 91       	pop	r17
 49a:	0f 91       	pop	r16
 49c:	08 95       	ret

0000049e <MCAL_USART_ReceiveData>:
}
void MCAL_USART_ReceiveData( char* RXBuffer , enum polling_mechanism polling_EN){
	
	if(polling_EN == Enable){
 49e:	61 11       	cpse	r22, r1
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <MCAL_USART_ReceiveData+0x8>
		while(!(USART->UCSRA & (1<<7)));
 4a2:	5f 9b       	sbis	0x0b, 7	; 11
 4a4:	fe cf       	rjmp	.-4      	; 0x4a2 <MCAL_USART_ReceiveData+0x4>
	}
	*RXBuffer = USART->UDR ;
 4a6:	2c b1       	in	r18, 0x0c	; 12
 4a8:	fc 01       	movw	r30, r24
 4aa:	20 83       	st	Z, r18
 4ac:	08 95       	ret

000004ae <MCAL_USART_SendData>:
}
void MCAL_USART_SendData( char data , enum polling_mechanism polling_EN){
	if(polling_EN == Enable){
 4ae:	61 11       	cpse	r22, r1
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <MCAL_USART_SendData+0x8>
		while(!(USART->UCSRA & (1<<5)));
 4b2:	5d 9b       	sbis	0x0b, 5	; 11
 4b4:	fe cf       	rjmp	.-4      	; 0x4b2 <MCAL_USART_SendData+0x4>
	}
	USART->UDR = data;
 4b6:	8c b9       	out	0x0c, r24	; 12
 4b8:	08 95       	ret

000004ba <MCAL_USART_Send_String>:
}


void MCAL_USART_Send_String( char* TXBuffer){
 4ba:	cf 93       	push	r28
 4bc:	df 93       	push	r29
 4be:	ec 01       	movw	r28, r24
	while (*TXBuffer != '\0') {
 4c0:	04 c0       	rjmp	.+8      	; 0x4ca <MCAL_USART_Send_String+0x10>
		MCAL_USART_SendData(*TXBuffer,Enable);
 4c2:	60 e0       	ldi	r22, 0x00	; 0
 4c4:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_USART_SendData>
	    TXBuffer++;
 4c8:	21 96       	adiw	r28, 0x01	; 1
	USART->UDR = data;
}


void MCAL_USART_Send_String( char* TXBuffer){
	while (*TXBuffer != '\0') {
 4ca:	88 81       	ld	r24, Y
 4cc:	81 11       	cpse	r24, r1
 4ce:	f9 cf       	rjmp	.-14     	; 0x4c2 <MCAL_USART_Send_String+0x8>
		MCAL_USART_SendData(*TXBuffer,Enable);
	    TXBuffer++;
	}
	//to indicate end
	MCAL_USART_SendData('\r',Enable);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	8d e0       	ldi	r24, 0x0D	; 13
 4d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <MCAL_USART_SendData>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	08 95       	ret

000004de <MCAL_USART_Receive_String>:
void MCAL_USART_Receive_String( char* RXBuffer ){
 4de:	cf 93       	push	r28
 4e0:	df 93       	push	r29
 4e2:	ec 01       	movw	r28, r24
	MCAL_USART_ReceiveData(RXBuffer,Enable);
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	0e 94 4f 02 	call	0x49e	; 0x49e <MCAL_USART_ReceiveData>
	while (*RXBuffer != '\r') {
 4ea:	05 c0       	rjmp	.+10     	; 0x4f6 <MCAL_USART_Receive_String+0x18>
		RXBuffer++;
 4ec:	21 96       	adiw	r28, 0x01	; 1
		MCAL_USART_ReceiveData(RXBuffer,Enable);
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	ce 01       	movw	r24, r28
 4f2:	0e 94 4f 02 	call	0x49e	; 0x49e <MCAL_USART_ReceiveData>
	//to indicate end
	MCAL_USART_SendData('\r',Enable);
}
void MCAL_USART_Receive_String( char* RXBuffer ){
	MCAL_USART_ReceiveData(RXBuffer,Enable);
	while (*RXBuffer != '\r') {
 4f6:	88 81       	ld	r24, Y
 4f8:	8d 30       	cpi	r24, 0x0D	; 13
 4fa:	c1 f7       	brne	.-16     	; 0x4ec <MCAL_USART_Receive_String+0xe>
		RXBuffer++;
		MCAL_USART_ReceiveData(RXBuffer,Enable);
	}
	*RXBuffer = '\0';
 4fc:	18 82       	st	Y, r1
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	08 95       	ret

00000504 <__udivmodsi4>:
 504:	a1 e2       	ldi	r26, 0x21	; 33
 506:	1a 2e       	mov	r1, r26
 508:	aa 1b       	sub	r26, r26
 50a:	bb 1b       	sub	r27, r27
 50c:	fd 01       	movw	r30, r26
 50e:	0d c0       	rjmp	.+26     	; 0x52a <__udivmodsi4_ep>

00000510 <__udivmodsi4_loop>:
 510:	aa 1f       	adc	r26, r26
 512:	bb 1f       	adc	r27, r27
 514:	ee 1f       	adc	r30, r30
 516:	ff 1f       	adc	r31, r31
 518:	a2 17       	cp	r26, r18
 51a:	b3 07       	cpc	r27, r19
 51c:	e4 07       	cpc	r30, r20
 51e:	f5 07       	cpc	r31, r21
 520:	20 f0       	brcs	.+8      	; 0x52a <__udivmodsi4_ep>
 522:	a2 1b       	sub	r26, r18
 524:	b3 0b       	sbc	r27, r19
 526:	e4 0b       	sbc	r30, r20
 528:	f5 0b       	sbc	r31, r21

0000052a <__udivmodsi4_ep>:
 52a:	66 1f       	adc	r22, r22
 52c:	77 1f       	adc	r23, r23
 52e:	88 1f       	adc	r24, r24
 530:	99 1f       	adc	r25, r25
 532:	1a 94       	dec	r1
 534:	69 f7       	brne	.-38     	; 0x510 <__udivmodsi4_loop>
 536:	60 95       	com	r22
 538:	70 95       	com	r23
 53a:	80 95       	com	r24
 53c:	90 95       	com	r25
 53e:	9b 01       	movw	r18, r22
 540:	ac 01       	movw	r20, r24
 542:	bd 01       	movw	r22, r26
 544:	cf 01       	movw	r24, r30
 546:	08 95       	ret

00000548 <_exit>:
 548:	f8 94       	cli

0000054a <__stop_program>:
 54a:	ff cf       	rjmp	.-2      	; 0x54a <__stop_program>

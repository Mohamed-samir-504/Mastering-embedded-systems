
unit8_lesson5_drivers_SPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ec4  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800100c  0800100c  00011014  2**0
                  CONTENTS
  4 .ARM          00000000  0800100c  0800100c  00011014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800100c  08001014  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800100c  0800100c  0001100c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001010  08001010  00011010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00011014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000000  08001014  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08001014  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00011014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051f9  00000000  00000000  0001103d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000c85  00000000  00000000  00016236  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d54  00000000  00000000  00016ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000230  00000000  00000000  00017c10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001c8  00000000  00000000  00017e40  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00000d96  00000000  00000000  00018008  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000279c  00000000  00000000  00018d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a72f  00000000  00000000  0001b53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00025c69  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006f0  00000000  00000000  00025ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000fdc 	.word	0x08000fdc

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000fdc 	.word	0x08000fdc

08000170 <EXTI0_IRQHandler>:

//================== ISR Functions==========================================


void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	20000030 	.word	0x20000030

08000194 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	20000030 	.word	0x20000030

080001b8 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	20000030 	.word	0x20000030

080001dc <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	20000030 	.word	0x20000030

08000200 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	EXTI->PR |=(1<<4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	Gp_IRQ_Callback[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	20000030 	.word	0x20000030

08000224 <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler  (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<5 )   {EXTI->PR |=    (1<<5);     Gp_IRQ_Callback[5](); }
 8000228:	4b26      	ldr	r3, [pc, #152]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	f003 0320 	and.w	r3, r3, #32
 8000230:	2b00      	cmp	r3, #0
 8000232:	d008      	beq.n	8000246 <EXTI9_5_IRQHandler+0x22>
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 800023a:	f043 0320 	orr.w	r3, r3, #32
 800023e:	6153      	str	r3, [r2, #20]
 8000240:	4b21      	ldr	r3, [pc, #132]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4798      	blx	r3
	if(EXTI->PR & 1<<6 )   {EXTI->PR |=    (1<<6);     Gp_IRQ_Callback[6](); }
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000248:	695b      	ldr	r3, [r3, #20]
 800024a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800024e:	2b00      	cmp	r3, #0
 8000250:	d008      	beq.n	8000264 <EXTI9_5_IRQHandler+0x40>
 8000252:	4b1c      	ldr	r3, [pc, #112]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	4a1b      	ldr	r2, [pc, #108]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025c:	6153      	str	r3, [r2, #20]
 800025e:	4b1a      	ldr	r3, [pc, #104]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 8000260:	699b      	ldr	r3, [r3, #24]
 8000262:	4798      	blx	r3
	if(EXTI->PR & 1<<7)    {EXTI->PR |=    (1<<7);      Gp_IRQ_Callback[7](); }
 8000264:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800026c:	2b00      	cmp	r3, #0
 800026e:	d008      	beq.n	8000282 <EXTI9_5_IRQHandler+0x5e>
 8000270:	4b14      	ldr	r3, [pc, #80]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000276:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800027a:	6153      	str	r3, [r2, #20]
 800027c:	4b12      	ldr	r3, [pc, #72]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800027e:	69db      	ldr	r3, [r3, #28]
 8000280:	4798      	blx	r3
	if(EXTI->PR & 1<<8 )   {EXTI->PR |=    (1<<8);     Gp_IRQ_Callback[8](); }
 8000282:	4b10      	ldr	r3, [pc, #64]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800028a:	2b00      	cmp	r3, #0
 800028c:	d008      	beq.n	80002a0 <EXTI9_5_IRQHandler+0x7c>
 800028e:	4b0d      	ldr	r3, [pc, #52]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a0c      	ldr	r2, [pc, #48]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 8000294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000298:	6153      	str	r3, [r2, #20]
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 800029c:	6a1b      	ldr	r3, [r3, #32]
 800029e:	4798      	blx	r3
	if(EXTI->PR & 1<<9 )   {EXTI->PR |=    (1<<9);     Gp_IRQ_Callback[9](); }
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002a2:	695b      	ldr	r3, [r3, #20]
 80002a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d008      	beq.n	80002be <EXTI9_5_IRQHandler+0x9a>
 80002ac:	4b05      	ldr	r3, [pc, #20]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002ae:	695b      	ldr	r3, [r3, #20]
 80002b0:	4a04      	ldr	r2, [pc, #16]	; (80002c4 <EXTI9_5_IRQHandler+0xa0>)
 80002b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002b6:	6153      	str	r3, [r2, #20]
 80002b8:	4b03      	ldr	r3, [pc, #12]	; (80002c8 <EXTI9_5_IRQHandler+0xa4>)
 80002ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002bc:	4798      	blx	r3
}
 80002be:	bf00      	nop
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40010400 	.word	0x40010400
 80002c8:	20000030 	.word	0x20000030

080002cc <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler (void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	if(EXTI->PR & 1<<10 )   {EXTI->PR |=    (1<<10);     Gp_IRQ_Callback[10](); }
 80002d0:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d008      	beq.n	80002ee <EXTI15_10_IRQHandler+0x22>
 80002dc:	4b2a      	ldr	r3, [pc, #168]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002de:	695b      	ldr	r3, [r3, #20]
 80002e0:	4a29      	ldr	r2, [pc, #164]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002e6:	6153      	str	r3, [r2, #20]
 80002e8:	4b28      	ldr	r3, [pc, #160]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 80002ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80002ec:	4798      	blx	r3
	if(EXTI->PR & 1<<11 )   {EXTI->PR |=    (1<<11);     Gp_IRQ_Callback[11](); }
 80002ee:	4b26      	ldr	r3, [pc, #152]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002f0:	695b      	ldr	r3, [r3, #20]
 80002f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <EXTI15_10_IRQHandler+0x40>
 80002fa:	4b23      	ldr	r3, [pc, #140]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	4a22      	ldr	r2, [pc, #136]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000304:	6153      	str	r3, [r2, #20]
 8000306:	4b21      	ldr	r3, [pc, #132]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800030a:	4798      	blx	r3
	if(EXTI->PR & 1<<12 )   {EXTI->PR |=    (1<<12);     Gp_IRQ_Callback[12](); }
 800030c:	4b1e      	ldr	r3, [pc, #120]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800030e:	695b      	ldr	r3, [r3, #20]
 8000310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d008      	beq.n	800032a <EXTI15_10_IRQHandler+0x5e>
 8000318:	4b1b      	ldr	r3, [pc, #108]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031a:	695b      	ldr	r3, [r3, #20]
 800031c:	4a1a      	ldr	r2, [pc, #104]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800031e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000322:	6153      	str	r3, [r2, #20]
 8000324:	4b19      	ldr	r3, [pc, #100]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4798      	blx	r3
	if(EXTI->PR & 1<<13 )   {EXTI->PR |=    (1<<13);     Gp_IRQ_Callback[13](); }
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000332:	2b00      	cmp	r3, #0
 8000334:	d008      	beq.n	8000348 <EXTI15_10_IRQHandler+0x7c>
 8000336:	4b14      	ldr	r3, [pc, #80]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000338:	695b      	ldr	r3, [r3, #20]
 800033a:	4a13      	ldr	r2, [pc, #76]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800033c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000340:	6153      	str	r3, [r2, #20]
 8000342:	4b12      	ldr	r3, [pc, #72]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000346:	4798      	blx	r3
	if(EXTI->PR & 1<<14 )   {EXTI->PR |=    (1<<14);     Gp_IRQ_Callback[14](); }
 8000348:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800034a:	695b      	ldr	r3, [r3, #20]
 800034c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000350:	2b00      	cmp	r3, #0
 8000352:	d008      	beq.n	8000366 <EXTI15_10_IRQHandler+0x9a>
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000356:	695b      	ldr	r3, [r3, #20]
 8000358:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 800035a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035e:	6153      	str	r3, [r2, #20]
 8000360:	4b0a      	ldr	r3, [pc, #40]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000364:	4798      	blx	r3
	if(EXTI->PR & 1<<15 )   {EXTI->PR |=    (1<<15);     Gp_IRQ_Callback[15](); }
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000368:	695b      	ldr	r3, [r3, #20]
 800036a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800036e:	2b00      	cmp	r3, #0
 8000370:	d008      	beq.n	8000384 <EXTI15_10_IRQHandler+0xb8>
 8000372:	4b05      	ldr	r3, [pc, #20]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000374:	695b      	ldr	r3, [r3, #20]
 8000376:	4a04      	ldr	r2, [pc, #16]	; (8000388 <EXTI15_10_IRQHandler+0xbc>)
 8000378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800037c:	6153      	str	r3, [r2, #20]
 800037e:	4b03      	ldr	r3, [pc, #12]	; (800038c <EXTI15_10_IRQHandler+0xc0>)
 8000380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000382:	4798      	blx	r3
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40010400 	.word	0x40010400
 800038c:	20000030 	.word	0x20000030

08000390 <GET_CRLH_Position>:
#include "STM32F103C6_GPIO_driver.h"

static uint8_t GET_CRLH_Position(uint16_t PinNumber)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	2b80      	cmp	r3, #128	; 0x80
 800039e:	d042      	beq.n	8000426 <GET_CRLH_Position+0x96>
 80003a0:	2b80      	cmp	r3, #128	; 0x80
 80003a2:	dc11      	bgt.n	80003c8 <GET_CRLH_Position+0x38>
 80003a4:	2b08      	cmp	r3, #8
 80003a6:	d036      	beq.n	8000416 <GET_CRLH_Position+0x86>
 80003a8:	2b08      	cmp	r3, #8
 80003aa:	dc06      	bgt.n	80003ba <GET_CRLH_Position+0x2a>
 80003ac:	2b02      	cmp	r3, #2
 80003ae:	d02e      	beq.n	800040e <GET_CRLH_Position+0x7e>
 80003b0:	2b04      	cmp	r3, #4
 80003b2:	d02e      	beq.n	8000412 <GET_CRLH_Position+0x82>
 80003b4:	2b01      	cmp	r3, #1
 80003b6:	d028      	beq.n	800040a <GET_CRLH_Position+0x7a>
 80003b8:	e047      	b.n	800044a <GET_CRLH_Position+0xba>
 80003ba:	2b20      	cmp	r3, #32
 80003bc:	d02f      	beq.n	800041e <GET_CRLH_Position+0x8e>
 80003be:	2b40      	cmp	r3, #64	; 0x40
 80003c0:	d02f      	beq.n	8000422 <GET_CRLH_Position+0x92>
 80003c2:	2b10      	cmp	r3, #16
 80003c4:	d029      	beq.n	800041a <GET_CRLH_Position+0x8a>
 80003c6:	e040      	b.n	800044a <GET_CRLH_Position+0xba>
 80003c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003cc:	d033      	beq.n	8000436 <GET_CRLH_Position+0xa6>
 80003ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80003d2:	dc09      	bgt.n	80003e8 <GET_CRLH_Position+0x58>
 80003d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80003d8:	d029      	beq.n	800042e <GET_CRLH_Position+0x9e>
 80003da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80003de:	d028      	beq.n	8000432 <GET_CRLH_Position+0xa2>
 80003e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80003e4:	d021      	beq.n	800042a <GET_CRLH_Position+0x9a>
 80003e6:	e030      	b.n	800044a <GET_CRLH_Position+0xba>
 80003e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003ec:	d027      	beq.n	800043e <GET_CRLH_Position+0xae>
 80003ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80003f2:	dc03      	bgt.n	80003fc <GET_CRLH_Position+0x6c>
 80003f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80003f8:	d01f      	beq.n	800043a <GET_CRLH_Position+0xaa>
 80003fa:	e026      	b.n	800044a <GET_CRLH_Position+0xba>
 80003fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000400:	d01f      	beq.n	8000442 <GET_CRLH_Position+0xb2>
 8000402:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000406:	d01e      	beq.n	8000446 <GET_CRLH_Position+0xb6>
 8000408:	e01f      	b.n	800044a <GET_CRLH_Position+0xba>
	{
	case GPIO_PIN0:
		return 0;
 800040a:	2300      	movs	r3, #0
 800040c:	e01e      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN1:
		return 4;
 800040e:	2304      	movs	r3, #4
 8000410:	e01c      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN2:
		return 8;
 8000412:	2308      	movs	r3, #8
 8000414:	e01a      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN3:
		return 12;
 8000416:	230c      	movs	r3, #12
 8000418:	e018      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN4:
		return 16;
 800041a:	2310      	movs	r3, #16
 800041c:	e016      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN5:
		return 20;
 800041e:	2314      	movs	r3, #20
 8000420:	e014      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN6:
		return 24;
 8000422:	2318      	movs	r3, #24
 8000424:	e012      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN7:
		return 28;
 8000426:	231c      	movs	r3, #28
 8000428:	e010      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN8:
		return 0;
 800042a:	2300      	movs	r3, #0
 800042c:	e00e      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN9:
		return 4;
 800042e:	2304      	movs	r3, #4
 8000430:	e00c      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN10:
		return 8;
 8000432:	2308      	movs	r3, #8
 8000434:	e00a      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN11:
		return 12;
 8000436:	230c      	movs	r3, #12
 8000438:	e008      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN12:
		return 16;
 800043a:	2310      	movs	r3, #16
 800043c:	e006      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN13:
		return 20;
 800043e:	2314      	movs	r3, #20
 8000440:	e004      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN14:
		return 24;
 8000442:	2318      	movs	r3, #24
 8000444:	e002      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	case GPIO_PIN15:
		return 28;
 8000446:	231c      	movs	r3, #28
 8000448:	e000      	b.n	800044c <GET_CRLH_Position+0xbc>
		break;
	default:
		return 0;
 800044a:	2300      	movs	r3, #0
		break;
	}

}
 800044c:	4618      	mov	r0, r3
 800044e:	370c      	adds	r7, #12
 8000450:	46bd      	mov	sp, r7
 8000452:	bc80      	pop	{r7}
 8000454:	4770      	bx	lr

08000456 <MCAL_GPIO_Init>:
 * @retval		-none
 * Note			-Stm32F103C6 MCU has GPIO A,B,C,D Modules
 * 				 But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */
void MCAL_GPIO_Init (GPIO_TypeDef* GPIOX , GPIO_PinConfig_t* pinconfig)
{
 8000456:	b580      	push	{r7, lr}
 8000458:	b086      	sub	sp, #24
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
 800045e:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t* config_register;
	config_register =(pinconfig->GPIO_PinNumber < GPIO_PIN8)? &GPIOX->CRL:&GPIOX->CRH;
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2bff      	cmp	r3, #255	; 0xff
 8000466:	d801      	bhi.n	800046c <MCAL_GPIO_Init+0x16>
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	e001      	b.n	8000470 <MCAL_GPIO_Init+0x1a>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3304      	adds	r3, #4
 8000470:	613b      	str	r3, [r7, #16]
	uint8_t pin_final_config = 0;
 8000472:	2300      	movs	r3, #0
 8000474:	75fb      	strb	r3, [r7, #23]
	uint8_t pin_position = GET_CRLH_Position(pinconfig->GPIO_PinNumber);
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	881b      	ldrh	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f7ff ff88 	bl	8000390 <GET_CRLH_Position>
 8000480:	4603      	mov	r3, r0
 8000482:	73fb      	strb	r3, [r7, #15]

	// clear CNFy[1:0] MODEy[1:0]
	(*config_register) &= ~(0xF << pin_position);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	7bfa      	ldrb	r2, [r7, #15]
 800048a:	210f      	movs	r1, #15
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	43d2      	mvns	r2, r2
 8000492:	401a      	ands	r2, r3
 8000494:	693b      	ldr	r3, [r7, #16]
 8000496:	601a      	str	r2, [r3, #0]

	//if pin is output
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	789b      	ldrb	r3, [r3, #2]
 800049c:	2b07      	cmp	r3, #7
 800049e:	d00b      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	789b      	ldrb	r3, [r3, #2]
 80004a4:	2b06      	cmp	r3, #6
 80004a6:	d007      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	789b      	ldrb	r3, [r3, #2]
	if((pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||
 80004ac:	2b05      	cmp	r3, #5
 80004ae:	d003      	beq.n	80004b8 <MCAL_GPIO_Init+0x62>
			(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(pinconfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80004b0:	683b      	ldr	r3, [r7, #0]
 80004b2:	789b      	ldrb	r3, [r3, #2]
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d10e      	bne.n	80004d6 <MCAL_GPIO_Init+0x80>

	{	//---------------------CNF[1:0](upper 2 bits)------------MODE[1:0](lower 2 bits)
		pin_final_config = (((pinconfig->GPIO_MODE - 4) << 2) | (pinconfig->GPIO_Output_Speed)) & 0x0F;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	789b      	ldrb	r3, [r3, #2]
 80004bc:	3b04      	subs	r3, #4
 80004be:	009b      	lsls	r3, r3, #2
 80004c0:	b25a      	sxtb	r2, r3
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	78db      	ldrb	r3, [r3, #3]
 80004c6:	b25b      	sxtb	r3, r3
 80004c8:	4313      	orrs	r3, r2
 80004ca:	b25b      	sxtb	r3, r3
 80004cc:	b2db      	uxtb	r3, r3
 80004ce:	f003 030f 	and.w	r3, r3, #15
 80004d2:	75fb      	strb	r3, [r7, #23]
 80004d4:	e031      	b.n	800053a <MCAL_GPIO_Init+0xe4>

	//if pin is input (MODE[1:0] == 00)
	else
	{
		//if pin is analog or floating
		if(pinconfig->GPIO_MODE == GPIO_MODE_Analog ||pinconfig->GPIO_MODE == GPIO_MODE_INPUT_FLOAT)
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	789b      	ldrb	r3, [r3, #2]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d003      	beq.n	80004e6 <MCAL_GPIO_Init+0x90>
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	789b      	ldrb	r3, [r3, #2]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d107      	bne.n	80004f6 <MCAL_GPIO_Init+0xa0>
		{
			pin_final_config = ((pinconfig->GPIO_MODE <<2) | (0x0)) & 0x0F;
 80004e6:	683b      	ldr	r3, [r7, #0]
 80004e8:	789b      	ldrb	r3, [r3, #2]
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	f003 030f 	and.w	r3, r3, #15
 80004f2:	75fb      	strb	r3, [r7, #23]
 80004f4:	e021      	b.n	800053a <MCAL_GPIO_Init+0xe4>
		}

		//if pin is Alternate function input (same as floating)
		else if (pinconfig->GPIO_MODE == GPIO_MODE_AF_INPUT)  //consider it as input floating
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	789b      	ldrb	r3, [r3, #2]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d107      	bne.n	800050e <MCAL_GPIO_Init+0xb8>
		{

			pin_final_config = (((pinconfig->GPIO_MODE  << 2) | (0x0)) & 0x0F);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	789b      	ldrb	r3, [r3, #2]
 8000502:	009b      	lsls	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	f003 030f 	and.w	r3, r3, #15
 800050a:	75fb      	strb	r3, [r7, #23]
 800050c:	e015      	b.n	800053a <MCAL_GPIO_Init+0xe4>
		}
		//if pin is PU or PD
		else
		{
			//because (GPIO_MODE_INPUT_PU value is 01 (same as in TRM)
			pin_final_config = (((GPIO_MODE_INPUT_PU  << 2) | (0x0)) & 0x0F);
 800050e:	2308      	movs	r3, #8
 8000510:	75fb      	strb	r3, [r7, #23]

			//pin is PU
			if(pinconfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	789b      	ldrb	r3, [r3, #2]
 8000516:	2b02      	cmp	r3, #2
 8000518:	d107      	bne.n	800052a <MCAL_GPIO_Init+0xd4>
			{
				//from TRM
				GPIOX->ODR |= pinconfig->GPIO_PinNumber;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	68db      	ldr	r3, [r3, #12]
 800051e:	683a      	ldr	r2, [r7, #0]
 8000520:	8812      	ldrh	r2, [r2, #0]
 8000522:	431a      	orrs	r2, r3
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	60da      	str	r2, [r3, #12]
 8000528:	e007      	b.n	800053a <MCAL_GPIO_Init+0xe4>
			}
			//pin is PD
			else
			{
				//From TRM
				GPIOX->ODR &= ~(pinconfig->GPIO_PinNumber);
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	8812      	ldrh	r2, [r2, #0]
 8000532:	43d2      	mvns	r2, r2
 8000534:	401a      	ands	r2, r3
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	60da      	str	r2, [r3, #12]
			}
		}
	}

	(*config_register) |= (pin_final_config << pin_position);
 800053a:	693b      	ldr	r3, [r7, #16]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	7df9      	ldrb	r1, [r7, #23]
 8000540:	7bfa      	ldrb	r2, [r7, #15]
 8000542:	fa01 f202 	lsl.w	r2, r1, r2
 8000546:	431a      	orrs	r2, r3
 8000548:	693b      	ldr	r3, [r7, #16]
 800054a:	601a      	str	r2, [r3, #0]

}
 800054c:	bf00      	nop
 800054e:	3718      	adds	r7, #24
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}

08000554 <MCAL_GPIO_WritePin>:
 * @param[in]	-Value: Pin value
 * @retval		-none
 * Note			-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOX , uint16_t PinNumber, uint8_t value)
{
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	460b      	mov	r3, r1
 800055e:	807b      	strh	r3, [r7, #2]
 8000560:	4613      	mov	r3, r2
 8000562:	707b      	strb	r3, [r7, #1]

	if (value != GPIO_PIN_RESET)
 8000564:	787b      	ldrb	r3, [r7, #1]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d003      	beq.n	8000572 <MCAL_GPIO_WritePin+0x1e>
		//alternative solution

		//in the BSRR register
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOX->BSRR = (uint32_t)PinNumber ;
 800056a:	887a      	ldrh	r2, [r7, #2]
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Reset the corresponding ODRx bit
		GPIOX->BRR = (uint32_t)PinNumber;
	}

}
 8000570:	e002      	b.n	8000578 <MCAL_GPIO_WritePin+0x24>
		GPIOX->BRR = (uint32_t)PinNumber;
 8000572:	887a      	ldrh	r2, [r7, #2]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	615a      	str	r2, [r3, #20]
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr
	...

08000584 <MCAL_RCC_GetSYSCLKFreq>:
//1110: SYSCLK divided by 256
//1111: SYSCLK divided by 512

const uint8_t AHB_Prescaler_Table[16] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9};

uint32_t MCAL_RCC_GetSYSCLKFreq(void){
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable

	switch ((RCC->CFGR >> 2)&0b11){
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <MCAL_RCC_GetSYSCLKFreq+0x30>)
 800058a:	685b      	ldr	r3, [r3, #4]
 800058c:	089b      	lsrs	r3, r3, #2
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b01      	cmp	r3, #1
 8000594:	d006      	beq.n	80005a4 <MCAL_RCC_GetSYSCLKFreq+0x20>
 8000596:	2b01      	cmp	r3, #1
 8000598:	d302      	bcc.n	80005a0 <MCAL_RCC_GetSYSCLKFreq+0x1c>
 800059a:	2b02      	cmp	r3, #2
 800059c:	d004      	beq.n	80005a8 <MCAL_RCC_GetSYSCLKFreq+0x24>
 800059e:	e005      	b.n	80005ac <MCAL_RCC_GetSYSCLKFreq+0x28>

	case 0:
		return HSI_CLK;
 80005a0:	4b05      	ldr	r3, [pc, #20]	; (80005b8 <MCAL_RCC_GetSYSCLKFreq+0x34>)
 80005a2:	e003      	b.n	80005ac <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 1:
		//todo need to calculate it (user should specify it)
		return HSE_CLK;
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80005a6:	e001      	b.n	80005ac <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	case 2:
		//todo need to calculate it
		return 16000000;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <MCAL_RCC_GetSYSCLKFreq+0x38>)
 80005aa:	e7ff      	b.n	80005ac <MCAL_RCC_GetSYSCLKFreq+0x28>
		break;

	}
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	40021000 	.word	0x40021000
 80005b8:	007a1200 	.word	0x007a1200
 80005bc:	00f42400 	.word	0x00f42400

080005c0 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void){
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	//Bits 7:4 HPRE: AHB prescaler
	return (MCAL_RCC_GetSYSCLKFreq() >> AHB_Prescaler_Table[(RCC->CFGR >> 4)&0b111]);
 80005c4:	f7ff ffde 	bl	8000584 <MCAL_RCC_GetSYSCLKFreq>
 80005c8:	4601      	mov	r1, r0
 80005ca:	4b05      	ldr	r3, [pc, #20]	; (80005e0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	091b      	lsrs	r3, r3, #4
 80005d0:	f003 0307 	and.w	r3, r3, #7
 80005d4:	4a03      	ldr	r2, [pc, #12]	; (80005e4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80005d6:	5cd3      	ldrb	r3, [r2, r3]
 80005d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80005dc:	4618      	mov	r0, r3
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	08000ffc 	.word	0x08000ffc

080005e8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0

	//Bits 10:8 PPRE1: APB low-speed prescaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 8)&0xF]);
 80005ec:	f7ff ffe8 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 80005f0:	4601      	mov	r1, r0
 80005f2:	4b05      	ldr	r3, [pc, #20]	; (8000608 <MCAL_RCC_GetPCLK1Freq+0x20>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	0a1b      	lsrs	r3, r3, #8
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	4a03      	ldr	r2, [pc, #12]	; (800060c <MCAL_RCC_GetPCLK1Freq+0x24>)
 80005fe:	5cd3      	ldrb	r3, [r2, r3]
 8000600:	fa21 f303 	lsr.w	r3, r1, r3
}
 8000604:	4618      	mov	r0, r3
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40021000 	.word	0x40021000
 800060c:	08000ff4 	.word	0x08000ff4

08000610 <MCAL_RCC_GetPCLK2Freq>:

uint32_t MCAL_RCC_GetPCLK2Freq(void){
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0

	//Bits 13:11 PPRE2: APB high-speed prescaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APB_Prescaler_Table[(RCC->CFGR >> 11)&0b111]);
 8000614:	f7ff ffd4 	bl	80005c0 <MCAL_RCC_GetHCLKFreq>
 8000618:	4601      	mov	r1, r0
 800061a:	4b05      	ldr	r3, [pc, #20]	; (8000630 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	0adb      	lsrs	r3, r3, #11
 8000620:	f003 0307 	and.w	r3, r3, #7
 8000624:	4a03      	ldr	r2, [pc, #12]	; (8000634 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000626:	5cd3      	ldrb	r3, [r2, r3]
 8000628:	fa21 f303 	lsr.w	r3, r1, r3
}
 800062c:	4618      	mov	r0, r3
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000
 8000634:	08000ff4 	.word	0x08000ff4

08000638 <MCAL_SPI_Init>:
 * 						      the configuration information for All SPI.
 * @retval		 -none
 * Note			 -Support for SPI Full Duplex Master/Slave & NSS HW/SW
 * 				 -In Case of Master you have to Configure pin and drive it.
 */
void MCAL_SPI_Init(SPI_TypeDef* SPIx, SPI_config* SPI_cfg){
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]

	//Safety for registers to put the result in the original register at the end
	uint16_t temp_reg_CR1 = 0 ;
 8000642:	2300      	movs	r3, #0
 8000644:	81fb      	strh	r3, [r7, #14]
	uint16_t temp_reg_CR2 = 0 ;
 8000646:	2300      	movs	r3, #0
 8000648:	81bb      	strh	r3, [r7, #12]

	if(SPIx == SPI1){
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	4a37      	ldr	r2, [pc, #220]	; (800072c <MCAL_SPI_Init+0xf4>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d109      	bne.n	8000666 <MCAL_SPI_Init+0x2e>
		Global_SPI_Config[SPI1_INDEX] = SPI_cfg;
 8000652:	4a37      	ldr	r2, [pc, #220]	; (8000730 <MCAL_SPI_Init+0xf8>)
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	6013      	str	r3, [r2, #0]
		RCC_SPI1_CLK_EN();
 8000658:	4b36      	ldr	r3, [pc, #216]	; (8000734 <MCAL_SPI_Init+0xfc>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	4a35      	ldr	r2, [pc, #212]	; (8000734 <MCAL_SPI_Init+0xfc>)
 800065e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	e008      	b.n	8000678 <MCAL_SPI_Init+0x40>
	}
	else{
		Global_SPI_Config[SPI2_INDEX] = SPI_cfg;
 8000666:	4a32      	ldr	r2, [pc, #200]	; (8000730 <MCAL_SPI_Init+0xf8>)
 8000668:	683b      	ldr	r3, [r7, #0]
 800066a:	6053      	str	r3, [r2, #4]
		RCC_SPI2_CLK_EN();
 800066c:	4b31      	ldr	r3, [pc, #196]	; (8000734 <MCAL_SPI_Init+0xfc>)
 800066e:	69db      	ldr	r3, [r3, #28]
 8000670:	4a30      	ldr	r2, [pc, #192]	; (8000734 <MCAL_SPI_Init+0xfc>)
 8000672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000676:	61d3      	str	r3, [r2, #28]
	}

	//enable SPI
	temp_reg_CR1 = (1<<6);
 8000678:	2340      	movs	r3, #64	; 0x40
 800067a:	81fb      	strh	r3, [r7, #14]


	//-----------all of the following configs corresponding bits in the registers are already done in the reference macros---------
	temp_reg_CR1 |= SPI_cfg->Device_Mode;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	881a      	ldrh	r2, [r3, #0]
 8000680:	89fb      	ldrh	r3, [r7, #14]
 8000682:	4313      	orrs	r3, r2
 8000684:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Comm_Mode;
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	885a      	ldrh	r2, [r3, #2]
 800068a:	89fb      	ldrh	r3, [r7, #14]
 800068c:	4313      	orrs	r3, r2
 800068e:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Frame_Format;
 8000690:	683b      	ldr	r3, [r7, #0]
 8000692:	889a      	ldrh	r2, [r3, #4]
 8000694:	89fb      	ldrh	r3, [r7, #14]
 8000696:	4313      	orrs	r3, r2
 8000698:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Data_size;
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	88da      	ldrh	r2, [r3, #6]
 800069e:	89fb      	ldrh	r3, [r7, #14]
 80006a0:	4313      	orrs	r3, r2
 80006a2:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Clock_Polarity;
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	891a      	ldrh	r2, [r3, #8]
 80006a8:	89fb      	ldrh	r3, [r7, #14]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->Clock_Phase;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	895a      	ldrh	r2, [r3, #10]
 80006b2:	89fb      	ldrh	r3, [r7, #14]
 80006b4:	4313      	orrs	r3, r2
 80006b6:	81fb      	strh	r3, [r7, #14]

	temp_reg_CR1 |= SPI_cfg->SPI_Clock_Freq;
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	89da      	ldrh	r2, [r3, #14]
 80006bc:	89fb      	ldrh	r3, [r7, #14]
 80006be:	4313      	orrs	r3, r2
 80006c0:	81fb      	strh	r3, [r7, #14]

	//NSS
	if(SPI_cfg->NSS == SPI_NSS_HARDWARE_MASTER_SS_OUTPUT_DISABLE){
		temp_reg_CR2 &= SPI_cfg->NSS;
	}
	else if(SPI_cfg->NSS == SPI_NSS_HARDWARE_MASTER_SS_OUTPUT_ENABLE){
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	899b      	ldrh	r3, [r3, #12]
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	d105      	bne.n	80006d6 <MCAL_SPI_Init+0x9e>
		temp_reg_CR2 |= SPI_cfg->NSS;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	899a      	ldrh	r2, [r3, #12]
 80006ce:	89bb      	ldrh	r3, [r7, #12]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	81bb      	strh	r3, [r7, #12]
 80006d4:	e004      	b.n	80006e0 <MCAL_SPI_Init+0xa8>
//	}
//	else if(SPI_cfg->NSS == SPI_NSS_SOFTWARE_INTERNAL_SS_RESET){
//		temp_reg_CR1 |= (1<<9);
//	}
	else{
		temp_reg_CR1 |= SPI_cfg->NSS;
 80006d6:	683b      	ldr	r3, [r7, #0]
 80006d8:	899a      	ldrh	r2, [r3, #12]
 80006da:	89fb      	ldrh	r3, [r7, #14]
 80006dc:	4313      	orrs	r3, r2
 80006de:	81fb      	strh	r3, [r7, #14]
	}


	//IRQ
	if(SPI_cfg->IRQ_Enable != SPI_IRQ_ENABLE_NONE){
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	8a1b      	ldrh	r3, [r3, #16]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d015      	beq.n	8000714 <MCAL_SPI_Init+0xdc>
		temp_reg_CR2 |= SPI_cfg->IRQ_Enable;
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	8a1a      	ldrh	r2, [r3, #16]
 80006ec:	89bb      	ldrh	r3, [r7, #12]
 80006ee:	4313      	orrs	r3, r2
 80006f0:	81bb      	strh	r3, [r7, #12]
		if(SPIx == SPI1){
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a0d      	ldr	r2, [pc, #52]	; (800072c <MCAL_SPI_Init+0xf4>)
 80006f6:	4293      	cmp	r3, r2
 80006f8:	d106      	bne.n	8000708 <MCAL_SPI_Init+0xd0>
			NVIC_IRQ35_SPI1_enable();
 80006fa:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <MCAL_SPI_Init+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a0e      	ldr	r2, [pc, #56]	; (8000738 <MCAL_SPI_Init+0x100>)
 8000700:	f043 0308 	orr.w	r3, r3, #8
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	e005      	b.n	8000714 <MCAL_SPI_Init+0xdc>
		}
		else{
			NVIC_IRQ36_SPI2_enable();
 8000708:	4b0b      	ldr	r3, [pc, #44]	; (8000738 <MCAL_SPI_Init+0x100>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a0a      	ldr	r2, [pc, #40]	; (8000738 <MCAL_SPI_Init+0x100>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6013      	str	r3, [r2, #0]
		}
	}

	SPIx->CR1 = temp_reg_CR1;
 8000714:	89fa      	ldrh	r2, [r7, #14]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
	SPIx->CR2 = temp_reg_CR2;
 800071a:	89ba      	ldrh	r2, [r7, #12]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	605a      	str	r2, [r3, #4]


	//test
}
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40013000 	.word	0x40013000
 8000730:	2000001c 	.word	0x2000001c
 8000734:	40021000 	.word	0x40021000
 8000738:	e000e104 	.word	0xe000e104

0800073c <MCAL_SPI_TX_RX>:
	}

	*Data = SPIx->DR;
}

void MCAL_SPI_TX_RX(SPI_TypeDef* SPIx, uint16_t* Data, enum Polling_Mechanismm PollingEN ){
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	4613      	mov	r3, r2
 8000748:	71fb      	strb	r3, [r7, #7]

	if(PollingEN == pollingenable){
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d106      	bne.n	800075e <MCAL_SPI_TX_RX+0x22>
		while(!((SPIx->SR) & SPI_SR_TXE));
 8000750:	bf00      	nop
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f003 0302 	and.w	r3, r3, #2
 800075a:	2b00      	cmp	r3, #0
 800075c:	d0f9      	beq.n	8000752 <MCAL_SPI_TX_RX+0x16>
	}

	SPIx->DR = *Data;
 800075e:	68bb      	ldr	r3, [r7, #8]
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	60da      	str	r2, [r3, #12]

	if(PollingEN == pollingenable){
 8000768:	79fb      	ldrb	r3, [r7, #7]
 800076a:	2b00      	cmp	r3, #0
 800076c:	d106      	bne.n	800077c <MCAL_SPI_TX_RX+0x40>
		while(!((SPIx->SR) & SPI_SR_RXNE));
 800076e:	bf00      	nop
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f9      	beq.n	8000770 <MCAL_SPI_TX_RX+0x34>
	}

	*Data = SPIx->DR;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	b29a      	uxth	r2, r3
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	801a      	strh	r2, [r3, #0]
}
 8000786:	bf00      	nop
 8000788:	3714      	adds	r7, #20
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <MCAL_SPI_GPIO_Set_Pins>:

void MCAL_SPI_GPIO_Set_Pins(SPI_TypeDef* SPIx){
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]

	GPIO_PinConfig_t pin_cfg;
	SPI_config* spi_cfg = NULL;
 8000798:	2300      	movs	r3, #0
 800079a:	60fb      	str	r3, [r7, #12]

	if(SPIx == SPI1){
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	4a71      	ldr	r2, [pc, #452]	; (8000964 <MCAL_SPI_GPIO_Set_Pins+0x1d4>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	d169      	bne.n	8000878 <MCAL_SPI_GPIO_Set_Pins+0xe8>

		spi_cfg = Global_SPI_Config[SPI1_INDEX];
 80007a4:	4b70      	ldr	r3, [pc, #448]	; (8000968 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	60fb      	str	r3, [r7, #12]

		//Master
		if(spi_cfg->Device_Mode == SPI_DEVICE_MODE_MASTER){
 80007aa:	68fb      	ldr	r3, [r7, #12]
 80007ac:	881b      	ldrh	r3, [r3, #0]
 80007ae:	2b04      	cmp	r3, #4
 80007b0:	d133      	bne.n	800081a <MCAL_SPI_GPIO_Set_Pins+0x8a>

			//PA4: NSS
			switch(spi_cfg->NSS){
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	899b      	ldrh	r3, [r3, #12]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d10c      	bne.n	80007d4 <MCAL_SPI_GPIO_Set_Pins+0x44>
				MCAL_GPIO_Init(GPIOA , &pin_cfg);
				break;


			case SPI_NSS_HARDWARE_MASTER_SS_OUTPUT_ENABLE:
				pin_cfg.GPIO_PinNumber =GPIO_PIN4;
 80007ba:	2310      	movs	r3, #16
 80007bc:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80007be:	2306      	movs	r3, #6
 80007c0:	72bb      	strb	r3, [r7, #10]
				pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007c2:	2301      	movs	r3, #1
 80007c4:	72fb      	strb	r3, [r7, #11]
				MCAL_GPIO_Init(GPIOA , &pin_cfg);
 80007c6:	f107 0308 	add.w	r3, r7, #8
 80007ca:	4619      	mov	r1, r3
 80007cc:	4867      	ldr	r0, [pc, #412]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007ce:	f7ff fe42 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80007d2:	bf00      	nop
			}

			//PA5: SCLK
			pin_cfg.GPIO_PinNumber =GPIO_PIN5;
 80007d4:	2320      	movs	r3, #32
 80007d6:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80007d8:	2306      	movs	r3, #6
 80007da:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80007dc:	2301      	movs	r3, #1
 80007de:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	4861      	ldr	r0, [pc, #388]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007e8:	f7ff fe35 	bl	8000456 <MCAL_GPIO_Init>


			//PA6: MISO
			//full duplex
			pin_cfg.GPIO_PinNumber =GPIO_PIN6;
 80007ec:	2340      	movs	r3, #64	; 0x40
 80007ee:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 80007f0:	2301      	movs	r3, #1
 80007f2:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 80007f4:	f107 0308 	add.w	r3, r7, #8
 80007f8:	4619      	mov	r1, r3
 80007fa:	485c      	ldr	r0, [pc, #368]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 80007fc:	f7ff fe2b 	bl	8000456 <MCAL_GPIO_Init>


			//PA7: MOSI
			//full duplex
			pin_cfg.GPIO_PinNumber =GPIO_PIN7;
 8000800:	2380      	movs	r3, #128	; 0x80
 8000802:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000804:	2306      	movs	r3, #6
 8000806:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000808:	2301      	movs	r3, #1
 800080a:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	4619      	mov	r1, r3
 8000812:	4856      	ldr	r0, [pc, #344]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000814:	f7ff fe1f 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
		}
	}

}
 8000818:	e09f      	b.n	800095a <MCAL_SPI_GPIO_Set_Pins+0x1ca>
			if(spi_cfg->NSS == SPI_NSS_HARDWARE_SLAVE){
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	899b      	ldrh	r3, [r3, #12]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d109      	bne.n	8000836 <MCAL_SPI_GPIO_Set_Pins+0xa6>
				pin_cfg.GPIO_PinNumber =GPIO_PIN4;
 8000822:	2310      	movs	r3, #16
 8000824:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000826:	2301      	movs	r3, #1
 8000828:	72bb      	strb	r3, [r7, #10]
				MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800082a:	f107 0308 	add.w	r3, r7, #8
 800082e:	4619      	mov	r1, r3
 8000830:	484e      	ldr	r0, [pc, #312]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000832:	f7ff fe10 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN5;
 8000836:	2320      	movs	r3, #32
 8000838:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 800083a:	2301      	movs	r3, #1
 800083c:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800083e:	f107 0308 	add.w	r3, r7, #8
 8000842:	4619      	mov	r1, r3
 8000844:	4849      	ldr	r0, [pc, #292]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000846:	f7ff fe06 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN6;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 800084e:	2306      	movs	r3, #6
 8000850:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000852:	2301      	movs	r3, #1
 8000854:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 8000856:	f107 0308 	add.w	r3, r7, #8
 800085a:	4619      	mov	r1, r3
 800085c:	4843      	ldr	r0, [pc, #268]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 800085e:	f7ff fdfa 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN7;
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000866:	2301      	movs	r3, #1
 8000868:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOA , &pin_cfg);
 800086a:	f107 0308 	add.w	r3, r7, #8
 800086e:	4619      	mov	r1, r3
 8000870:	483e      	ldr	r0, [pc, #248]	; (800096c <MCAL_SPI_GPIO_Set_Pins+0x1dc>)
 8000872:	f7ff fdf0 	bl	8000456 <MCAL_GPIO_Init>
}
 8000876:	e070      	b.n	800095a <MCAL_SPI_GPIO_Set_Pins+0x1ca>
		spi_cfg = Global_SPI_Config[SPI2_INDEX];
 8000878:	4b3b      	ldr	r3, [pc, #236]	; (8000968 <MCAL_SPI_GPIO_Set_Pins+0x1d8>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	60fb      	str	r3, [r7, #12]
		if(spi_cfg->Device_Mode == SPI_DEVICE_MODE_MASTER){
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	881b      	ldrh	r3, [r3, #0]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d137      	bne.n	80008f6 <MCAL_SPI_GPIO_Set_Pins+0x166>
			switch(spi_cfg->NSS){
 8000886:	68fb      	ldr	r3, [r7, #12]
 8000888:	899b      	ldrh	r3, [r3, #12]
 800088a:	2b04      	cmp	r3, #4
 800088c:	d10d      	bne.n	80008aa <MCAL_SPI_GPIO_Set_Pins+0x11a>
				pin_cfg.GPIO_PinNumber =GPIO_PIN12;
 800088e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000892:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000894:	2306      	movs	r3, #6
 8000896:	72bb      	strb	r3, [r7, #10]
				pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000898:	2301      	movs	r3, #1
 800089a:	72fb      	strb	r3, [r7, #11]
				MCAL_GPIO_Init(GPIOB , &pin_cfg);
 800089c:	f107 0308 	add.w	r3, r7, #8
 80008a0:	4619      	mov	r1, r3
 80008a2:	4833      	ldr	r0, [pc, #204]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008a4:	f7ff fdd7 	bl	8000456 <MCAL_GPIO_Init>
				break;
 80008a8:	bf00      	nop
			pin_cfg.GPIO_PinNumber =GPIO_PIN13;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80008b0:	2306      	movs	r3, #6
 80008b2:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80008b4:	2301      	movs	r3, #1
 80008b6:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	4619      	mov	r1, r3
 80008be:	482c      	ldr	r0, [pc, #176]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008c0:	f7ff fdc9 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN14;
 80008c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008c8:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 80008ca:	2301      	movs	r3, #1
 80008cc:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	4826      	ldr	r0, [pc, #152]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008d6:	f7ff fdbe 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN15;
 80008da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008de:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 80008e0:	2306      	movs	r3, #6
 80008e2:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80008e4:	2301      	movs	r3, #1
 80008e6:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4619      	mov	r1, r3
 80008ee:	4820      	ldr	r0, [pc, #128]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 80008f0:	f7ff fdb1 	bl	8000456 <MCAL_GPIO_Init>
}
 80008f4:	e031      	b.n	800095a <MCAL_SPI_GPIO_Set_Pins+0x1ca>
			if(spi_cfg->NSS == SPI_NSS_HARDWARE_SLAVE){
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	899b      	ldrh	r3, [r3, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d10a      	bne.n	8000914 <MCAL_SPI_GPIO_Set_Pins+0x184>
				pin_cfg.GPIO_PinNumber =GPIO_PIN12;
 80008fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000902:	813b      	strh	r3, [r7, #8]
				pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 8000904:	2301      	movs	r3, #1
 8000906:	72bb      	strb	r3, [r7, #10]
				MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	4619      	mov	r1, r3
 800090e:	4818      	ldr	r0, [pc, #96]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000910:	f7ff fda1 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN13;
 8000914:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000918:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 800091a:	2301      	movs	r3, #1
 800091c:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 800091e:	f107 0308 	add.w	r3, r7, #8
 8000922:	4619      	mov	r1, r3
 8000924:	4812      	ldr	r0, [pc, #72]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000926:	f7ff fd96 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN14;
 800092a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800092e:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000930:	2306      	movs	r3, #6
 8000932:	72bb      	strb	r3, [r7, #10]
			pin_cfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000934:	2301      	movs	r3, #1
 8000936:	72fb      	strb	r3, [r7, #11]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 8000938:	f107 0308 	add.w	r3, r7, #8
 800093c:	4619      	mov	r1, r3
 800093e:	480c      	ldr	r0, [pc, #48]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000940:	f7ff fd89 	bl	8000456 <MCAL_GPIO_Init>
			pin_cfg.GPIO_PinNumber =GPIO_PIN15;
 8000944:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000948:	813b      	strh	r3, [r7, #8]
			pin_cfg.GPIO_MODE= GPIO_MODE_INPUT_FLOAT;
 800094a:	2301      	movs	r3, #1
 800094c:	72bb      	strb	r3, [r7, #10]
			MCAL_GPIO_Init(GPIOB , &pin_cfg);
 800094e:	f107 0308 	add.w	r3, r7, #8
 8000952:	4619      	mov	r1, r3
 8000954:	4806      	ldr	r0, [pc, #24]	; (8000970 <MCAL_SPI_GPIO_Set_Pins+0x1e0>)
 8000956:	f7ff fd7e 	bl	8000456 <MCAL_GPIO_Init>
}
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40013000 	.word	0x40013000
 8000968:	2000001c 	.word	0x2000001c
 800096c:	40010800 	.word	0x40010800
 8000970:	40010c00 	.word	0x40010c00

08000974 <SPI1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void SPI1_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SR  & (1<<1)) >> 1 ) ;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <SPI1_IRQHandler+0x54>)
 800097c:	689b      	ldr	r3, [r3, #8]
 800097e:	085b      	lsrs	r3, r3, #1
 8000980:	f003 0301 	and.w	r3, r3, #1
 8000984:	b2da      	uxtb	r2, r3
 8000986:	793b      	ldrb	r3, [r7, #4]
 8000988:	f362 0300 	bfi	r3, r2, #0, #1
 800098c:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SR  & (1<<0)) >> 0 ) ;
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <SPI1_IRQHandler+0x54>)
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	b2da      	uxtb	r2, r3
 8000998:	793b      	ldrb	r3, [r7, #4]
 800099a:	f362 0341 	bfi	r3, r2, #1, #1
 800099e:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SR  & (1<<4)) >> 4 ) ;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <SPI1_IRQHandler+0x54>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	091b      	lsrs	r3, r3, #4
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	b2da      	uxtb	r2, r3
 80009ac:	793b      	ldrb	r3, [r7, #4]
 80009ae:	f362 0382 	bfi	r3, r2, #2, #1
 80009b2:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI1_INDEX]->P_IRQ_Callback(irq_src);
 80009b4:	4b05      	ldr	r3, [pc, #20]	; (80009cc <SPI1_IRQHandler+0x58>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	7938      	ldrb	r0, [r7, #4]
 80009bc:	4798      	blx	r3
}
 80009be:	bf00      	nop
 80009c0:	3708      	adds	r7, #8
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40013000 	.word	0x40013000
 80009cc:	2000001c 	.word	0x2000001c

080009d0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	struct SPI_IRQ_SRC irq_src ;

	irq_src.TXE  = ( ( SPI1->SR  & (1<<1)) >> 1 ) ;
 80009d6:	4b13      	ldr	r3, [pc, #76]	; (8000a24 <SPI2_IRQHandler+0x54>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	085b      	lsrs	r3, r3, #1
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	793b      	ldrb	r3, [r7, #4]
 80009e4:	f362 0300 	bfi	r3, r2, #0, #1
 80009e8:	713b      	strb	r3, [r7, #4]
	irq_src.RXNE = ( ( SPI1->SR  & (1<<0)) >> 0 ) ;
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <SPI2_IRQHandler+0x54>)
 80009ec:	689b      	ldr	r3, [r3, #8]
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	793b      	ldrb	r3, [r7, #4]
 80009f6:	f362 0341 	bfi	r3, r2, #1, #1
 80009fa:	713b      	strb	r3, [r7, #4]
	irq_src.ERRI = ( ( SPI1->SR  & (1<<4)) >> 4 ) ;
 80009fc:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <SPI2_IRQHandler+0x54>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	091b      	lsrs	r3, r3, #4
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	793b      	ldrb	r3, [r7, #4]
 8000a0a:	f362 0382 	bfi	r3, r2, #2, #1
 8000a0e:	713b      	strb	r3, [r7, #4]

	Global_SPI_Config[SPI2_INDEX]->P_IRQ_Callback(irq_src);
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <SPI2_IRQHandler+0x58>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	695b      	ldr	r3, [r3, #20]
 8000a16:	7938      	ldrb	r0, [r7, #4]
 8000a18:	4798      	blx	r3
}
 8000a1a:	bf00      	nop
 8000a1c:	3708      	adds	r7, #8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40013000 	.word	0x40013000
 8000a28:	2000001c 	.word	0x2000001c

08000a2c <MCAL_USART_Init>:
 * @brief                -initialize the USARTX pin  to a specified parameters
 * @param [in]           -USARTX where x can be (USARTX1 USARTX2 USART3)
 * @retval               - null
 * Note                  -null
 */
void MCAL_USART_Init(USART_TypeDef* USARTx, USART_config* USART_cfg){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]


	uint32_t pclk, BRR;

	//enable clock for corresponding instance
	if(USARTx == USART1){
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4a55      	ldr	r2, [pc, #340]	; (8000b90 <MCAL_USART_Init+0x164>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d109      	bne.n	8000a52 <MCAL_USART_Init+0x26>
		Global_USART_Config[0] = USART_cfg;
 8000a3e:	4a55      	ldr	r2, [pc, #340]	; (8000b94 <MCAL_USART_Init+0x168>)
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	6013      	str	r3, [r2, #0]
		RCC_USART1_CLK_EN();
 8000a44:	4b54      	ldr	r3, [pc, #336]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	4a53      	ldr	r2, [pc, #332]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a4e:	6193      	str	r3, [r2, #24]
 8000a50:	e016      	b.n	8000a80 <MCAL_USART_Init+0x54>
	}
	else if(USARTx == USART2){
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a51      	ldr	r2, [pc, #324]	; (8000b9c <MCAL_USART_Init+0x170>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d109      	bne.n	8000a6e <MCAL_USART_Init+0x42>
		Global_USART_Config[1] = USART_cfg;
 8000a5a:	4a4e      	ldr	r2, [pc, #312]	; (8000b94 <MCAL_USART_Init+0x168>)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	6053      	str	r3, [r2, #4]
		RCC_USART2_CLK_EN();
 8000a60:	4b4d      	ldr	r3, [pc, #308]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a62:	69db      	ldr	r3, [r3, #28]
 8000a64:	4a4c      	ldr	r2, [pc, #304]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a6a:	61d3      	str	r3, [r2, #28]
 8000a6c:	e008      	b.n	8000a80 <MCAL_USART_Init+0x54>
	}
	else{
		Global_USART_Config[2] = USART_cfg;
 8000a6e:	4a49      	ldr	r2, [pc, #292]	; (8000b94 <MCAL_USART_Init+0x168>)
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	6093      	str	r3, [r2, #8]
		RCC_USART3_CLK_EN();
 8000a74:	4b48      	ldr	r3, [pc, #288]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a76:	69db      	ldr	r3, [r3, #28]
 8000a78:	4a47      	ldr	r2, [pc, #284]	; (8000b98 <MCAL_USART_Init+0x16c>)
 8000a7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a7e:	61d3      	str	r3, [r2, #28]
	}

	//enable USART module
	USARTx->CR1 |= 1<<13;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60da      	str	r2, [r3, #12]

	//-----------all of the following configs corresponding bits in the registers are already done in the reference macros---------

	//enable TX/RX according to config
	USARTx->CR1 |= USART_cfg->USART_MODE;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	683a      	ldr	r2, [r7, #0]
 8000a92:	7812      	ldrb	r2, [r2, #0]
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	60da      	str	r2, [r3, #12]

	//payload length
	USARTx->CR1 |= USART_cfg->Payload_length;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	7a12      	ldrb	r2, [r2, #8]
 8000aa2:	431a      	orrs	r2, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	60da      	str	r2, [r3, #12]

	//parity bits
	USARTx->CR1 |= USART_cfg->Parity;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	683a      	ldr	r2, [r7, #0]
 8000aae:	7a52      	ldrb	r2, [r2, #9]
 8000ab0:	431a      	orrs	r2, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	60da      	str	r2, [r3, #12]

	//stop bits
	USARTx->CR2 |= USART_cfg->Stop_bits;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	691b      	ldr	r3, [r3, #16]
 8000aba:	683a      	ldr	r2, [r7, #0]
 8000abc:	7a92      	ldrb	r2, [r2, #10]
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	611a      	str	r2, [r3, #16]

	//control flow
	USARTx->CR3 |= USART_cfg->HW_Flow_Control;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	695b      	ldr	r3, [r3, #20]
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	7ad2      	ldrb	r2, [r2, #11]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	615a      	str	r2, [r3, #20]

	//------------------------------------Baud rate configuration------------------------------------------------
	//PCLK1 for USART2,3
	//PCLK2 for USART1

	if(USARTx == USART1){
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4a2e      	ldr	r2, [pc, #184]	; (8000b90 <MCAL_USART_Init+0x164>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d103      	bne.n	8000ae2 <MCAL_USART_Init+0xb6>
		pclk = MCAL_RCC_GetPCLK2Freq();
 8000ada:	f7ff fd99 	bl	8000610 <MCAL_RCC_GetPCLK2Freq>
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	e002      	b.n	8000ae8 <MCAL_USART_Init+0xbc>
	}
	else{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000ae2:	f7ff fd81 	bl	80005e8 <MCAL_RCC_GetPCLK1Freq>
 8000ae6:	60f8      	str	r0, [r7, #12]
	}

	//details in @ref Baud rate calculation
	BRR = USART_BRR_Register(pclk,USART_cfg->Baud_rate);
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	011b      	lsls	r3, r3, #4
 8000aee:	68fa      	ldr	r2, [r7, #12]
 8000af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af4:	0119      	lsls	r1, r3, #4
 8000af6:	68fa      	ldr	r2, [r7, #12]
 8000af8:	4613      	mov	r3, r2
 8000afa:	009b      	lsls	r3, r3, #2
 8000afc:	4413      	add	r3, r2
 8000afe:	009a      	lsls	r2, r3, #2
 8000b00:	441a      	add	r2, r3
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	009b      	lsls	r3, r3, #2
 8000b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	011b      	lsls	r3, r3, #4
 8000b12:	68f8      	ldr	r0, [r7, #12]
 8000b14:	fbb0 f3f3 	udiv	r3, r0, r3
 8000b18:	2064      	movs	r0, #100	; 0x64
 8000b1a:	fb00 f303 	mul.w	r3, r0, r3
 8000b1e:	1ad3      	subs	r3, r2, r3
 8000b20:	011b      	lsls	r3, r3, #4
 8000b22:	4a1f      	ldr	r2, [pc, #124]	; (8000ba0 <MCAL_USART_Init+0x174>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	095b      	lsrs	r3, r3, #5
 8000b2a:	f003 030f 	and.w	r3, r3, #15
 8000b2e:	430b      	orrs	r3, r1
 8000b30:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	68ba      	ldr	r2, [r7, #8]
 8000b36:	609a      	str	r2, [r3, #8]

	//-------------------------------------------------------------------------------------------------------------


	//Enable/Disable interrupt
	if(USART_cfg->IRQ_Enable != USART_IRQ_ENABLE_NONE){
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	7b1b      	ldrb	r3, [r3, #12]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d022      	beq.n	8000b86 <MCAL_USART_Init+0x15a>
		USARTx->CR1 |= (USART_cfg->IRQ_Enable);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	7b12      	ldrb	r2, [r2, #12]
 8000b48:	431a      	orrs	r2, r3
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60da      	str	r2, [r3, #12]

		//enable NVIC for USARTx
		if(USARTx == USART1){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4a0f      	ldr	r2, [pc, #60]	; (8000b90 <MCAL_USART_Init+0x164>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d106      	bne.n	8000b64 <MCAL_USART_Init+0x138>
			NVIC_IRQ37_USART1_enable();
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b5c:	f043 0320 	orr.w	r3, r3, #32
 8000b60:	6013      	str	r3, [r2, #0]
		else{
			NVIC_IRQ39_USART3_enable();
		}
	}

}
 8000b62:	e010      	b.n	8000b86 <MCAL_USART_Init+0x15a>
		else if(USARTx == USART2){
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <MCAL_USART_Init+0x170>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d106      	bne.n	8000b7a <MCAL_USART_Init+0x14e>
			NVIC_IRQ38_USART2_enable();
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0c      	ldr	r2, [pc, #48]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b76:	6013      	str	r3, [r2, #0]
}
 8000b78:	e005      	b.n	8000b86 <MCAL_USART_Init+0x15a>
			NVIC_IRQ39_USART3_enable();
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a09      	ldr	r2, [pc, #36]	; (8000ba4 <MCAL_USART_Init+0x178>)
 8000b80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	3710      	adds	r7, #16
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40013800 	.word	0x40013800
 8000b94:	20000024 	.word	0x20000024
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	40004400 	.word	0x40004400
 8000ba0:	51eb851f 	.word	0x51eb851f
 8000ba4:	e000e104 	.word	0xe000e104

08000ba8 <MCAL_USART_Send_Data>:
		NVIC_IRQ39_USART3_disable();
	}

}

void MCAL_USART_Send_Data(USART_TypeDef* USARTx, uint16_t* Data, enum Polling_Mechanism PollingEN ){
 8000ba8:	b480      	push	{r7}
 8000baa:	b087      	sub	sp, #28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	71fb      	strb	r3, [r7, #7]

	USART_config* USART_CFG = NULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1){
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4a18      	ldr	r2, [pc, #96]	; (8000c20 <MCAL_USART_Send_Data+0x78>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d103      	bne.n	8000bca <MCAL_USART_Send_Data+0x22>
		USART_CFG = Global_USART_Config[0];
 8000bc2:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MCAL_USART_Send_Data+0x7c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e00a      	b.n	8000be0 <MCAL_USART_Send_Data+0x38>
	}
	else if(USARTx == USART2){
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <MCAL_USART_Send_Data+0x80>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d103      	bne.n	8000bda <MCAL_USART_Send_Data+0x32>
		USART_CFG = Global_USART_Config[1];
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MCAL_USART_Send_Data+0x7c>)
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	e002      	b.n	8000be0 <MCAL_USART_Send_Data+0x38>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 8000bda:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MCAL_USART_Send_Data+0x7c>)
 8000bdc:	689b      	ldr	r3, [r3, #8]
 8000bde:	617b      	str	r3, [r7, #20]
	}
	//check if TXE is set in SR
	if(PollingEN == enable){
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d106      	bne.n	8000bf4 <MCAL_USART_Send_Data+0x4c>
		while(!(USARTx->SR & 1<<7));
 8000be6:	bf00      	nop
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <MCAL_USART_Send_Data+0x40>
	}

	//check payload length
	if(USART_CFG->Payload_length == USART_Payload_Length_8){
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	7a1b      	ldrb	r3, [r3, #8]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d105      	bne.n	8000c08 <MCAL_USART_Send_Data+0x60>
		USARTx->DR = (*Data & (uint8_t)0xFF);
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	605a      	str	r2, [r3, #4]
	}
	else{
		USARTx->DR = (*Data & (uint16_t)0x1FF);
	}
}
 8000c06:	e005      	b.n	8000c14 <MCAL_USART_Send_Data+0x6c>
		USARTx->DR = (*Data & (uint16_t)0x1FF);
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	605a      	str	r2, [r3, #4]
}
 8000c14:	bf00      	nop
 8000c16:	371c      	adds	r7, #28
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bc80      	pop	{r7}
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	40013800 	.word	0x40013800
 8000c24:	20000024 	.word	0x20000024
 8000c28:	40004400 	.word	0x40004400

08000c2c <MCAL_USART_Receive_Data>:
void MCAL_USART_Receive_Data(USART_TypeDef* USARTx, uint16_t* Data, enum Polling_Mechanism PollingEN ){
 8000c2c:	b480      	push	{r7}
 8000c2e:	b087      	sub	sp, #28
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	60b9      	str	r1, [r7, #8]
 8000c36:	4613      	mov	r3, r2
 8000c38:	71fb      	strb	r3, [r7, #7]
	//the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	//because it is replaced by the parity.
	//When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.


	USART_config* USART_CFG = NULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
	if(USARTx == USART1){
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	4a24      	ldr	r2, [pc, #144]	; (8000cd4 <MCAL_USART_Receive_Data+0xa8>)
 8000c42:	4293      	cmp	r3, r2
 8000c44:	d103      	bne.n	8000c4e <MCAL_USART_Receive_Data+0x22>
		USART_CFG = Global_USART_Config[0];
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <MCAL_USART_Receive_Data+0xac>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	617b      	str	r3, [r7, #20]
 8000c4c:	e00a      	b.n	8000c64 <MCAL_USART_Receive_Data+0x38>
	}
	else if(USARTx == USART2){
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	4a22      	ldr	r2, [pc, #136]	; (8000cdc <MCAL_USART_Receive_Data+0xb0>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d103      	bne.n	8000c5e <MCAL_USART_Receive_Data+0x32>
		USART_CFG = Global_USART_Config[1];
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <MCAL_USART_Receive_Data+0xac>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	e002      	b.n	8000c64 <MCAL_USART_Receive_Data+0x38>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MCAL_USART_Receive_Data+0xac>)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	617b      	str	r3, [r7, #20]
	}
	//check if RXNE is set in SR
	if(PollingEN == enable){
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d106      	bne.n	8000c78 <MCAL_USART_Receive_Data+0x4c>
		while(!(USARTx->SR & 1<<5));
 8000c6a:	bf00      	nop
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f003 0320 	and.w	r3, r3, #32
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d0f9      	beq.n	8000c6c <MCAL_USART_Receive_Data+0x40>
	}

	//check payload length
	if(USART_CFG->Payload_length == USART_Payload_Length_8){
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	7a1b      	ldrb	r3, [r3, #8]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d112      	bne.n	8000ca6 <MCAL_USART_Receive_Data+0x7a>

		//if no parity
		if(USART_CFG->Parity == USART_Parity_NONE){
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	7a5b      	ldrb	r3, [r3, #9]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d105      	bne.n	8000c94 <MCAL_USART_Receive_Data+0x68>
			*Data = USARTx->DR;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	68bb      	ldr	r3, [r7, #8]
 8000c90:	801a      	strh	r2, [r3, #0]
		}
		else{
			*Data = (USARTx->DR & (uint8_t)0xFF);
		}
	}
}
 8000c92:	e019      	b.n	8000cc8 <MCAL_USART_Receive_Data+0x9c>
			*Data = (USARTx->DR & (uint8_t)0x7F);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	801a      	strh	r2, [r3, #0]
}
 8000ca4:	e010      	b.n	8000cc8 <MCAL_USART_Receive_Data+0x9c>
		if(USART_CFG->Parity == USART_Parity_NONE){
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	7a5b      	ldrb	r3, [r3, #9]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d105      	bne.n	8000cba <MCAL_USART_Receive_Data+0x8e>
			*Data = USARTx->DR;
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	801a      	strh	r2, [r3, #0]
}
 8000cb8:	e006      	b.n	8000cc8 <MCAL_USART_Receive_Data+0x9c>
			*Data = (USARTx->DR & (uint8_t)0xFF);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	685b      	ldr	r3, [r3, #4]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	801a      	strh	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	371c      	adds	r7, #28
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	40013800 	.word	0x40013800
 8000cd8:	20000024 	.word	0x20000024
 8000cdc:	40004400 	.word	0x40004400

08000ce0 <MCAL_USART_GPIO_Set_Pins>:

	//wait till TC flag is set in SR
	while(!(USARTx->SR & 1<<6));
}

void MCAL_USART_GPIO_Set_Pins(USART_TypeDef* USARTx){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]

	USART_config* USART_CFG = NULL;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
	if(USARTx == USART1){
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a33      	ldr	r2, [pc, #204]	; (8000dbc <MCAL_USART_GPIO_Set_Pins+0xdc>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d103      	bne.n	8000cfc <MCAL_USART_GPIO_Set_Pins+0x1c>
		USART_CFG = Global_USART_Config[0];
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	e00a      	b.n	8000d12 <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else if(USARTx == USART2){
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a31      	ldr	r2, [pc, #196]	; (8000dc4 <MCAL_USART_GPIO_Set_Pins+0xe4>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d103      	bne.n	8000d0c <MCAL_USART_GPIO_Set_Pins+0x2c>
		USART_CFG = Global_USART_Config[1];
 8000d04:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	e002      	b.n	8000d12 <MCAL_USART_GPIO_Set_Pins+0x32>
	}
	else{
		USART_CFG = Global_USART_Config[2];
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <MCAL_USART_GPIO_Set_Pins+0xe0>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	60fb      	str	r3, [r7, #12]
	}


	GPIO_PinConfig_t USART_pincfg;

	if(USARTx == USART1){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a29      	ldr	r2, [pc, #164]	; (8000dbc <MCAL_USART_GPIO_Set_Pins+0xdc>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d118      	bne.n	8000d4c <MCAL_USART_GPIO_Set_Pins+0x6c>
		//PA9->TX, PA10-> RX, PA11-> CTS, PA12-> RTS

		//PA9 TX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN9;
 8000d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d1e:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000d20:	2306      	movs	r3, #6
 8000d22:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000d24:	2301      	movs	r3, #1
 8000d26:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000d28:	f107 0308 	add.w	r3, r7, #8
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4826      	ldr	r0, [pc, #152]	; (8000dc8 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000d30:	f7ff fb91 	bl	8000456 <MCAL_GPIO_Init>

		//PA10 RX
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4619      	mov	r1, r3
 8000d44:	4820      	ldr	r0, [pc, #128]	; (8000dc8 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000d46:	f7ff fb86 	bl	8000456 <MCAL_GPIO_Init>
			MCAL_GPIO_Init(GPIOB , &USART_pincfg);

		}

	}
}
 8000d4a:	e032      	b.n	8000db2 <MCAL_USART_GPIO_Set_Pins+0xd2>
	else if(USARTx == USART2){
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	4a1d      	ldr	r2, [pc, #116]	; (8000dc4 <MCAL_USART_GPIO_Set_Pins+0xe4>)
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d116      	bne.n	8000d82 <MCAL_USART_GPIO_Set_Pins+0xa2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN2;
 8000d54:	2304      	movs	r3, #4
 8000d56:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4619      	mov	r1, r3
 8000d66:	4818      	ldr	r0, [pc, #96]	; (8000dc8 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000d68:	f7ff fb75 	bl	8000456 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN3;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000d70:	2308      	movs	r3, #8
 8000d72:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOA , &USART_pincfg);
 8000d74:	f107 0308 	add.w	r3, r7, #8
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4813      	ldr	r0, [pc, #76]	; (8000dc8 <MCAL_USART_GPIO_Set_Pins+0xe8>)
 8000d7c:	f7ff fb6b 	bl	8000456 <MCAL_GPIO_Init>
}
 8000d80:	e017      	b.n	8000db2 <MCAL_USART_GPIO_Set_Pins+0xd2>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN10;
 8000d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d86:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_OUTPUT_AF_PP;
 8000d88:	2306      	movs	r3, #6
 8000d8a:	72bb      	strb	r3, [r7, #10]
		USART_pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	72fb      	strb	r3, [r7, #11]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MCAL_USART_GPIO_Set_Pins+0xec>)
 8000d98:	f7ff fb5d 	bl	8000456 <MCAL_GPIO_Init>
		USART_pincfg.GPIO_PinNumber =GPIO_PIN11;
 8000d9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000da0:	813b      	strh	r3, [r7, #8]
		USART_pincfg.GPIO_MODE= GPIO_MODE_AF_INPUT;
 8000da2:	2308      	movs	r3, #8
 8000da4:	72bb      	strb	r3, [r7, #10]
		MCAL_GPIO_Init(GPIOB , &USART_pincfg);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	4619      	mov	r1, r3
 8000dac:	4807      	ldr	r0, [pc, #28]	; (8000dcc <MCAL_USART_GPIO_Set_Pins+0xec>)
 8000dae:	f7ff fb52 	bl	8000456 <MCAL_GPIO_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	20000024 	.word	0x20000024
 8000dc4:	40004400 	.word	0x40004400
 8000dc8:	40010800 	.word	0x40010800
 8000dcc:	40010c00 	.word	0x40010c00

08000dd0 <USART1_IRQHandler>:
 * 							ISR Functions
 * =====================================================================================
 */

void USART1_IRQHandler()
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_Callback();
 8000dd4:	4b02      	ldr	r3, [pc, #8]	; (8000de0 <USART1_IRQHandler+0x10>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	691b      	ldr	r3, [r3, #16]
 8000dda:	4798      	blx	r3

}
 8000ddc:	bf00      	nop
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000024 	.word	0x20000024

08000de4 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_Callback();
 8000de8:	4b02      	ldr	r3, [pc, #8]	; (8000df4 <USART2_IRQHandler+0x10>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	691b      	ldr	r3, [r3, #16]
 8000dee:	4798      	blx	r3

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000024 	.word	0x20000024

08000df8 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_Callback();
 8000dfc:	4b02      	ldr	r3, [pc, #8]	; (8000e08 <USART3_IRQHandler+0x10>)
 8000dfe:	689b      	ldr	r3, [r3, #8]
 8000e00:	691b      	ldr	r3, [r3, #16]
 8000e02:	4798      	blx	r3

}
 8000e04:	bf00      	nop
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	20000024 	.word	0x20000024

08000e0c <clock_init>:
#include "STM32F103C6_RCC_driver.h"
#include "STM32F103C6_USART_driver.h"
#include "STM32F103C6_SPI_driver.h"


void clock_init(){
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

	RCC_GPIOA_CLK_EN();
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <clock_init+0x30>)
 8000e12:	699b      	ldr	r3, [r3, #24]
 8000e14:	4a09      	ldr	r2, [pc, #36]	; (8000e3c <clock_init+0x30>)
 8000e16:	f043 0304 	orr.w	r3, r3, #4
 8000e1a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <clock_init+0x30>)
 8000e1e:	699b      	ldr	r3, [r3, #24]
 8000e20:	4a06      	ldr	r2, [pc, #24]	; (8000e3c <clock_init+0x30>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <clock_init+0x30>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a03      	ldr	r2, [pc, #12]	; (8000e3c <clock_init+0x30>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	6193      	str	r3, [r2, #24]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	40021000 	.word	0x40021000

08000e40 <IRQ_USART>:
#ifdef MCU_Act_As_Slave
	MCAL_SPI_TX_RX(SPI1, &ch, pollingdisable);
	MCAL_USART_Send_Data(USART1, &ch, enable);
#endif
}
void IRQ_USART(void){
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

#ifdef MCU_Act_As_Master
	MCAL_USART_Receive_Data(USART1, &ch, disable);
 8000e44:	2201      	movs	r2, #1
 8000e46:	490d      	ldr	r1, [pc, #52]	; (8000e7c <IRQ_USART+0x3c>)
 8000e48:	480d      	ldr	r0, [pc, #52]	; (8000e80 <IRQ_USART+0x40>)
 8000e4a:	f7ff feef 	bl	8000c2c <MCAL_USART_Receive_Data>
	MCAL_USART_Send_Data(USART1, &ch, enable);
 8000e4e:	2200      	movs	r2, #0
 8000e50:	490a      	ldr	r1, [pc, #40]	; (8000e7c <IRQ_USART+0x3c>)
 8000e52:	480b      	ldr	r0, [pc, #44]	; (8000e80 <IRQ_USART+0x40>)
 8000e54:	f7ff fea8 	bl	8000ba8 <MCAL_USART_Send_Data>

	//send to spi
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <IRQ_USART+0x44>)
 8000e5e:	f7ff fb79 	bl	8000554 <MCAL_GPIO_WritePin>
	MCAL_SPI_TX_RX(SPI1, &ch, pollingenable);
 8000e62:	2200      	movs	r2, #0
 8000e64:	4905      	ldr	r1, [pc, #20]	; (8000e7c <IRQ_USART+0x3c>)
 8000e66:	4808      	ldr	r0, [pc, #32]	; (8000e88 <IRQ_USART+0x48>)
 8000e68:	f7ff fc68 	bl	800073c <MCAL_SPI_TX_RX>
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4804      	ldr	r0, [pc, #16]	; (8000e84 <IRQ_USART+0x44>)
 8000e72:	f7ff fb6f 	bl	8000554 <MCAL_GPIO_WritePin>
#endif
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	2000006c 	.word	0x2000006c
 8000e80:	40013800 	.word	0x40013800
 8000e84:	40010800 	.word	0x40010800
 8000e88:	40013000 	.word	0x40013000

08000e8c <main>:

int main(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	; 0x30
 8000e90:	af00      	add	r7, sp, #0
	clock_init();
 8000e92:	f7ff ffbb 	bl	8000e0c <clock_init>

	USART_config usart_cfg;

	usart_cfg.Baud_rate = USART_BaudRate_115200;
 8000e96:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e9a:	623b      	str	r3, [r7, #32]
	usart_cfg.HW_Flow_Control = USART_Flow_Control_NONE;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	usart_cfg.IRQ_Enable = USART_IRQ_ENABLE_RXNEIE;
 8000ea2:	2320      	movs	r3, #32
 8000ea4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	usart_cfg.P_IRQ_Callback = IRQ_USART;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	; (8000f30 <main+0xa4>)
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
	usart_cfg.Parity = USART_Parity_NONE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	usart_cfg.Payload_length = USART_Payload_Length_8;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	usart_cfg.Stop_bits = USART_Stop_bit_1;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	usart_cfg.USART_MODE = USART_MODE_TX_RX;
 8000ebe:	230c      	movs	r3, #12
 8000ec0:	773b      	strb	r3, [r7, #28]

	MCAL_USART_Init(USART1, &usart_cfg);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <main+0xa8>)
 8000eca:	f7ff fdaf 	bl	8000a2c <MCAL_USART_Init>
	MCAL_USART_GPIO_Set_Pins(USART1);
 8000ece:	4819      	ldr	r0, [pc, #100]	; (8000f34 <main+0xa8>)
 8000ed0:	f7ff ff06 	bl	8000ce0 <MCAL_USART_GPIO_Set_Pins>


	SPI_config spi_config;
	//Common configuration
	spi_config.Clock_Phase = SPI_CLOCK_PHASE_SECOND_EDGE;
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	81fb      	strh	r3, [r7, #14]
	spi_config.Clock_Polarity = SPI_CLOCK_POLARITY_HIGH_WHEN_IDLE;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	81bb      	strh	r3, [r7, #12]
	spi_config.Frame_Format = SPI_FRAME_MSB_FIRST;
 8000edc:	2300      	movs	r3, #0
 8000ede:	813b      	strh	r3, [r7, #8]
	//assume pclk2 is 8 MHz
	spi_config.Data_size = SPI_DATA_SIZE_8_BIT;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	817b      	strh	r3, [r7, #10]
	spi_config.SPI_Clock_Freq = SPI_BAUD_RATE_PRESCALER_8;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	827b      	strh	r3, [r7, #18]
	spi_config.Comm_Mode = SPI_COMM_MODE_2LINES_TX_RX;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	80fb      	strh	r3, [r7, #6]

#ifdef MCU_Act_As_Master
	spi_config.Device_Mode = SPI_DEVICE_MODE_MASTER;
 8000eec:	2304      	movs	r3, #4
 8000eee:	80bb      	strh	r3, [r7, #4]
	spi_config.IRQ_Enable = SPI_IRQ_ENABLE_NONE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	82bb      	strh	r3, [r7, #20]
	spi_config.NSS = SPI_NSS_SOFTWARE_INTERNAL_SS_SET;
 8000ef4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ef8:	823b      	strh	r3, [r7, #16]
	spi_config.P_IRQ_Callback = NULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
	//it is not done in the MCAL_SPI_GPIO_Set_Pins function
	//because we configured NSS to be controlled by software and set it to 1
	//and in the MCAL_SPI_GPIO_Set_Pins function, it configures PA4 for hardware only

	GPIO_PinConfig_t pin_cfgg;
	pin_cfgg.GPIO_PinNumber =GPIO_PIN4;
 8000efe:	2310      	movs	r3, #16
 8000f00:	803b      	strh	r3, [r7, #0]
	pin_cfgg.GPIO_MODE= GPIO_MODE_OUTPUT_PP;
 8000f02:	2304      	movs	r3, #4
 8000f04:	70bb      	strb	r3, [r7, #2]
	pin_cfgg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000f06:	2301      	movs	r3, #1
 8000f08:	70fb      	strb	r3, [r7, #3]
	MCAL_GPIO_Init(GPIOA , &pin_cfgg);
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <main+0xac>)
 8000f10:	f7ff faa1 	bl	8000456 <MCAL_GPIO_Init>

	//force Slave select to be HIGH (idle)
	//it will be reset when we need to send (in the IRQ function)
	MCAL_GPIO_WritePin(GPIOA, GPIO_PIN4, 1);
 8000f14:	2201      	movs	r2, #1
 8000f16:	2110      	movs	r1, #16
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <main+0xac>)
 8000f1a:	f7ff fb1b 	bl	8000554 <MCAL_GPIO_WritePin>
	spi_config.IRQ_Enable = SPI_IRQ_ENABLE_RXNIE;
	spi_config.NSS = SPI_NSS_HARDWARE_SLAVE;
	spi_config.P_IRQ_Callback = IRQ_SPI;
#endif

	MCAL_SPI_Init(SPI1, &spi_config);
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	4619      	mov	r1, r3
 8000f22:	4806      	ldr	r0, [pc, #24]	; (8000f3c <main+0xb0>)
 8000f24:	f7ff fb88 	bl	8000638 <MCAL_SPI_Init>
	MCAL_SPI_GPIO_Set_Pins(SPI1);
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <main+0xb0>)
 8000f2a:	f7ff fc31 	bl	8000790 <MCAL_SPI_GPIO_Set_Pins>

	while(1){
 8000f2e:	e7fe      	b.n	8000f2e <main+0xa2>
 8000f30:	08000e41 	.word	0x08000e41
 8000f34:	40013800 	.word	0x40013800
 8000f38:	40010800 	.word	0x40010800
 8000f3c:	40013000 	.word	0x40013000

08000f40 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f40:	480d      	ldr	r0, [pc, #52]	; (8000f78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f42:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f44:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000f6e:	f000 f811 	bl	8000f94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f72:	f7ff ff8b 	bl	8000e8c <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   r0, =_estack
 8000f78:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000f84:	08001014 	.word	0x08001014
  ldr r2, =_sbss
 8000f88:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000f8c:	20000070 	.word	0x20000070

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <__libc_init_array>:
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	2500      	movs	r5, #0
 8000f98:	4e0c      	ldr	r6, [pc, #48]	; (8000fcc <__libc_init_array+0x38>)
 8000f9a:	4c0d      	ldr	r4, [pc, #52]	; (8000fd0 <__libc_init_array+0x3c>)
 8000f9c:	1ba4      	subs	r4, r4, r6
 8000f9e:	10a4      	asrs	r4, r4, #2
 8000fa0:	42a5      	cmp	r5, r4
 8000fa2:	d109      	bne.n	8000fb8 <__libc_init_array+0x24>
 8000fa4:	f000 f81a 	bl	8000fdc <_init>
 8000fa8:	2500      	movs	r5, #0
 8000faa:	4e0a      	ldr	r6, [pc, #40]	; (8000fd4 <__libc_init_array+0x40>)
 8000fac:	4c0a      	ldr	r4, [pc, #40]	; (8000fd8 <__libc_init_array+0x44>)
 8000fae:	1ba4      	subs	r4, r4, r6
 8000fb0:	10a4      	asrs	r4, r4, #2
 8000fb2:	42a5      	cmp	r5, r4
 8000fb4:	d105      	bne.n	8000fc2 <__libc_init_array+0x2e>
 8000fb6:	bd70      	pop	{r4, r5, r6, pc}
 8000fb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fbc:	4798      	blx	r3
 8000fbe:	3501      	adds	r5, #1
 8000fc0:	e7ee      	b.n	8000fa0 <__libc_init_array+0xc>
 8000fc2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000fc6:	4798      	blx	r3
 8000fc8:	3501      	adds	r5, #1
 8000fca:	e7f2      	b.n	8000fb2 <__libc_init_array+0x1e>
 8000fcc:	0800100c 	.word	0x0800100c
 8000fd0:	0800100c 	.word	0x0800100c
 8000fd4:	0800100c 	.word	0x0800100c
 8000fd8:	08001010 	.word	0x08001010

08000fdc <_init>:
 8000fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fde:	bf00      	nop
 8000fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fe2:	bc08      	pop	{r3}
 8000fe4:	469e      	mov	lr, r3
 8000fe6:	4770      	bx	lr

08000fe8 <_fini>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr


Atmega_I2C_Driver_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000077e  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000638  00000000  00000000  000009f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038f  00000000  00000000  0000102e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000013c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000391  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000e1  00000000  00000000  000017c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e5       	ldi	r30, 0x5E	; 94
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 67 00 	call	0xce	; 0xce <main>
  7a:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Init>:
#include "I2C _Driver.h"


#define prescaler 1 //1 4 16 64

void I2C_Init(unsigned long SCL_Clock){
  82:	9b 01       	movw	r18, r22
  84:	ac 01       	movw	r20, r24
	//TWBR selects the division factor for the bit rate generator.
	//The bit rate generator is a frequency divider which generates the SCL clock frequency in the Master modes
	TWBR = (unsigned char) (((F_CPU/SCL_Clock)-16)/(2*prescaler));
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	72 e1       	ldi	r23, 0x12	; 18
  8a:	8a e7       	ldi	r24, 0x7A	; 122
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	0e 94 8b 00 	call	0x116	; 0x116 <__udivmodsi4>
  92:	da 01       	movw	r26, r20
  94:	c9 01       	movw	r24, r18
  96:	40 97       	sbiw	r24, 0x10	; 16
  98:	a1 09       	sbc	r26, r1
  9a:	b1 09       	sbc	r27, r1
  9c:	b6 95       	lsr	r27
  9e:	a7 95       	ror	r26
  a0:	97 95       	ror	r25
  a2:	87 95       	ror	r24
  a4:	80 b9       	out	0x00, r24	; 0
  a6:	08 95       	ret

000000a8 <I2C_Start>:
	
	
	//The application writes the TWSTA bit to one when it desires to become a master on the Two-wire Serial Bus. The
	//TWI hardware checks if the bus is available, and generates a START condition on the bus if it is free
	
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  a8:	84 ea       	ldi	r24, 0xA4	; 164
  aa:	86 bf       	out	0x36, r24	; 54
	
	//wait for this bit to be set by hardware
	while(!(TWCR & (1<<TWINT)));
  ac:	06 b6       	in	r0, 0x36	; 54
  ae:	07 fe       	sbrs	r0, 7
  b0:	fd cf       	rjmp	.-6      	; 0xac <I2C_Start+0x4>
	
	while(TWSR != 0x08);
  b2:	81 b1       	in	r24, 0x01	; 1
  b4:	88 30       	cpi	r24, 0x08	; 8
  b6:	e9 f7       	brne	.-6      	; 0xb2 <I2C_Start+0xa>
	
}
  b8:	08 95       	ret

000000ba <I2C_Write>:


void I2C_Write(unsigned char cByte){
	
	TWDR = cByte;
  ba:	83 b9       	out	0x03, r24	; 3
	
	TWCR = (1<<TWINT)|(1<<TWEN);
  bc:	84 e8       	ldi	r24, 0x84	; 132
  be:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
  c0:	06 b6       	in	r0, 0x36	; 54
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <I2C_Write+0x6>
}
  c6:	08 95       	ret

000000c8 <I2C_Stop>:


void I2C_Stop(){
	//Writing the TWSTO bit to one in Master mode will generate a STOP condition on the Two-wire Serial Bus. When
	//the STOP condition is executed on the bus, the TWSTO bit is cleared automatically
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  c8:	84 e9       	ldi	r24, 0x94	; 148
  ca:	86 bf       	out	0x36, r24	; 54
  cc:	08 95       	ret

000000ce <main>:
#include "I2C _Driver.h"

int main(void)
{
	unsigned char ch = 0;
	I2C_Init(0x48);
  ce:	68 e4       	ldi	r22, 0x48	; 72
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	80 e0       	ldi	r24, 0x00	; 0
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Init>
#include <util/delay.h>
#include "I2C _Driver.h"

int main(void)
{
	unsigned char ch = 0;
  da:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  dc:	2f e9       	ldi	r18, 0x9F	; 159
  de:	86 e8       	ldi	r24, 0x86	; 134
  e0:	91 e0       	ldi	r25, 0x01	; 1
  e2:	21 50       	subi	r18, 0x01	; 1
  e4:	80 40       	sbci	r24, 0x00	; 0
  e6:	90 40       	sbci	r25, 0x00	; 0
  e8:	e1 f7       	brne	.-8      	; 0xe2 <main+0x14>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x1e>
  ec:	00 00       	nop
    
    while (1) 
    {
		_delay_ms(500);
		
		I2C_Start();    //transmit start condition
  ee:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Start>
		
		I2C_Write(0b11010000+0);   //transmit slave address + W(0)
  f2:	80 ed       	ldi	r24, 0xD0	; 208
  f4:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Write>
		
		while(TWSR != 0x18);      //slave address + W(0) has been transmitted and ACK has been received
  f8:	81 b1       	in	r24, 0x01	; 1
  fa:	88 31       	cpi	r24, 0x18	; 24
  fc:	e9 f7       	brne	.-6      	; 0xf8 <main+0x2a>
		
		I2C_Write(ch++);   //transmit data
  fe:	d1 e0       	ldi	r29, 0x01	; 1
 100:	dc 0f       	add	r29, r28
 102:	8c 2f       	mov	r24, r28
 104:	0e 94 5d 00 	call	0xba	; 0xba <I2C_Write>
		
		while(TWSR != 0x28);   //data has been transmitted and ACK has been received
 108:	81 b1       	in	r24, 0x01	; 1
 10a:	88 32       	cpi	r24, 0x28	; 40
 10c:	e9 f7       	brne	.-6      	; 0x108 <main+0x3a>
		
		I2C_Stop();
 10e:	0e 94 64 00 	call	0xc8	; 0xc8 <I2C_Stop>
		
		I2C_Write(0b11010000+0);   //transmit slave address + W(0)
		
		while(TWSR != 0x18);      //slave address + W(0) has been transmitted and ACK has been received
		
		I2C_Write(ch++);   //transmit data
 112:	cd 2f       	mov	r28, r29
		
		while(TWSR != 0x28);   //data has been transmitted and ACK has been received
		
		I2C_Stop();
    }
 114:	e3 cf       	rjmp	.-58     	; 0xdc <main+0xe>

00000116 <__udivmodsi4>:
 116:	a1 e2       	ldi	r26, 0x21	; 33
 118:	1a 2e       	mov	r1, r26
 11a:	aa 1b       	sub	r26, r26
 11c:	bb 1b       	sub	r27, r27
 11e:	fd 01       	movw	r30, r26
 120:	0d c0       	rjmp	.+26     	; 0x13c <__udivmodsi4_ep>

00000122 <__udivmodsi4_loop>:
 122:	aa 1f       	adc	r26, r26
 124:	bb 1f       	adc	r27, r27
 126:	ee 1f       	adc	r30, r30
 128:	ff 1f       	adc	r31, r31
 12a:	a2 17       	cp	r26, r18
 12c:	b3 07       	cpc	r27, r19
 12e:	e4 07       	cpc	r30, r20
 130:	f5 07       	cpc	r31, r21
 132:	20 f0       	brcs	.+8      	; 0x13c <__udivmodsi4_ep>
 134:	a2 1b       	sub	r26, r18
 136:	b3 0b       	sbc	r27, r19
 138:	e4 0b       	sbc	r30, r20
 13a:	f5 0b       	sbc	r31, r21

0000013c <__udivmodsi4_ep>:
 13c:	66 1f       	adc	r22, r22
 13e:	77 1f       	adc	r23, r23
 140:	88 1f       	adc	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	1a 94       	dec	r1
 146:	69 f7       	brne	.-38     	; 0x122 <__udivmodsi4_loop>
 148:	60 95       	com	r22
 14a:	70 95       	com	r23
 14c:	80 95       	com	r24
 14e:	90 95       	com	r25
 150:	9b 01       	movw	r18, r22
 152:	ac 01       	movw	r20, r24
 154:	bd 01       	movw	r22, r26
 156:	cf 01       	movw	r24, r30
 158:	08 95       	ret

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>


Atmega32_I2C_Driver_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000011e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000150  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000067c  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cb  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e1  00000000  00000000  00000e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000033d  00000000  00000000  00001154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000035  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000014c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 59 00 	call	0xb2	; 0xb2 <main>
  7a:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <I2C_Set_Address>:
#include "I2C _Driver.h"


void I2C_Set_Address(unsigned char addr){
	TWAR = addr;
  82:	82 b9       	out	0x02, r24	; 2
  84:	08 95       	ret

00000086 <I2C_Read>:
}
unsigned char I2C_Read(unsigned char ack){
	
	unsigned char x = 0;
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  86:	84 ec       	ldi	r24, 0xC4	; 196
  88:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
  8a:	06 b6       	in	r0, 0x36	; 54
  8c:	07 fe       	sbrs	r0, 7
  8e:	fd cf       	rjmp	.-6      	; 0x8a <I2C_Read+0x4>
  90:	01 c0       	rjmp	.+2      	; 0x94 <I2C_Read+0xe>
	while(TWSR != 0x60)x=TWSR;
  92:	81 b1       	in	r24, 0x01	; 1
  94:	81 b1       	in	r24, 0x01	; 1
  96:	80 36       	cpi	r24, 0x60	; 96
  98:	e1 f7       	brne	.-8      	; 0x92 <I2C_Read+0xc>
	
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
  9a:	84 ec       	ldi	r24, 0xC4	; 196
  9c:	86 bf       	out	0x36, r24	; 54
	
	while(!(TWCR & (1<<TWINT)));
  9e:	06 b6       	in	r0, 0x36	; 54
  a0:	07 fe       	sbrs	r0, 7
  a2:	fd cf       	rjmp	.-6      	; 0x9e <I2C_Read+0x18>
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <I2C_Read+0x22>
	while(TWSR != 0x80)x=TWSR;
  a6:	81 b1       	in	r24, 0x01	; 1
  a8:	81 b1       	in	r24, 0x01	; 1
  aa:	80 38       	cpi	r24, 0x80	; 128
  ac:	e1 f7       	brne	.-8      	; 0xa6 <I2C_Read+0x20>
	return TWDR;
  ae:	83 b1       	in	r24, 0x03	; 3
	
  b0:	08 95       	ret

000000b2 <main>:
#include <util/delay.h>
#include "I2C _Driver.h"

int main(void)
{
	DDRA = 0xFF;
  b2:	8f ef       	ldi	r24, 0xFF	; 255
  b4:	8a bb       	out	0x1a, r24	; 26
	I2C_Set_Address(0b11010000);
  b6:	80 ed       	ldi	r24, 0xD0	; 208
  b8:	0e 94 41 00 	call	0x82	; 0x82 <I2C_Set_Address>
	
	
	while (1)
	{
		PORTA = I2C_Read(1);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 43 00 	call	0x86	; 0x86 <I2C_Read>
  c2:	8b bb       	out	0x1b, r24	; 27
  c4:	fb cf       	rjmp	.-10     	; 0xbc <main+0xa>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
